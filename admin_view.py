from customtkinter import *
from tkinter import ttk, messagebox, END
import mysql.connector
from db_config import DB_CONFIG
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import numpy as np
import random
from customtkinter import CTkFrame, CTkLabel, CTkButton, CTkComboBox
import re
from tkcalendar import DateEntry
from tkcalendar import Calendar
from customtkinter import CTk, CTkFrame, CTkLabel, CTkButton, CTkComboBox, CTkEntry, CTkToplevel
from PIL import Image, ImageTk
import customtkinter as ctk
import pandas as pd
import tkinter as tk
from a import ModernNavbar

class AdminView:
    def __init__(self, window, user):
        self.window = window
        self.user = user
        self.window.title("Giao di·ªán Khoa")
        self.window.geometry("1700x700")

        # Kh·ªüi t·∫°o admin_id n·∫øu l√† t√†i kho·∫£n admin
        if self.user['role'] == 'Admin':
            try:
                conn = mysql.connector.connect(**DB_CONFIG)
                cursor = conn.cursor()
                cursor.execute("SELECT user_id FROM users WHERE user_id = %s", (self.user['user_id'],))
                result = cursor.fetchone()
                if result:
                    self.user['admin_id'] = result[0]
                    cursor.execute("SELECT dept_id FROM departments LIMIT 1")
                    dept_result = cursor.fetchone()
                    if dept_result:
                        self.user['dept_id'] = dept_result[0]
                    print(f"Debug: User admin_id: {self.user['admin_id']}, dept_id: {self.user['dept_id']}")
                else:
                    messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y admin t∆∞∆°ng ·ª©ng")
                    self.window.destroy()
                    return
            except mysql.connector.Error as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i th√¥ng tin admin: {e}")
                self.window.destroy()
                return
            finally:
                if cursor:
                    cursor.close()
                if conn:
                    conn.close()
        
        # Frame ch√≠nh ch·ª©a to√†n b·ªô giao di·ªán 
        self.main_frame = CTkFrame(self.window)
        self.main_frame.pack(fill="both", expand=True)

        # ƒê·ªãnh nghƒ©a menu_items cho navbar
        self.navbar_menu_items = [
            {
                "label": "Qu·∫£n l√Ω gi√°o vi√™n",
                "icon": "üë®",
                "fg_color": "#3E54AC",
                "hover_color": "#4B67D6",
                "text_color": "white",
                "command": None,
                "submenu": [
                    {"label": "B·∫±ng c·∫•p", "command": lambda: self.switch_tab("B·∫±ng c·∫•p")},
                    {"label": "Khoa", "command": lambda: self.switch_tab("Khoa")},
                    {"label": "Gi√°o vi√™n", "command": lambda: self.switch_tab("Gi√°o vi√™n")}
                ]
            },
            {
                "label": "Qu·∫£n l√Ω l·ªõp h·ªçc ph·∫ßn",
                "icon": "üìö",
                "fg_color": "#3E54AC",
                "hover_color": "#4B67D6",
                "text_color": "white",
                "command": None,
                "submenu": [
                    {"label": "H·ªçc ph·∫ßn", "command": lambda: self.switch_tab("H·ªçc ph·∫ßn")},
                    {"label": "K·ª≥ h·ªçc", "command": lambda: self.switch_tab("K·ª≥ h·ªçc")},
                    {"label": "L·ªõp h·ªçc", "command": lambda: self.switch_tab("L·ªõp h·ªçc")},
                    {"label": "Ph√¢n c√¥ng", "command": lambda: self.switch_tab("Ph√¢n c√¥ng")}
                ]
            },
            {
                "label": "Th·ªëng k√™",
                "icon": "üìä",
                "fg_color": "#3E54AC",
                "hover_color": "#4B67D6",
                "text_color": "white",
                "command": None,
                "submenu": [
                    {"label": "Th·ªëng k√™ gi√°o vi√™n", "command": lambda: self.switch_tab("Th·ªëng k√™ gi√°o vi√™n")},
                    {"label": "Th·ªëng k√™ l·ªõp", "command": lambda: self.switch_tab("Th·ªëng k√™ l·ªõp")}
                ]
            },
            {
                "label": "Ti·ªÅn d·∫°y",
                "icon": "üí∞",
                "fg_color": "#3E54AC",
                "hover_color": "#4B67D6",
                "text_color": "white",
                "command": None,
                "submenu": [
                    {"label": "ƒê·ªãnh m·ª©c ti·ªÅn theo ti·∫øt", "command": lambda: self.switch_tab("ƒê·ªãnh m·ª©c ti·ªÅn theo ti·∫øt")},
                    {"label": "H·ªá s·ªë gi√°o vi√™n", "command": lambda: self.switch_tab("H·ªá s·ªë gi√°o vi√™n")},
                    {"label": "H·ªá s·ªë l·ªõp", "command": lambda: self.switch_tab("H·ªá s·ªë l·ªõp")},
                    {"label": "T√≠nh ti·ªÅn d·∫°y", "command": lambda: self.switch_tab("T√≠nh ti·ªÅn d·∫°y")}
                ]
            },
            {
                "label": "B√°o c√°o",
                "icon": "üìà",
                "fg_color": "#3E54AC",
                "hover_color": "#4B67D6",
                "text_color": "white",
                "command": lambda: self.switch_tab("B√°o c√°o")  # Ch·ªâ gi·ªØ command m√† kh√¥ng c√≥ submenu
            }
        ]

        # T·∫°o navbar v·ªõi menu_items v√† logout_callback
        self.navbar = ModernNavbar(self.main_frame, fg_color="#2B3467", menu_items=self.navbar_menu_items, logout_callback=self.logout)
        self.navbar.pack(side="left", fill="y")

        # C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng trong footer c·ªßa navbar
        self.navbar.footer.winfo_children()[1].winfo_children()[0].configure(text=self.user['username'])
        self.navbar.footer.winfo_children()[1].winfo_children()[1].configure(text=self.user['role'])

        # Frame ch√≠nh b√™n ph·∫£i ch·ª©a n·ªôi dung
        self.content_frame = CTkFrame(self.main_frame, fg_color=("#E6F0FA", "#B0C4DE"))
        self.content_frame.pack(side="right", fill="both", expand=True)

        # Frame ch·ª©a c√°c tab
        self.tab_frame = CTkFrame(self.content_frame, fg_color="transparent")
        self.tab_frame.pack(fill="both", expand=True, padx=10, pady=10)

        # Kh·ªüi t·∫°o c√°c tab
        self.degree_tab = CTkFrame(self.tab_frame, fg_color="#FFFFFF", corner_radius=10)
        self.dept_tab = CTkFrame(self.tab_frame, fg_color="#FFFFFF", corner_radius=10)
        self.teacher_tab = CTkFrame(self.tab_frame, fg_color="#FFFFFF", corner_radius=10)
        self.stats_tab = CTkFrame(self.tab_frame, fg_color="#FFFFFF", corner_radius=10)
        self.module_tab = CTkFrame(self.tab_frame, fg_color="#FFFFFF", corner_radius=10)
        self.class_tab = CTkFrame(self.tab_frame, fg_color="#FFFFFF", corner_radius=10)
        self.semester_tab = CTkFrame(self.tab_frame, fg_color="#FFFFFF", corner_radius=10)
        self.class_stats_tab = CTkFrame(self.tab_frame, fg_color="#FFFFFF", corner_radius=10)
        self.teacher_coefficient_tab = CTkFrame(self.tab_frame, fg_color="#FFFFFF", corner_radius=10)
        self.teaching_rate_tab = CTkFrame(self.tab_frame, fg_color="#FFFFFF", corner_radius=10)
        self.class_coefficient_tab = CTkFrame(self.tab_frame, fg_color="#FFFFFF", corner_radius=10)
        self.salary_calc_tab = CTkFrame(self.tab_frame, fg_color="#FFFFFF", corner_radius=10)
        self.report_tab = CTkFrame(self.tab_frame, fg_color="#FFFFFF", corner_radius=10)
        self.assignment_tab = CTkFrame(self.tab_frame, fg_color="#FFFFFF", corner_radius=10)  # Th√™m tab Ph√¢n c√¥ng

        # G·ªçi c√°c h√†m setup cho c√°c tab
        self.setup_degree_tab()
        self.setup_dept_tab()
        self.setup_teacher_tab()
        self.setup_stats_tab()
        self.setup_module_tab()
        self.setup_class_tab()
        self.setup_semester_tab()
        self.setup_class_stats_tab()
        self.setup_teacher_coefficient_tab()
        self.setup_teaching_rate_tab()
        self.setup_class_coefficient_tab()
        self.setup_salary_calc_tab()
        self.setup_report_tab()
        self.setup_assignment_tab()

        # Hi·ªÉn th·ªã tab m·∫∑c ƒë·ªãnh
        self.current_tab = self.teacher_tab
        self.current_tab.pack(fill="both", expand=True)

        # Kh·ªüi t·∫°o c√°c bi·∫øn cho t√≠nh l∆∞∆°ng
        self.salary_calc_teacher_name_value = None
        self.salary_calc_teacher_id_value = None
        self.salary_calc_degree_value = None
        self.salary_calc_dept_value = None
        self.salary_calc_teacher_coeff_value = None
        self.salary_calc_rate_value = None
        self.salary_calc_period_value = None

        # Kh·ªüi t·∫°o c√°c bi·∫øn cho b√°o c√°o l∆∞∆°ng
        self.salary_report_teacher_name_value = None
        self.salary_report_teacher_id_value = None
        self.salary_report_teacher_degree_value = None
        self.salary_report_teacher_dept_value = None
        self.salary_report_total_salary_label = None
        self.salary_report_total_classes_label = None
        self.salary_report_total_periods_label = None
        self.salary_report_total_salary_temp_label = None

        # C·∫•u h√¨nh style cho Treeview
        style = ttk.Style()
        style.configure("Treeview",
                        font=("Helvetica", 10),
                        rowheight=20,
                        background="#FFFFFF",
                        foreground="black",
                        fieldbackground="#F0F0F0")
        style.configure("Treeview.Heading",
                        font=("Helvetica", 10, "bold"),
                        background="#D3D3D3",
                        foreground="black")

    def setup_degree_tab(self):
        # Ti√™u ƒë·ªÅ tab
        header_frame = CTkFrame(self.degree_tab, fg_color="transparent")
        header_frame.pack(fill="x", padx=10, pady=10)
        CTkLabel(header_frame, text="Qu·∫£n l√Ω b·∫±ng c·∫•p", font=("Helvetica", 18, "bold"), text_color="black").pack(side="left")
        CTkButton(header_frame, text="Th√™m b·∫±ng c·∫•p m·ªõi", fg_color="#0085FF", command=self.add_degree).pack(side="right")

        # Frame ch·ª©a heading v√† danh s√°ch
        self.degree_container = CTkFrame(self.degree_tab, fg_color="#FFFFFF", corner_radius=10)
        self.degree_container.pack(padx=10, pady=10, fill="both", expand=True)

        # Heading
        heading_frame = CTkFrame(self.degree_container, fg_color="#D3D3D3", corner_radius=0)
        heading_frame.pack(fill="x", padx=5, pady=(5, 0))
        
        # T·∫°o c√°c c·ªôt heading v·ªõi chi·ªÅu r·ªông l·ªõn h∆°n ƒë·ªÉ l·∫•p ƒë·∫ßy kh√¥ng gian
        # T·∫°o c√°c c·ªôt heading v·ªõi chi·ªÅu r·ªông l·ªõn h∆°n ƒë·ªÉ l·∫•p ƒë·∫ßy kh√¥ng gian
        CTkLabel(heading_frame, text="M√£ b·∫±ng c·∫•p", font=("Helvetica", 12, "bold"), text_color="black", width=160, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="T√™n b·∫±ng c·∫•p", font=("Helvetica", 12, "bold"), text_color="black", width=400, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="T√™n vi·∫øt t·∫Øt", font=("Helvetica", 12, "bold"), text_color="black", width=250, anchor="center").pack(side="left", padx=5)
        # CTkLabel(heading_frame, text="H·ªá s·ªë", font=("Helvetica", 12, "bold"), text_color="black", width=150, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="Thao t√°c", font=("Helvetica", 12, "bold"), text_color="black", width=200, anchor="center").pack(side="left", padx=5)

        # Frame ch·ª©a danh s√°ch b·∫±ng c·∫•p
        self.degree_list_frame = CTkFrame(self.degree_container, fg_color="transparent")
        self.degree_list_frame.pack(fill="both", expand=True, padx=5, pady=5)

        # T·∫£i d·ªØ li·ªáu b·∫±ng c·∫•p
        self.load_degrees()

    def setup_dept_tab(self):
        # Ti√™u ƒë·ªÅ tab
        header_frame = CTkFrame(self.dept_tab, fg_color="transparent")
        header_frame.pack(fill="x", padx=10, pady=10)
        CTkLabel(header_frame, text="Qu·∫£n l√Ω khoa", font=("Helvetica", 18, "bold"), text_color="black").pack(side="left")
        CTkButton(header_frame, text="Th√™m khoa m·ªõi", fg_color="#0085FF", command=self.add_dept).pack(side="right")

        # Frame ch·ª©a heading v√† danh s√°ch
        self.dept_container = CTkFrame(self.dept_tab, fg_color="#FFFFFF", corner_radius=10)
        self.dept_container.pack(padx=10, pady=10, fill="both", expand=True)

        # Heading
        heading_frame = CTkFrame(self.dept_container, fg_color="#D3D3D3", corner_radius=0)
        heading_frame.pack(fill="x", padx=5, pady=(5, 0))
        
        # T·∫°o c√°c c·ªôt heading v·ªõi chi·ªÅu r·ªông ƒëi·ªÅu ch·ªânh
        CTkLabel(heading_frame, text="M√£ khoa", font=("Helvetica", 12, "bold"), text_color="black", width=150, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="T√™n khoa", font=("Helvetica", 12, "bold"), text_color="black", width=200, anchor="center").pack(side="left", padx=5)  # Gi·∫£m t·ª´ 450 xu·ªëng 400
        CTkLabel(heading_frame, text="T√™n vi·∫øt t·∫Øt", font=("Helvetica", 12, "bold"), text_color="black", width=150, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="M√¥ t·∫£ nhi·ªám v·ª•", font=("Helvetica", 12, "bold"), text_color="black", width=300, anchor="center").pack(side="left", padx=5)  # Gi·∫£m t·ª´ 600 xu·ªëng 500
        CTkLabel(heading_frame, text="Thao t√°c", font=("Helvetica", 12, "bold"), text_color="black", width=250, anchor="center").pack(side="left", padx=5)  # TƒÉng t·ª´ 250 l√™n 350

        # Frame ch·ª©a danh s√°ch khoa
        self.dept_list_frame = CTkFrame(self.dept_container, fg_color="transparent")
        self.dept_list_frame.pack(fill="both", expand=True, padx=5, pady=5)

        # T·∫£i d·ªØ li·ªáu khoa
        self.load_depts()

    def setup_teacher_tab(self):
        # Ti√™u ƒë·ªÅ tab
        header_frame = CTkFrame(self.teacher_tab, fg_color="transparent")
        header_frame.pack(fill="x", padx=10, pady=10)
        CTkLabel(header_frame, text="Qu·∫£n l√Ω gi√°o vi√™n", font=("Helvetica", 18, "bold"), text_color="black").pack(side="left")
        CTkButton(header_frame, text="Th√™m gi√°o vi√™n m·ªõi", fg_color="#0085FF", command=self.add_teacher).pack(side="right")

        # Frame ch·ª©a heading v√† danh s√°ch
        self.teacher_container = CTkFrame(self.teacher_tab, fg_color="#FFFFFF", corner_radius=10)
        self.teacher_container.pack(padx=10, pady=10, fill="both", expand=True)

        # Heading
        heading_frame = CTkFrame(self.teacher_container, fg_color="#D3D3D3", corner_radius=0)
        heading_frame.pack(fill="x", padx=5, pady=(5, 0))
        
        # T·∫°o c√°c c·ªôt heading
        CTkLabel(heading_frame, text="M√£ gi√°o vi√™n", font=("Helvetica", 12, "bold"), text_color="black", width=80, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="H·ªç t√™n", font=("Helvetica", 12, "bold"), text_color="black", width=120, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="Ng√†y sinh", font=("Helvetica", 12, "bold"), text_color="black", width=80, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="ƒêi·ªán tho·∫°i", font=("Helvetica", 12, "bold"), text_color="black", width=80, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="Email", font=("Helvetica", 12, "bold"), text_color="black", width=180, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="Khoa", font=("Helvetica", 12, "bold"), text_color="black", width=200, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="B·∫±ng c·∫•p", font=("Helvetica", 12, "bold"), text_color="black", width=120, anchor="center").pack(side="left", padx=5)
        # CTkLabel(heading_frame, text="H·ªá s·ªë", font=("Helvetica", 12, "bold"), text_color="black", width=60, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="Thao t√°c", font=("Helvetica", 12, "bold"), text_color="black", width=100, anchor="center").pack(side="left", padx=5)

        # Frame ch·ª©a danh s√°ch gi√°o vi√™n
        self.teacher_list_frame = CTkFrame(self.teacher_container, fg_color="transparent")
        self.teacher_list_frame.pack(fill="both", expand=True, padx=5, pady=5)

        # T·∫£i d·ªØ li·ªáu gi√°o vi√™n
        self.load_teachers()

    def setup_stats_tab(self):
    # Ti√™u ƒë·ªÅ
        header_frame = CTkFrame(self.stats_tab, fg_color="transparent")
        header_frame.pack(fill="x", padx=10, pady=10)
        CTkLabel(header_frame, text="Th·ªëng k√™ gi√°o vi√™n", font=("Helvetica", 18, "bold"), text_color="black").pack(side="left")
        
        # N√∫t h√†nh ƒë·ªông
        button_frame = CTkFrame(header_frame, fg_color="transparent")
        button_frame.pack(side="right")
        CTkButton(button_frame, text="Xu·∫•t b√°o c√°o", font=("Helvetica", 12), fg_color="#36A2EB", hover_color="#2A82C5", 
                command=self.export_stats).pack(side="left", padx=5)
        CTkButton(button_frame, text="C·∫≠p nh·∫≠t", font=("Helvetica", 12), fg_color="#36A2EB", hover_color="#2A82C5", 
                command=self.refresh_stats).pack(side="left", padx=5)

        # Th·ªëng k√™ t·ªïng quan
        overview_frame = CTkFrame(self.stats_tab, fg_color="transparent")
        overview_frame.pack(fill="x", padx=10, pady=10)
        
        # T·ªïng s·ªë gi√°o vi√™n
        total_teachers_frame = CTkFrame(overview_frame, fg_color=("#BBDEFB", "#64B5F6"), corner_radius=12, 
                                        border_width=3, border_color="#1976D2", width=200, height=100)
        total_teachers_frame.pack(side="left", padx=10, pady=5, fill="x", expand=True)
        total_teachers_frame.pack_propagate(False)
        self.total_teachers_label = CTkLabel(total_teachers_frame, text="0", font=("Helvetica", 28, "bold"), text_color="#0D47A1")
        self.total_teachers_label.pack(pady=(15, 5))
        CTkLabel(total_teachers_frame, text="T·ªïng s·ªë gi√°o vi√™n", font=("Helvetica", 14, "bold"), text_color="#0D47A1").pack(pady=(0, 10))

        # S·ªë b·∫±ng c·∫•p
        degree_count_frame = CTkFrame(overview_frame, fg_color=("#C8E6C9", "#81C784"), corner_radius=12, 
                                    border_width=3, border_color="#388E3C", width=200, height=100)
        degree_count_frame.pack(side="left", padx=10, pady=5, fill="x", expand=True)
        degree_count_frame.pack_propagate(False)
        self.degree_count_label = CTkLabel(degree_count_frame, text="0", font=("Helvetica", 28, "bold"), text_color="#1B5E20")
        self.degree_count_label.pack(pady=(15, 5))
        CTkLabel(degree_count_frame, text="S·ªë b·∫±ng c·∫•p", font=("Helvetica", 14, "bold"), text_color="#1B5E20").pack(pady=(0, 10))

        # S·ªë khoa
        total_depts_frame = CTkFrame(overview_frame, fg_color=("#FFECB3", "#FFB300"), corner_radius=12, 
                                    border_width=3, border_color="#F57C00", width=200, height=100)
        total_depts_frame.pack(side="left", padx=10, pady=5, fill="x", expand=True)
        total_depts_frame.pack_propagate(False)
        self.total_depts_label = CTkLabel(total_depts_frame, text="0", font=("Helvetica", 28, "bold"), text_color="#E65100")
        self.total_depts_label.pack(pady=(15, 5))
        CTkLabel(total_depts_frame, text="S·ªë khoa", font=("Helvetica", 14, "bold"), text_color="#E65100").pack(pady=(0, 10))

        # Tab ƒëi·ªÅu h∆∞·ªõng
        tab_frame = CTkFrame(self.stats_tab, fg_color="#FFFFFF", corner_radius=10)
        tab_frame.pack(fill="x", padx=10, pady=10)
        
        CTkButton(tab_frame, text="Th·ªëng k√™ theo ƒë·ªô tu·ªïi", font=("Helvetica", 14), fg_color="#36A2EB", hover_color="#2A82C5", 
                command=self.show_age_chart).pack(side="left", padx=5, pady=5, fill="x", expand=True)
        CTkButton(tab_frame, text="Th·ªëng k√™ theo b·∫±ng c·∫•p", font=("Helvetica", 14), fg_color="#FF6384", hover_color="#E55773", 
                command=self.show_degree_chart).pack(side="left", padx=5, pady=5, fill="x", expand=True)
        CTkButton(tab_frame, text="Th·ªëng k√™ theo khoa", font=("Helvetica", 14), fg_color="#FFCE56", hover_color="#E5B74C", 
                command=self.show_dept_chart).pack(side="left", padx=5, pady=5, fill="x", expand=True)

        # Frame ch·ª©a bi·ªÉu ƒë·ªì v√† b·∫£ng
        self.chart_frame = CTkFrame(self.stats_tab, fg_color="#FFFFFF", corner_radius=10)
        self.chart_frame.pack(padx=10, pady=10, fill="both", expand=True)

        # Kh·ªüi t·∫°o tab ƒë·∫ßu ti√™n v√† c·∫≠p nh·∫≠t nh√£n
        self.update_labels()
        self.show_age_chart()

    def clear_chart_frame(self):
        for widget in self.chart_frame.winfo_children():
            widget.destroy()

    def show_age_chart(self):
        self.clear_chart_frame()
        
        age_labels, age_data = self.get_age_distribution()
        if not age_labels or not age_data:
            messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªô tu·ªïi ƒë·ªÉ hi·ªÉn th·ªã.")
            return

        total = sum(age_data)
        ratios = [f"{(count/total*100):.1f}%" if total > 0 else "0.0%" for count in age_data]

        # Frame ch√≠nh
        main_frame = CTkFrame(self.chart_frame, fg_color="transparent") 
        main_frame.pack(fill="both", expand=True)

        # Frame ti√™u ƒë·ªÅ
        title_frame = CTkFrame(main_frame, fg_color="transparent")
        title_frame.pack(pady=(5,10))
        CTkLabel(title_frame, text="Ph√¢n b·ªë ƒë·ªô tu·ªïi gi√°o vi√™n", 
                font=("Helvetica", 16, "bold"), 
                text_color="#0D47A1").pack()

        # Frame ch·ª©a bi·ªÉu ƒë·ªì v√† b·∫£ng
        content_frame = CTkFrame(main_frame, fg_color="transparent")
        content_frame.pack(fill="both", expand=True)
        
        # Chia frame th√†nh 2 c·ªôt v·ªõi t·ª∑ l·ªá 7:3
        content_frame.grid_columnconfigure(0, weight=7)  # Bi·ªÉu ƒë·ªì chi·∫øm 70%
        content_frame.grid_columnconfigure(1, weight=3)  # B·∫£ng chi·∫øm 30%

        # Frame bi·ªÉu ƒë·ªì v·ªõi vi·ªÅn v√† n·ªÅn tr·∫Øng 
        chart_container = CTkFrame(content_frame, fg_color="#FFFFFF", corner_radius=10, border_width=1, border_color="#E0E0E0")
        chart_container.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")

        # V·∫Ω bi·ªÉu ƒë·ªì
        fig, ax = plt.subplots(figsize=(8, 4))  # ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc bi·ªÉu ƒë·ªì
        bars = ax.bar(age_labels, age_data, color=["#FF6384", "#36A2EB", "#FFCE56", "#4BC0C0", "#9966FF"])

        # Th√™m gi√° tr·ªã v√† t·ªâ l·ªá ph·∫ßn trƒÉm l√™n ƒë·ªânh c·ªßa m·ªói c·ªôt
        for bar, ratio in zip(bars, ratios):
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2., height,
                    f'{int(height)}\n{ratio}',
                    ha='center', va='bottom')

        ax.set_xlabel("Nh√≥m tu·ªïi", fontsize=10)
        ax.set_ylabel("S·ªë gi√°o vi√™n", fontsize=10) 
        ax.set_ylim(0, max(age_data) + 1 if age_data else 1)
        plt.xticks(rotation=0)
        plt.tight_layout()

        canvas = FigureCanvasTkAgg(fig, master=chart_container)
        canvas.draw()
        canvas.get_tk_widget().pack(fill="both", expand=True, padx=10, pady=10)

        # Frame b·∫£ng th·ªëng k√™ chi ti·∫øt
        table_container = CTkFrame(content_frame, fg_color="#FFFFFF", corner_radius=10, border_width=1, border_color="#E0E0E0")
        table_container.grid(row=0, column=1, padx=10, pady=10, sticky="nsew")

        # Ti√™u ƒë·ªÅ b·∫£ng
        CTkLabel(table_container, 
                text="Chi ti·∫øt th·ªëng k√™", 
                font=("Helvetica", 14, "bold"),
                text_color="#0D47A1").pack(pady=5)

        # T·∫°o frame ri√™ng cho b·∫£ng v·ªõi chi·ªÅu cao c·ªë ƒë·ªãnh
        tree_frame = CTkFrame(table_container, fg_color="transparent", height=150)  # Chi·ªÅu cao c·ªë ƒë·ªãnh
        tree_frame.pack(fill="x", padx=5, pady=5)
        tree_frame.pack_propagate(False)  # NgƒÉn frame t·ª± co gi√£n

        # Style cho b·∫£ng
        style = ttk.Style()
        style.configure("Stats.Treeview", font=("Helvetica", 10), rowheight=25)
        style.configure("Stats.Treeview.Heading", font=("Helvetica", 10, "bold"))
        
        # T·∫°o b·∫£ng
        tree = ttk.Treeview(tree_frame, columns=("Age", "Count", "Ratio"), 
                        show="headings", style="Stats.Treeview", height=5)
        
        # ƒê·ªãnh d·∫°ng c·ªôt
        tree.heading("Age", text="ƒê·ªô tu·ªïi")
        tree.heading("Count", text="S·ªë l∆∞·ª£ng") 
        tree.heading("Ratio", text="T·ª∑ l·ªá")
        
        tree.column("Age", width=80, anchor="center")
        tree.column("Count", width=80, anchor="center")
        tree.column("Ratio", width=80, anchor="center")
        
        tree.pack(fill="both", expand=True)

        # Th√™m d·ªØ li·ªáu v√†o b·∫£ng
        for label, count, ratio in zip(age_labels, age_data, ratios):
            tree.insert("", "end", values=(label, count, ratio))

    def show_degree_chart(self):
        self.clear_chart_frame()
        
        degree_labels, degree_data = self.get_degree_distribution()
        if not degree_labels or not degree_data:
            messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ d·ªØ li·ªáu b·∫±ng c·∫•p ƒë·ªÉ hi·ªÉn th·ªã.")
            return

        total = sum(degree_data)
        ratios = [f"{(count/total*100):.1f}%" if total > 0 else "0.0%" for count in degree_data]

        # Frame ch√≠nh
        main_frame = CTkFrame(self.chart_frame, fg_color="transparent") 
        main_frame.pack(fill="both", expand=True)

        # Frame ti√™u ƒë·ªÅ
        title_frame = CTkFrame(main_frame, fg_color="transparent")
        title_frame.pack(pady=(5,10))
        CTkLabel(title_frame, text="Ph√¢n b·ªë b·∫±ng c·∫•p gi√°o vi√™n", 
                font=("Helvetica", 16, "bold"), 
                text_color="#0D47A1").pack()

        # Frame ch·ª©a bi·ªÉu ƒë·ªì v√† b·∫£ng
        content_frame = CTkFrame(main_frame, fg_color="transparent")
        content_frame.pack(fill="both", expand=True)
        
        content_frame.grid_columnconfigure(0, weight=7)
        content_frame.grid_columnconfigure(1, weight=3)

        # Frame bi·ªÉu ƒë·ªì
        chart_container = CTkFrame(content_frame, fg_color="#FFFFFF", corner_radius=10, border_width=1, border_color="#E0E0E0")
        chart_container.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")

        # V·∫Ω bi·ªÉu ƒë·ªì
        fig, ax = plt.subplots(figsize=(8, 4))
        bars = ax.bar(degree_labels, degree_data, color=["#FF6384", "#36A2EB", "#FFCE56", "#4BC0C0"])

        # Th√™m gi√° tr·ªã v√† t·ªâ l·ªá l√™n ƒë·ªânh c·ªôt
        for bar, ratio in zip(bars, ratios):
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2., height,
                    f'{int(height)}\n{ratio}',
                    ha='center', va='bottom')

        ax.set_xlabel("B·∫±ng c·∫•p", fontsize=10)
        ax.set_ylabel("S·ªë gi√°o vi√™n", fontsize=10)
        ax.set_ylim(0, max(degree_data) + 1 if degree_data else 1)
        plt.xticks(rotation=15)
        plt.tight_layout()

        canvas = FigureCanvasTkAgg(fig, master=chart_container)
        canvas.draw()
        canvas.get_tk_widget().pack(fill="both", expand=True, padx=10, pady=10)

        # Frame b·∫£ng th·ªëng k√™
        table_container = CTkFrame(content_frame, fg_color="#FFFFFF", corner_radius=10, border_width=1, border_color="#E0E0E0")
        table_container.grid(row=0, column=1, padx=10, pady=10, sticky="nsew")

        CTkLabel(table_container, text="Chi ti·∫øt th·ªëng k√™", 
                font=("Helvetica", 14, "bold"),
                text_color="#0D47A1").pack(pady=5)

        tree_frame = CTkFrame(table_container, fg_color="transparent", height=150)
        tree_frame.pack(fill="x", padx=5, pady=5)
        tree_frame.pack_propagate(False)

        style = ttk.Style()
        style.configure("Stats.Treeview", font=("Helvetica", 10), rowheight=25)
        style.configure("Stats.Treeview.Heading", font=("Helvetica", 10, "bold"))
        
        tree = ttk.Treeview(tree_frame, columns=("Degree", "Count", "Ratio"), 
                        show="headings", style="Stats.Treeview", height=5)
        
        tree.heading("Degree", text="B·∫±ng c·∫•p")
        tree.heading("Count", text="S·ªë l∆∞·ª£ng")
        tree.heading("Ratio", text="T·ª∑ l·ªá")
        
        tree.column("Degree", width=80, anchor="center")
        tree.column("Count", width=80, anchor="center")
        tree.column("Ratio", width=80, anchor="center")
        
        tree.pack(fill="both", expand=True)

        for label, count, ratio in zip(degree_labels, degree_data, ratios):
            tree.insert("", "end", values=(label, count, ratio))

    def show_dept_chart(self):
        self.clear_chart_frame()
        
        dept_labels, dept_data = self.get_dept_distribution()
        if not dept_labels or not dept_data:
            messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ d·ªØ li·ªáu khoa ƒë·ªÉ hi·ªÉn th·ªã.")
            return

        total = sum(dept_data)
        ratios = [f"{(count/total*100):.1f}%" if total > 0 else "0.0%" for count in dept_data]

        # Frame ch√≠nh
        main_frame = CTkFrame(self.chart_frame, fg_color="transparent") 
        main_frame.pack(fill="both", expand=True)

        # Frame ti√™u ƒë·ªÅ
        title_frame = CTkFrame(main_frame, fg_color="transparent")
        title_frame.pack(pady=(5,10))
        CTkLabel(title_frame, text="Ph√¢n b·ªë gi√°o vi√™n theo khoa", 
                font=("Helvetica", 16, "bold"), 
                text_color="#0D47A1").pack()

        # Frame ch·ª©a bi·ªÉu ƒë·ªì v√† b·∫£ng
        content_frame = CTkFrame(main_frame, fg_color="transparent")
        content_frame.pack(fill="both", expand=True)
        
        content_frame.grid_columnconfigure(0, weight=7)
        content_frame.grid_columnconfigure(1, weight=3)

        # Frame bi·ªÉu ƒë·ªì
        chart_container = CTkFrame(content_frame, fg_color="#FFFFFF", corner_radius=10, border_width=1, border_color="#E0E0E0")
        chart_container.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")

        # V·∫Ω bi·ªÉu ƒë·ªì
        fig, ax = plt.subplots(figsize=(8, 4))
        bars = ax.bar(dept_labels, dept_data, color=["#FF6384", "#36A2EB", "#FFCE56", "#4BC0C0", "#9966FF"])

        # Th√™m gi√° tr·ªã v√† t·ªâ l·ªá l√™n ƒë·ªânh c·ªôt
        for bar, ratio in zip(bars, ratios):
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2., height,
                    f'{int(height)}\n{ratio}',
                    ha='center', va='bottom')

        ax.set_xlabel("Khoa", fontsize=10)
        ax.set_ylabel("S·ªë gi√°o vi√™n", fontsize=10)
        ax.set_ylim(0, max(dept_data) + 1 if dept_data else 1)
        plt.xticks(rotation=15)
        plt.tight_layout()

        canvas = FigureCanvasTkAgg(fig, master=chart_container)
        canvas.draw()
        canvas.get_tk_widget().pack(fill="both", expand=True, padx=10, pady=10)

        # Frame b·∫£ng th·ªëng k√™
        table_container = CTkFrame(content_frame, fg_color="#FFFFFF", corner_radius=10, border_width=1, border_color="#E0E0E0")
        table_container.grid(row=0, column=1, padx=10, pady=10, sticky="nsew")

        CTkLabel(table_container, text="Chi ti·∫øt th·ªëng k√™", 
                font=("Helvetica", 14, "bold"),
                text_color="#0D47A1").pack(pady=5)

        tree_frame = CTkFrame(table_container, fg_color="transparent", height=150)
        tree_frame.pack(fill="x", padx=5, pady=5)
        tree_frame.pack_propagate(False)

        style = ttk.Style()
        style.configure("Stats.Treeview", font=("Helvetica", 10), rowheight=25)
        style.configure("Stats.Treeview.Heading", font=("Helvetica", 10, "bold"))
        
        tree = ttk.Treeview(tree_frame, columns=("Dept", "Count", "Ratio"), 
                        show="headings", style="Stats.Treeview", height=5)
        
        tree.heading("Dept", text="Khoa")
        tree.heading("Count", text="S·ªë l∆∞·ª£ng")
        tree.heading("Ratio", text="T·ª∑ l·ªá")
        
        tree.column("Dept", width=80, anchor="center")
        tree.column("Count", width=80, anchor="center")
        tree.column("Ratio", width=80, anchor="center")
        
        tree.pack(fill="both", expand=True)

        for label, count, ratio in zip(dept_labels, dept_data, ratios):
            tree.insert("", "end", values=(label, count, ratio))

    def export_stats(self):
        import pandas as pd
        
        age_labels, age_data = self.get_age_distribution()
        degree_labels, degree_data = self.get_degree_distribution()
        
        # L·∫•y d·ªØ li·ªáu khoa v·ªõi t√™n ƒë·∫ßy ƒë·ªß
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            query = """
                SELECT d.dept_name, COUNT(t.teacher_id) 
                FROM departments d 
                LEFT JOIN teachers t ON d.dept_id = t.dept_id
                GROUP BY d.dept_id, d.dept_name
            """
            cursor.execute(query)
            dept_labels = []
            dept_data = []
            for row in cursor.fetchall():
                dept_name, count = row
                dept_labels.append(dept_name)
                dept_data.append(count)
        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu khoa: {e}")
            return
        finally:
            if cursor:
                cursor.close()
            if conn:
                conn.close()
        
        try:
            # T·∫°o c√°c DataFrame
            age_df = pd.DataFrame({
                "ƒê·ªô tu·ªïi": age_labels,
                "S·ªë l∆∞·ª£ng": age_data,
                "T·ª∑ l·ªá (%)": [f"{(count/sum(age_data)*100):.1f}" if sum(age_data) > 0 else "0.0" for count in age_data]
            })
            degree_df = pd.DataFrame({
                "B·∫±ng c·∫•p": degree_labels,
                "S·ªë l∆∞·ª£ng": degree_data,
                "T·ª∑ l·ªá (%)": [f"{(count/sum(degree_data)*100):.1f}" if sum(degree_data) > 0 else "0.0" for count in degree_data]
            })
            dept_df = pd.DataFrame({
                "Khoa": dept_labels,
                "S·ªë l∆∞·ª£ng": dept_data,
                "T·ª∑ l·ªá (%)": [f"{(count/sum(dept_data)*100):.1f}" if sum(dept_data) > 0 else "0.0" for count in dept_data]
            })

            # Xu·∫•t ra Excel
            with pd.ExcelWriter("teacher_statistics.xlsx", engine="xlsxwriter") as writer:
                age_df.to_excel(writer, sheet_name="Age_Distribution", index=False)
                degree_df.to_excel(writer, sheet_name="Degree_Distribution", index=False)
                dept_df.to_excel(writer, sheet_name="Dept_Distribution", index=False)
            
            messagebox.showinfo("Th√†nh c√¥ng", "B√°o c√°o ƒë√£ ƒë∆∞·ª£c xu·∫•t ra file: teacher_statistics.xlsx")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ xu·∫•t b√°o c√°o: {e}")

    def refresh_stats(self):
        self.update_labels()
        self.show_age_chart()

    def update_labels(self):
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            
            # T·ªïng s·ªë gi√°o vi√™n
            cursor.execute("SELECT COUNT(*) FROM teachers")
            total_teachers = cursor.fetchall()[0][0]
            self.total_teachers_label.configure(text=str(total_teachers))
            
            # S·ªë l∆∞·ª£ng b·∫±ng c·∫•p
            cursor.execute("SELECT COUNT(*) FROM degrees")
            degree_count = cursor.fetchall()[0][0]
            self.degree_count_label.configure(text=str(degree_count))
            
            # S·ªë khoa
            cursor.execute("SELECT COUNT(*) FROM departments")
            total_depts = cursor.fetchall()[0][0]
            self.total_depts_label.configure(text=str(total_depts))
        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu th·ªëng k√™: {e}")
        finally:
            if cursor:
                cursor.close()
            if conn:
                conn.close()

    from tkcalendar import DateEntry

    def setup_semester_tab(self):
        # Header with title and add button
        header_frame = CTkFrame(self.semester_tab, fg_color="transparent")
        header_frame.pack(fill="x", padx=10, pady=10)
        CTkLabel(header_frame, text="Qu·∫£n l√Ω k·ª≥ h·ªçc", font=("Helvetica", 18, "bold"), text_color="black").pack(side="left")
        CTkButton(header_frame, text="Th√™m k·ª≥ h·ªçc m·ªõi", fg_color="#0085FF", command=self.add_semester).pack(side="right")

        # Main container
        self.semester_container = CTkFrame(self.semester_tab, fg_color="#FFFFFF", corner_radius=10)
        self.semester_container.pack(padx=10, pady=10, fill="both", expand=True)

        # Heading row
        heading_frame = CTkFrame(self.semester_container, fg_color="#D3D3D3", corner_radius=0)
        heading_frame.pack(fill="x", padx=5, pady=(5, 0))
        
        # Column headers (gi·ªëng tab H·ªçc ph·∫ßn)
        CTkLabel(heading_frame, text="M√£ k·ª≥", font=("Helvetica", 14, "bold"), text_color="black", width=150, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="T√™n k·ª≥", font=("Helvetica", 14, "bold"), text_color="black", width=200, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="NƒÉm h·ªçc", font=("Helvetica", 14, "bold"), text_color="black", width=150, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="Ng√†y b·∫Øt ƒë·∫ßu", font=("Helvetica", 14, "bold"), text_color="black", width=200, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="Ng√†y k·∫øt th√∫c", font=("Helvetica", 14, "bold"), text_color="black", width=200, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="Thao t√°c", font=("Helvetica", 14, "bold"), text_color="black", width=150, anchor="center").pack(side="left", padx=5)

        # List frame
        self.semester_list_frame = CTkFrame(self.semester_container, fg_color="transparent")
        self.semester_list_frame.pack(fill="both", expand=True, padx=5, pady=5)

        # Load semester data
        self.load_semesters()


    def setup_class_stats_tab(self):
        # Ti√™u ƒë·ªÅ
        ctk.CTkLabel(self.class_stats_tab, text="Th·ªëng k√™ l·ªõp h·ªçc ph·∫ßn", font=("Helvetica", 18, "bold"), text_color="black").pack(pady=10)

        # Frame b·ªô l·ªçc 
        filter_frame = ctk.CTkFrame(self.class_stats_tab, fg_color="#F0F0F0", corner_radius=10)
        filter_frame.pack(padx=10, pady=10, fill="x")
        ctk.CTkLabel(filter_frame, text="NƒÉm h·ªçc:", font=("Helvetica", 14), text_color="black").pack(side="left", padx=5)
        self.stats_year_combobox = ctk.CTkComboBox(filter_frame, width=200, values=self.get_academic_years(), command=self.update_class_stats)
        self.stats_year_combobox.pack(side="left", padx=5)
        self.stats_year_combobox.set("2025-2026")

        # Frame n√∫t ƒëi·ªÅu h∆∞·ªõng
        button_frame = ctk.CTkFrame(self.class_stats_tab, fg_color="transparent")
        button_frame.pack(pady=5)
        ctk.CTkButton(button_frame, text="Bi·ªÉu ƒë·ªì", fg_color="#FF6384", hover_color="#E55773", command=self.show_class_stats_chart).pack(side="left", padx=5)
        ctk.CTkButton(button_frame, text="B·∫£ng", fg_color="#36A2EB", hover_color="#2A82C5", command=self.show_class_stats_table).pack(side="left", padx=5)
        ctk.CTkButton(button_frame, text="Xu·∫•t Excel", fg_color="#FFCE56", hover_color="#E5B74C", command=self.export_excel).pack(side="left", padx=5)

        # Frame t·ªïng quan v·ªõi 4 √¥ th·∫ª th√¥ng tin
        overview_frame = ctk.CTkFrame(self.class_stats_tab, fg_color="transparent")
        overview_frame.pack(fill="x", padx=10, pady=10)

        # T·ªïng s·ªë l·ªõp
        total_classes_card = ctk.CTkFrame(overview_frame, fg_color=("#BBDEFB", "#64B5F6"), corner_radius=12, border_width=3, border_color="#1976D2")
        total_classes_card.pack(side="left", padx=5, pady=5, fill="x", expand=True)
        self.total_classes_label = ctk.CTkLabel(total_classes_card, text="0", font=("Helvetica", 28, "bold"), text_color="#0D47A1")
        self.total_classes_label.pack(pady=(15, 5))
        ctk.CTkLabel(total_classes_card, text="T·ªïng s·ªë l·ªõp", font=("Helvetica", 14, "bold"), text_color="#0D47A1").pack(pady=(0, 10))

        # T·ªïng s·ªë h·ªçc ph·∫ßn
        total_modules_card = ctk.CTkFrame(overview_frame, fg_color=("#C8E6C9", "#81C784"), corner_radius=12, border_width=3, border_color="#388E3C")
        total_modules_card.pack(side="left", padx=5, pady=5, fill="x", expand=True)
        self.total_modules_label = ctk.CTkLabel(total_modules_card, text="0 h·ªçc ph·∫ßn", font=("Helvetica", 28, "bold"), text_color="#1B5E20")
        self.total_modules_label.pack(pady=(15, 5))
        ctk.CTkLabel(total_modules_card, text="H·ªçc ph·∫ßn", font=("Helvetica", 14, "bold"), text_color="#1B5E20").pack(pady=(0, 10))

        # T·ªïng sinh vi√™n
        total_students_card = ctk.CTkFrame(overview_frame, fg_color=("#FFECB3", "#FFB300"), corner_radius=12, border_width=3, border_color="#F57C00")
        total_students_card.pack(side="left", padx=5, pady=5, fill="x", expand=True)
        self.total_students_label = ctk.CTkLabel(total_students_card, text="0", font=("Helvetica", 28, "bold"), text_color="#E65100")
        self.total_students_label.pack(pady=(15, 5))
        ctk.CTkLabel(total_students_card, text="T·ªïng sinh vi√™n", font=("Helvetica", 14, "bold"), text_color="#E65100").pack(pady=(0, 10))

        # Trung b√¨nh sinh vi√™n/l·ªõp
        avg_card = ctk.CTkFrame(overview_frame, fg_color=("#E1BEE7", "#BA68C8"), corner_radius=12, border_width=3, border_color="#7B1FA2")
        avg_card.pack(side="left", padx=5, pady=5, fill="x", expand=True)
        self.avg_per_class_label = ctk.CTkLabel(avg_card, text="0", font=("Helvetica", 28, "bold"), text_color="#4A148C")
        self.avg_per_class_label.pack(pady=(15, 5))
        ctk.CTkLabel(avg_card, text="TB SV/L·ªõp", font=("Helvetica", 14, "bold"), text_color="#4A148C").pack(pady=(0, 10))

        # Frame n·ªôi dung (bi·ªÉu ƒë·ªì v√† b·∫£ng)
        self.class_stats_frame = ctk.CTkFrame(self.class_stats_tab, fg_color="#FFFFFF", corner_radius=10)
        self.class_stats_frame.pack(padx=10, pady=10, fill="both", expand=True)

        # C·∫≠p nh·∫≠t d·ªØ li·ªáu m·∫∑c ƒë·ªãnh - hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
        self.update_class_stats()

    def setup_module_tab(self):
        # Header with title and add button
        header_frame = CTkFrame(self.module_tab, fg_color="transparent")
        header_frame.pack(fill="x", padx=10, pady=10)
        CTkLabel(header_frame, text="Qu·∫£n l√Ω h·ªçc ph·∫ßn", font=("Helvetica", 18, "bold"), text_color="black").pack(side="left")
        CTkButton(header_frame, text="Th√™m h·ªçc ph·∫ßn m·ªõi", fg_color="#0085FF", command=self.add_module).pack(side="right")

        # Main container
        self.module_container = CTkFrame(self.module_tab, fg_color="#FFFFFF", corner_radius=10)
        self.module_container.pack(padx=10, pady=10, fill="both", expand=True)

        # Heading row
        heading_frame = CTkFrame(self.module_container, fg_color="#D3D3D3", corner_radius=0)
        heading_frame.pack(fill="x", padx=5, pady=(5, 0))
        
        # Column headers (tƒÉng c·ª° ch·ªØ v√† chi·ªÅu r·ªông c·ªôt)
        CTkLabel(heading_frame, text="M√£ h·ªçc ph·∫ßn", font=("Helvetica", 14, "bold"), text_color="black", width=80, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="T√™n h·ªçc ph·∫ßn", font=("Helvetica", 14, "bold"), text_color="black", width=300, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="S·ªë t√≠n ch·ªâ", font=("Helvetica", 14, "bold"), text_color="black", width=100, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="H·ªá s·ªë h·ªçc ph·∫ßn", font=("Helvetica", 14, "bold"), text_color="black", width=100, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="S·ªë ti·∫øt", font=("Helvetica", 14, "bold"), text_color="black", width=100, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="Khoa", font=("Helvetica", 14, "bold"), text_color="black", width=100, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="Thao t√°c", font=("Helvetica", 14, "bold"), text_color="black", width=150, anchor="center").pack(side="left", padx=5)

        # List frame
        self.module_list_frame = CTkFrame(self.module_container, fg_color="transparent")
        self.module_list_frame.pack(fill="both", expand=True, padx=5, pady=5)

        # Load module data
        self.load_modules()

    
    def setup_class_tab(self):
        # Header with title and add button
        header_frame = CTkFrame(self.class_tab, fg_color="transparent")
        header_frame.pack(fill="x", padx=10, pady=10)
        CTkLabel(header_frame, text="Qu·∫£n l√Ω l·ªõp h·ªçc ph·∫ßn", font=("Helvetica", 18, "bold"), text_color="black").pack(side="left")
        CTkButton(header_frame, text="Th√™m l·ªõp h·ªçc ph·∫ßn", fg_color="#0085FF", command=self.add_classes).pack(side="right")

        # Filter frame (c√°c combobox l·ªçc)
        filter_frame = CTkFrame(self.class_tab, fg_color="transparent")
        filter_frame.pack(fill="x", padx=10, pady=5)

        # Filter by Semester
        semester_filter_frame = CTkFrame(filter_frame, fg_color="transparent")
        semester_filter_frame.pack(side="left", padx=(0, 10))
        CTkLabel(semester_filter_frame, text="K·ª≥ h·ªçc:", font=("Helvetica", 12), text_color="black").pack(side="left", padx=(0, 5))
        semesters = self.get_semesters()  # L·∫•y danh s√°ch semester_id t·ª´ CSDL
        self.semester_filter = CTkComboBox(semester_filter_frame, values=["T·∫•t c·∫£"] + semesters, width=150, command=lambda value: [print(f"Debug: B·∫•m v√†o 'K·ª≥ h·ªçc', gi√° tr·ªã ch·ªçn: {value}"), self.filter_classes(value)])
        self.semester_filter.pack(side="left")
        self.semester_filter.set("T·∫•t c·∫£")

        # Filter by Module
        module_filter_frame = CTkFrame(filter_frame, fg_color="transparent")
        module_filter_frame.pack(side="left", padx=(0, 10))
        CTkLabel(module_filter_frame, text="H·ªçc ph·∫ßn:", font=("Helvetica", 12), text_color="black").pack(side="left", padx=(0, 5))
        modules = [module.split(":")[1].strip() for module in self.get_modules()]  # L·∫•y danh s√°ch module_name
        self.module_filter = CTkComboBox(module_filter_frame, values=["T·∫•t c·∫£"] + modules, width=200, command=lambda value: [print(f"Debug: B·∫•m v√†o 'H·ªçc ph·∫ßn', gi√° tr·ªã ch·ªçn: {value}"), self.filter_classes(value)])
        self.module_filter.pack(side="left")
        self.module_filter.set("T·∫•t c·∫£")

        # Filter by Assignment Status
        status_filter_frame = CTkFrame(filter_frame, fg_color="transparent")
        status_filter_frame.pack(side="left", padx=(0, 10))
        CTkLabel(status_filter_frame, text="Tr·∫°ng th√°i:", font=("Helvetica", 12), text_color="black").pack(side="left", padx=(0, 5))
        self.status_filter = CTkComboBox(status_filter_frame, values=["T·∫•t c·∫£", "ƒê√£ ph√¢n c√¥ng", "Ch∆∞a ph√¢n c√¥ng"], width=150, command=lambda value: [print(f"Debug: B·∫•m v√†o 'Tr·∫°ng th√°i', gi√° tr·ªã ch·ªçn: {value}"), self.filter_classes(value)])
        self.status_filter.pack(side="left")
        self.status_filter.set("T·∫•t c·∫£")

        # Main container
        self.class_container = CTkFrame(self.class_tab, fg_color="#FFFFFF", corner_radius=10)
        self.class_container.pack(padx=10, pady=10, fill="both", expand=True)

        # Heading row
        heading_frame = CTkFrame(self.class_container, fg_color="#D3D3D3", corner_radius=0)
        heading_frame.pack(fill="x", padx=5, pady=(5, 0))
        
        # Column headers
        CTkLabel(heading_frame, text="K·ª≥ h·ªçc", font=("Helvetica", 14, "bold"), text_color="black", width=70, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="H·ªçc ph·∫ßn", font=("Helvetica", 14, "bold"), text_color="black", width=150, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="M√£ l·ªõp", font=("Helvetica", 14, "bold"), text_color="black", width=70, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="T√™n l·ªõp", font=("Helvetica", 14, "bold"), text_color="black", width=220, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="S·ªë sinh vi√™n", font=("Helvetica", 14, "bold"), text_color="black", width=100, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="S·ªë SV th·ª±c t·∫ø", font=("Helvetica", 14, "bold"), text_color="black", width=120, anchor="center").pack(side="left", padx=5)  # Th√™m c·ªôt m·ªõi
        CTkLabel(heading_frame, text="Gi·∫£ng vi√™n", font=("Helvetica", 14, "bold"), text_color="black", width=150, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="Thao t√°c", font=("Helvetica", 14, "bold"), text_color="black", width=200, anchor="center").pack(side="left", padx=5)

        # List frame (d√πng CTkScrollableFrame)
        self.class_list_frame = CTkScrollableFrame(self.class_container, fg_color="transparent")
        self.class_list_frame.pack(fill="both", expand=True, padx=5, pady=5)

        # Load class data
        self.load_classes()

    

    def setup_teacher_coefficient_tab(self):
        self.teacher_coefficient_tab.configure(fg_color="#FFFFFF")
        main_frame = CTkFrame(self.teacher_coefficient_tab, fg_color="transparent")
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)

        # Header frame
        header_frame = CTkFrame(main_frame, fg_color="transparent")
        header_frame.pack(fill="x", padx=10, pady=10)
        CTkLabel(header_frame, text="H·ªá s·ªë gi√°o vi√™n", font=("Helvetica", 18, "bold"), text_color="black").pack(side="left")
        CTkButton(header_frame, text="ƒê·∫∑t l·∫°i th√†nh m·∫∑c ƒë·ªãnh", fg_color="#0085FF", command=self.reset_to_default_coefficient_table).pack(side="right")

        # Filter frame
        filter_frame = CTkFrame(main_frame, fg_color="#FFFFFF", corner_radius=10)
        filter_frame.pack(fill="x", padx=10, pady=5)

        year_label = CTkLabel(filter_frame, text="NƒÉm h·ªçc:", font=("Helvetica", 12, "bold"))
        year_label.pack(side="left", padx=5)
        self.coefficient_year_filter = CTkComboBox(filter_frame, values=[f"{y}-{y+1}" for y in range(2020, 2030)], width=150, command=self.load_teacher_coefficients)
        self.coefficient_year_filter.pack(side="left", padx=5)
        self.coefficient_year_filter.set(f"{datetime.now().year}-{datetime.now().year + 1}")

        # List frame
        self.coefficient_list_frame = CTkFrame(main_frame, fg_color="transparent")
        self.coefficient_list_frame.pack(fill="both", expand=True, padx=10, pady=10)

        # T·∫£i d·ªØ li·ªáu hi·ªán c√≥ khi kh·ªüi t·∫°o
        self.load_teacher_coefficients()



    def setup_teaching_rate_tab(self):
    # Header
        header_frame = CTkFrame(self.teaching_rate_tab, fg_color="transparent")
        header_frame.pack(fill="x", padx=10, pady=10)
        CTkLabel(header_frame, text="ƒê·ªãnh m·ª©c ti·ªÅn theo ti·∫øt", font=("Helvetica", 18, "bold"), text_color="black").pack(side="left")
        # CTkButton(header_frame, text="Th√™m ƒë·ªãnh m·ª©c m·ªõi", fg_color="#0085FF", command=self.add_teaching_rate).pack(side="right")

        # Main container
        self.rate_container = CTkFrame(self.teaching_rate_tab, fg_color="#FFFFFF", corner_radius=10)
        self.rate_container.pack(padx=10, pady=10, fill="both", expand=True)

        # Heading
        heading_frame = CTkFrame(self.rate_container, fg_color="#D3D3D3", corner_radius=0)
        heading_frame.pack(fill="x", padx=5, pady=(5, 0))
        CTkLabel(heading_frame, text="STT", font=("Helvetica", 14, "bold"), text_color="black", width=100, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="NƒÉm h·ªçc", font=("Helvetica", 14, "bold"), text_color="black", width=150, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="S·ªë ti·ªÅn theo ti·∫øt (VNƒê)", font=("Helvetica", 14, "bold"), text_color="black", width=200, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="Ng√†y thi·∫øt l·∫≠p", font=("Helvetica", 14, "bold"), text_color="black", width=300, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="Thao t√°c", font=("Helvetica", 14, "bold"), text_color="black", width=150, anchor="center").pack(side="left", padx=5)

        # Scrollable list frame
        self.rate_list_frame = CTkScrollableFrame(self.rate_container, fg_color="transparent")
        self.rate_list_frame.pack(fill="both", expand=True, padx=5, pady=5)

        # Load all data
        self.load_teaching_rates()

    def setup_class_coefficient_tab(self):
        # Header
        header_frame = CTkFrame(self.class_coefficient_tab, fg_color="transparent")
        header_frame.pack(fill="x", padx=10, pady=10)
        CTkLabel(header_frame, text="H·ªá s·ªë l·ªõp", font=("Helvetica", 18, "bold"), text_color="black").pack(side="left")

        # Filter and Setup button
        filter_frame = CTkFrame(self.class_coefficient_tab, fg_color="transparent")
        filter_frame.pack(fill="x", padx=10, pady=5)
        CTkLabel(filter_frame, text="NƒÉm h·ªçc:", font=("Helvetica", 12), text_color="black").pack(side="left", padx=(0, 5))
        years = [f"{y}-{y+1}" for y in range(2020, 2030)]
        self.coeff_year_filter = CTkComboBox(filter_frame, values=years, width=150, command=self.load_class_coefficients)
        self.coeff_year_filter.pack(side="left", padx=5)
        CTkButton(filter_frame, text="Thi·∫øt l·∫≠p", fg_color="#0085FF", command=self.setup_standard_range).pack(side="left", padx=5)

        # Main container
        self.coeff_container = CTkFrame(self.class_coefficient_tab, fg_color="#FFFFFF", corner_radius=10)
        self.coeff_container.pack(padx=10, pady=10, fill="both", expand=True)

        # Heading
        heading_frame = CTkFrame(self.coeff_container, fg_color="#D3D3D3", corner_radius=0)
        heading_frame.pack(fill="x", padx=5, pady=(5, 0))
        CTkLabel(heading_frame, text="STT", font=("Helvetica", 14, "bold"), text_color="black", width=160, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="Kho·∫£ng s·ªë sinh vi√™n", font=("Helvetica", 14, "bold"), text_color="black", width=400, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="H·ªá s·ªë", font=("Helvetica", 14, "bold"), text_color="black", width=250, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="Ghi ch√∫", font=("Helvetica", 14, "bold"), text_color="black", width=200, anchor="center").pack(side="left", padx=5)

        # Scrollable list frame
        self.coeff_list_frame = CTkScrollableFrame(self.coeff_container, fg_color="transparent")
        self.coeff_list_frame.pack(fill="both", expand=True, padx=5, pady=5)

        # Load data
        self.load_class_coefficients()

    def setup_salary_calc_tab(self):
        self.salary_calc_tab.configure(fg_color="#FFFFFF")
        main_frame = CTkFrame(self.salary_calc_tab, fg_color="transparent")
        main_frame.grid(row=0, column=0, sticky="nsew")
        self.salary_calc_tab.grid_rowconfigure(0, weight=1)
        self.salary_calc_tab.grid_columnconfigure(0, weight=1)

        header_frame = CTkFrame(main_frame, fg_color="transparent")
        header_frame.grid(row=0, column=0, columnspan=2, sticky="ew", padx=10, pady=10)
        CTkLabel(header_frame, text="T√≠nh ti·ªÅn d·∫°y", font=("Helvetica", 18, "bold"), text_color="black").grid(row=0, column=0, sticky="w")

        filter_frame = CTkFrame(main_frame, fg_color="#FFFFFF", corner_radius=10)
        filter_frame.grid(row=1, column=0, columnspan=2, sticky="ew", padx=10, pady=5)

        years = self.get_academic_years_with_semesters()
        year_label = CTkLabel(filter_frame, text="NƒÉm h·ªçc:", font=("Helvetica", 12, "bold"))
        year_label.grid(row=0, column=0, padx=5, pady=5, sticky="w")
        self.year_filter = CTkComboBox(filter_frame, values=["Ch·ªçn nƒÉm h·ªçc"] + years, width=150, command=self.update_semester_options)
        self.year_filter.grid(row=0, column=1, padx=5, pady=5, sticky="w")
        self.year_filter.set("Ch·ªçn nƒÉm h·ªçc")

        semester_label = CTkLabel(filter_frame, text="K·ª≥ h·ªçc:", font=("Helvetica", 12, "bold"))
        semester_label.grid(row=0, column=2, padx=5, pady=5, sticky="w")
        self.semester_filter = CTkComboBox(filter_frame, values=["Ch·ªçn k·ª≥ h·ªçc", "K·ª≥ 1", "K·ª≥ 2", "K·ª≥ 3"], width=150)
        self.semester_filter.grid(row=0, column=3, padx=5, pady=5, sticky="w")
        self.semester_filter.set("Ch·ªçn k·ª≥ h·ªçc")

        depts = self.get_dept_names()
        dept_label = CTkLabel(filter_frame, text="Khoa:", font=("Helvetica", 12, "bold"))
        dept_label.grid(row=0, column=4, padx=5, pady=5, sticky="w")
        self.dept_filter = CTkComboBox(filter_frame, values=["Ch·ªçn khoa"] + ["T·∫•t c·∫£ khoa"] + depts, width=150, command=self.update_teacher_options)
        self.dept_filter.grid(row=0, column=5, padx=5, pady=5, sticky="w")
        self.dept_filter.set("Ch·ªçn khoa")

        teacher_label = CTkLabel(filter_frame, text="Gi·∫£ng vi√™n:", font=("Helvetica", 12, "bold"))
        teacher_label.grid(row=0, column=6, padx=5, pady=5, sticky="w")
        self.teacher_filter = CTkComboBox(filter_frame, values=["Ch·ªçn gi·∫£ng vi√™n"], width=200)
        self.teacher_filter.grid(row=0, column=7, padx=5, pady=5, sticky="w")
        self.teacher_filter.set("Ch·ªçn gi·∫£ng vi√™n")

        calc_button = CTkButton(filter_frame, text="T√≠nh ti·ªÅn d·∫°y", fg_color="#0085FF", width=80, command=self.calculate_salary_display)
        calc_button.grid(row=0, column=8, padx=5, pady=5, sticky="w")
        
        reset_button = CTkButton(filter_frame, text="Reset", fg_color="#6C757D", width=40, command=self.reset_salary_calc)
        reset_button.grid(row=0, column=9, padx=5, pady=5, sticky="w")

        content_frame = CTkFrame(main_frame, fg_color="transparent")
        content_frame.grid(row=2, column=0, columnspan=2, sticky="nsew")
        main_frame.grid_rowconfigure(2, weight=1)
        main_frame.grid_columnconfigure(0, weight=1)

        # Frame th√¥ng tin gi√°o vi√™n - TƒÉng height l√™n 200 
        teacher_info_frame = CTkFrame(content_frame, fg_color="#cce7ff", corner_radius=10, height=250)
        teacher_info_frame.grid(row=0, column=0, padx=5, pady=5, sticky="nsew")
        teacher_info_frame.grid_propagate(False)
        content_frame.grid_columnconfigure(0, weight=1, uniform="group1")
        content_frame.grid_rowconfigure(0, weight=0)

        CTkLabel(teacher_info_frame, text="TH√îNG TIN GI·∫¢NG VI√äN", 
                font=("Helvetica", 16, "bold"), text_color="#0D47A1").grid(row=0, column=0, 
                columnspan=2, padx=20, pady=(15,10), sticky="w")

        self.salary_calc_teacher_name_title = CTkLabel(teacher_info_frame, text="H·ªç v√† t√™n:", 
                                                    font=("Helvetica", 14))
        self.salary_calc_teacher_name_title.grid(row=1, column=0, padx=20, pady=5, sticky="w")
        self.salary_calc_teacher_name_value = CTkLabel(teacher_info_frame, text="", 
                                                    font=("Helvetica", 14), wraplength=200)
        self.salary_calc_teacher_name_value.grid(row=1, column=1, padx=5, pady=5, sticky="w")

        self.salary_calc_teacher_id_title = CTkLabel(teacher_info_frame, text="M√£ gi·∫£ng vi√™n:", 
                                                    font=("Helvetica", 14))
        self.salary_calc_teacher_id_title.grid(row=2, column=0, padx=20, pady=5, sticky="w")
        self.salary_calc_teacher_id_value = CTkLabel(teacher_info_frame, text="", 
                                                    font=("Helvetica", 14), wraplength=200)
        self.salary_calc_teacher_id_value.grid(row=2, column=1, padx=5, pady=5, sticky="w")

        self.salary_calc_degree_title = CTkLabel(teacher_info_frame, text="H·ªçc v·ªã:", 
                                                font=("Helvetica", 14))
        self.salary_calc_degree_title.grid(row=3, column=0, padx=20, pady=5, sticky="w")
        self.salary_calc_degree_value = CTkLabel(teacher_info_frame, text="", 
                                                font=("Helvetica", 14), wraplength=200)
        self.salary_calc_degree_value.grid(row=3, column=1, padx=5, pady=5, sticky="w")

        self.salary_calc_dept_title = CTkLabel(teacher_info_frame, text="Khoa/B·ªô m√¥n:", 
                                            font=("Helvetica", 14))
        self.salary_calc_dept_title.grid(row=4, column=0, padx=20, pady=5, sticky="w")
        self.salary_calc_dept_value = CTkLabel(teacher_info_frame, text="", 
                                            font=("Helvetica", 14), wraplength=200)
        self.salary_calc_dept_value.grid(row=4, column=1, padx=5, pady=5, sticky="w")

        # Frame th√¥ng tin thanh to√°n - TƒÉng height l√™n 200
        calc_info_frame = CTkFrame(content_frame, fg_color="#cce7ff", corner_radius=10, height=250)
        calc_info_frame.grid(row=0, column=1, padx=5, pady=5, sticky="nsew")
        calc_info_frame.grid_propagate(False)
        content_frame.grid_columnconfigure(1, weight=1, uniform="group1")
        content_frame.grid_rowconfigure(0, weight=0)

        CTkLabel(calc_info_frame, text="TH√îNG TIN THANH TO√ÅN", 
                font=("Helvetica", 16, "bold"), text_color="#0D47A1").grid(row=0, column=0, 
                columnspan=2, padx=20, pady=(15,10), sticky="w")

        self.salary_calc_teacher_coeff_title = CTkLabel(calc_info_frame, text="H·ªá s·ªë gi√°o vi√™n:", 
                                                    font=("Helvetica", 14))
        self.salary_calc_teacher_coeff_title.grid(row=1, column=0, padx=20, pady=5, sticky="w")
        self.salary_calc_teacher_coeff_value = CTkLabel(calc_info_frame, text="", 
                                                    font=("Helvetica", 14), wraplength=200)
        self.salary_calc_teacher_coeff_value.grid(row=1, column=1, padx=5, pady=5, sticky="w")

        self.salary_calc_rate_title = CTkLabel(calc_info_frame, text="Ti·ªÅn d·∫°y m·ªôt ti·∫øt:", 
                                            font=("Helvetica", 14))
        self.salary_calc_rate_title.grid(row=2, column=0, padx=20, pady=5, sticky="w")
        self.salary_calc_rate_value = CTkLabel(calc_info_frame, text="", 
                                            font=("Helvetica", 14), wraplength=200)
        self.salary_calc_rate_value.grid(row=2, column=1, padx=5, pady=5, sticky="w")

        self.salary_calc_period_title = CTkLabel(calc_info_frame, text="K·ª≥/NƒÉm h·ªçc:", 
                                                font=("Helvetica", 14))
        self.salary_calc_period_title.grid(row=3, column=0, padx=20, pady=5, sticky="w")
        self.salary_calc_period_value = CTkLabel(calc_info_frame, text="", 
                                                font=("Helvetica", 14), wraplength=200)
        self.salary_calc_period_value.grid(row=3, column=1, padx=5, pady=5, sticky="w")

        # Frame cho b·∫£ng t√≠nh l∆∞∆°ng 
        self.salary_table_frame = CTkScrollableFrame(main_frame, fg_color="#FFFFFF", corner_radius=10, height=400)
        self.salary_table_frame.grid(row=3, column=0, columnspan=2, padx=5, pady=5, sticky="nsew")
        main_frame.grid_rowconfigure(3, weight=2)

        self.save_button = None

    def switch_tab(self, tab_name):
        print(f"Debug: Chuy·ªÉn sang tab {tab_name}")
        # ·∫®n tab hi·ªán t·∫°i
        if self.current_tab:
            self.current_tab.pack_forget()
        
        tab_mapping = {
            "B·∫±ng c·∫•p": self.degree_tab,
            "Khoa": self.dept_tab,
            "Gi√°o vi√™n": self.teacher_tab,
            "H·ªçc ph·∫ßn": self.module_tab,
            "K·ª≥ h·ªçc": self.semester_tab,
            "L·ªõp h·ªçc": self.class_tab,
            "Th·ªëng k√™ gi√°o vi√™n": self.stats_tab,
            "Th·ªëng k√™ l·ªõp": self.class_stats_tab,
            "ƒê·ªãnh m·ª©c ti·ªÅn theo ti·∫øt": self.teaching_rate_tab,
            "H·ªá s·ªë gi√°o vi√™n": self.teacher_coefficient_tab,
            "H·ªá s·ªë l·ªõp": self.class_coefficient_tab,
            "T√≠nh ti·ªÅn d·∫°y": self.salary_calc_tab,
            "B√°o c√°o": self.report_tab,
            "Ph√¢n c√¥ng": self.assignment_tab
        }
        
        self.current_tab = tab_mapping.get(tab_name)
        if self.current_tab:
            if tab_name == "T√≠nh ti·ªÅn d·∫°y":
                # Ki·ªÉm tra xem widget c√≥ t·ªìn t·∫°i kh√¥ng
                if not hasattr(self, 'salary_calc_teacher_coeff_value') or self.salary_calc_teacher_coeff_value is None:
                    print("Debug: T√°i t·∫°o tab T√≠nh ti·ªÅn d·∫°y")
                    for widget in self.current_tab.winfo_children():
                        widget.destroy()
                    self.setup_salary_calc_tab()
            self.current_tab.pack(fill="both", expand=True)
        else:
            messagebox.showerror("L·ªói", f"Tab {tab_name} kh√¥ng t·ªìn t·∫°i!")

    def get_departments(self):
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            cursor.execute("SELECT dept_id, dept_name FROM departments")
            depts = [f"{row[0]}: {row[1]}" for row in cursor.fetchall()]
            return depts if depts else ["Kh√¥ng c√≥ khoa"]
        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i danh s√°ch khoa: {e}")
            return ["L·ªói t·∫£i khoa"]
        finally:
            cursor.close()
            conn.close()

    def get_degrees(self):
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            cursor.execute("SELECT degree_id, degree_name FROM degrees")
            degrees = [f"{row[0]}: {row[1]}" for row in cursor.fetchall()]
            return degrees if degrees else ["Kh√¥ng c√≥ b·∫±ng c·∫•p"]
        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i danh s√°ch b·∫±ng c·∫•p: {e}")
            return ["L·ªói t·∫£i b·∫±ng c·∫•p"]
        finally:
            cursor.close()
            conn.close()

    def get_teachers(self):
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            cursor.execute("SELECT teacher_id, full_name FROM teachers")
            teachers = [f"{row[0]}: {row[1]}" for row in cursor.fetchall()]
            if not teachers:
                messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ gi√°o vi√™n n√†o trong h·ªá th·ªëng!")
                return ["Kh√¥ng c√≥ gi√°o vi√™n"]
            return teachers
        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i danh s√°ch gi√°o vi√™n: {e}")
            return ["L·ªói t·∫£i gi√°o vi√™n"]
        finally:
            cursor.close()
            conn.close()

    def get_modules(self):
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            cursor.execute("SELECT module_id, module_name FROM course_modules ORDER BY module_id")
            modules = [f"{row[0]}: {row[1]}" for row in cursor.fetchall()]
            return modules
        except mysql.connector.Error:
            return []
        finally:
            cursor.close()
            conn.close()

    def filter_classes(self, value=None):
        print(f"Debug: filter_classes ƒë∆∞·ª£c g·ªçi v·ªõi gi√° tr·ªã: {value}")
        # Clear existing items in class_list_frame
        for widget in self.class_list_frame.winfo_children():
            widget.destroy()

        # C·∫≠p nh·∫≠t gi√° tr·ªã combobox t∆∞∆°ng ·ª©ng
        if value == "T·∫•t c·∫£":
            self.semester_filter.set("T·∫•t c·∫£")
            self.module_filter.set("T·∫•t c·∫£")
            self.status_filter.set("T·∫•t c·∫£")
        elif value in self.get_semesters():  # N·∫øu value l√† semester_id
            self.semester_filter.set(value)
        elif value in [m.split(":")[1].strip() for m in self.get_modules()]:  # N·∫øu value l√† module_name
            self.module_filter.set(value)
        elif value in ["ƒê√£ ph√¢n c√¥ng", "Ch∆∞a ph√¢n c√¥ng"]:  # N·∫øu value l√† tr·∫°ng th√°i
            self.status_filter.set(value)

        self.load_classes()

    import random

    def add_degree(self):
        add_window = CTkToplevel(self.window)
        add_window.title("Th√™m b·∫±ng c·∫•p")
        add_window.resizable(False, False)

        # Set window size and center
        window_width = 450
        window_height = 250
        screen_width = self.window.winfo_screenwidth()
        screen_height = self.window.winfo_screenheight()
        x_position = int((screen_width - window_width) / 2)
        y_position = int((screen_height - window_height) / 2)
        add_window.geometry(f"{window_width}x{window_height}+{x_position}+{y_position}")

        # Make window modal
        add_window.transient(self.window)
        add_window.grab_set()

        # Form frame
        form_frame = CTkFrame(add_window, fg_color="#F0F0F0", corner_radius=10)
        form_frame.pack(padx=20, pady=10, fill="both", expand=True)

        # Title
        CTkLabel(form_frame, text="Th√™m b·∫±ng c·∫•p", font=("Helvetica", 16, "bold"), text_color="black").pack(pady=5)

        # Frame for Degree Name
        name_frame = CTkFrame(form_frame, fg_color="transparent")
        name_frame.pack(fill="x", pady=2)
        CTkLabel(name_frame, text="T√™n b·∫±ng c·∫•p:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
        degree_name_entry = CTkEntry(name_frame, width=260, placeholder_text="VD: C·ª≠ nh√¢n CNTT")
        degree_name_entry.pack(side="left")

        # Frame for Abbreviation
        abbr_frame = CTkFrame(form_frame, fg_color="transparent")
        abbr_frame.pack(fill="x", pady=2)
        CTkLabel(abbr_frame, text="T√™n vi·∫øt t·∫Øt:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
        degree_abbr_entry = CTkEntry(abbr_frame, width=260, placeholder_text="VD: CN (‚â§5 k√Ω t·ª±)")
        degree_abbr_entry.pack(side="left")

        # Frame for Coefficient
        coeff_frame = CTkFrame(form_frame, fg_color="transparent")
        coeff_frame.pack(fill="x", pady=2)
        CTkLabel(coeff_frame, text="H·ªá s·ªë:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
        degree_coeff_entry = CTkEntry(coeff_frame, width=260, placeholder_text="VD: 1.5")
        degree_coeff_entry.pack(side="left")

        # Buttons
        button_frame = CTkFrame(form_frame, fg_color="transparent")
        button_frame.pack(pady=10)
        CTkButton(button_frame, text="L∆∞u", fg_color="#0085FF", width=100).pack(side="left", padx=5)
        CTkButton(button_frame, text="H·ªßy", fg_color="#6C757D", width=100, command=add_window.destroy).pack(side="left", padx=5)

        def save_degree():
            degree_name = degree_name_entry.get().strip()
            degree_abbr = degree_abbr_entry.get().strip()
            degree_coeff = degree_coeff_entry.get().strip()

            if not all([degree_name, degree_abbr, degree_coeff]):
                messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!")
                return

            if not degree_coeff.replace('.', '', 1).isdigit() or float(degree_coeff) <= 0:
                messagebox.showerror("L·ªói", "H·ªá s·ªë ph·∫£i l√† s·ªë d∆∞∆°ng!")
                return

            if len(degree_abbr) > 5:
                messagebox.showerror("L·ªói", "T√™n vi·∫øt t·∫Øt kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 5 k√Ω t·ª±!")
                return

            try:
                conn = mysql.connector.connect(**DB_CONFIG)
                cursor = conn.cursor()
                # Ki·ªÉm tra tr√πng t√™n v√† t√™n vi·∫øt t·∫Øt
                cursor.execute("SELECT degree_id FROM degrees WHERE degree_name = %s OR degree_abbr = %s", (degree_name, degree_abbr))
                if cursor.fetchone():
                    messagebox.showerror("L·ªói", "T√™n b·∫±ng c·∫•p ho·∫∑c t√™n vi·∫øt t·∫Øt ƒë√£ t·ªìn t·∫°i!")
                    return

                # T·ª± ƒë·ªông t·∫°o m√£ b·∫±ng c·∫•p (DEGxxxxx v·ªõi 5 s·ªë ng·∫´u nhi√™n)
                while True:
                    random_num = random.randint(0, 99999)
                    degree_id = f"DEG{str(random_num).zfill(5)}"
                    cursor.execute("SELECT degree_id FROM degrees WHERE degree_id = %s", (degree_id,))
                    if not cursor.fetchone():
                        break

                cursor.execute("""
                    INSERT INTO degrees (degree_id, degree_name, degree_abbr, coefficient)
                    VALUES (%s, %s, %s, %s)
                """, (degree_id, degree_name, degree_abbr, float(degree_coeff)))
                conn.commit()
                messagebox.showinfo("Th√†nh c√¥ng", f"Th√™m b·∫±ng c·∫•p {degree_name} v·ªõi m√£ {degree_id} th√†nh c√¥ng!")
                self.load_degrees()
                add_window.destroy()
            except mysql.connector.Error as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ th√™m b·∫±ng c·∫•p: {e}")
            finally:
                cursor.close()
                conn.close()

        # Bind save function to "L∆∞u" button
        button_frame.winfo_children()[0].configure(command=save_degree)

    def edit_degree(self, degree_id):
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            cursor.execute("""
                SELECT degree_id, degree_name, degree_abbr, coefficient
                FROM degrees
                WHERE degree_id = %s
            """, (degree_id,))
            degree_data = cursor.fetchone()
            if not degree_data:
                messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y b·∫±ng c·∫•p!")
                return

            degree_id, degree_name, degree_abbr, coefficient = degree_data

            # Create popup window
            edit_window = CTkToplevel(self.window)
            edit_window.title("S·ª≠a b·∫±ng c·∫•p")
            edit_window.resizable(False, False)

            # Set window size and center
            window_width = 450
            window_height = 250
            screen_width = self.window.winfo_screenwidth()
            screen_height = self.window.winfo_screenheight()
            x_position = int((screen_width - window_width) / 2)
            y_position = int((screen_height - window_height) / 2)
            edit_window.geometry(f"{window_width}x{window_height}+{x_position}+{y_position}")

            # Make window modal
            edit_window.transient(self.window)
            edit_window.grab_set()

            # Form frame
            form_frame = CTkFrame(edit_window, fg_color="#F0F0F0", corner_radius=10)
            form_frame.pack(padx=20, pady=10, fill="both", expand=True)

            # Title
            CTkLabel(form_frame, text="S·ª≠a b·∫±ng c·∫•p", font=("Helvetica", 16, "bold"), text_color="black").pack(pady=5)

            # Frame for Degree ID (display only, not editable)
            id_frame = CTkFrame(form_frame, fg_color="transparent")
            id_frame.pack(fill="x", pady=2)
            CTkLabel(id_frame, text="M√£ b·∫±ng c·∫•p:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
            degree_id_label = CTkLabel(id_frame, text=degree_id, width=260, anchor="w")
            degree_id_label.pack(side="left")

            # Frame for Degree Name
            name_frame = CTkFrame(form_frame, fg_color="transparent")
            name_frame.pack(fill="x", pady=2)
            CTkLabel(name_frame, text="T√™n b·∫±ng c·∫•p:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
            degree_name_entry = CTkEntry(name_frame, width=260, placeholder_text="VD: C·ª≠ nh√¢n CNTT")
            degree_name_entry.insert(0, degree_name)
            degree_name_entry.pack(side="left")

            # Frame for Abbreviation
            abbr_frame = CTkFrame(form_frame, fg_color="transparent")
            abbr_frame.pack(fill="x", pady=2)
            CTkLabel(abbr_frame, text="T√™n vi·∫øt t·∫Øt:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
            degree_abbr_entry = CTkEntry(abbr_frame, width=260, placeholder_text="VD: CN (‚â§5 k√Ω t·ª±)")
            degree_abbr_entry.insert(0, degree_abbr)
            degree_abbr_entry.pack(side="left")

            # Frame for Coefficient
            coeff_frame = CTkFrame(form_frame, fg_color="transparent")
            coeff_frame.pack(fill="x", pady=2)
            CTkLabel(coeff_frame, text="H·ªá s·ªë:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
            degree_coeff_entry = CTkEntry(coeff_frame, width=260, placeholder_text="VD: 1.5")
            degree_coeff_entry.insert(0, str(coefficient))
            degree_coeff_entry.pack(side="left")

            # Buttons
            button_frame = CTkFrame(form_frame, fg_color="transparent")
            button_frame.pack(pady=10)
            CTkButton(button_frame, text="L∆∞u", fg_color="#0085FF", width=100).pack(side="left", padx=5)
            CTkButton(button_frame, text="H·ªßy", fg_color="#6C757D", width=100, command=edit_window.destroy).pack(side="left", padx=5)

            def save_degree():
                new_degree_name = degree_name_entry.get().strip()
                new_degree_abbr = degree_abbr_entry.get().strip()
                new_degree_coeff = degree_coeff_entry.get().strip()

                if not all([new_degree_name, new_degree_abbr, new_degree_coeff]):
                    messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!")
                    return

                if not new_degree_coeff.replace('.', '', 1).isdigit() or float(new_degree_coeff) <= 0:
                    messagebox.showerror("L·ªói", "H·ªá s·ªë ph·∫£i l√† s·ªë d∆∞∆°ng!")
                    return

                if len(new_degree_abbr) > 5:
                    messagebox.showerror("L·ªói", "T√™n vi·∫øt t·∫Øt kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 5 k√Ω t·ª±!")
                    return

                try:
                    conn = mysql.connector.connect(**DB_CONFIG)
                    cursor = conn.cursor()
                    # Ki·ªÉm tra tr√πng t√™n v√† t√™n vi·∫øt t·∫Øt (ngo·∫°i tr·ª´ b·∫£n ghi hi·ªán t·∫°i)
                    cursor.execute("""
                        SELECT degree_id FROM degrees
                        WHERE (degree_name = %s OR degree_abbr = %s) AND degree_id != %s
                    """, (new_degree_name, new_degree_abbr, degree_id))
                    if cursor.fetchone():
                        messagebox.showerror("L·ªói", "T√™n b·∫±ng c·∫•p ho·∫∑c t√™n vi·∫øt t·∫Øt ƒë√£ t·ªìn t·∫°i!")
                        return

                    cursor.execute("""
                        UPDATE degrees
                        SET degree_name = %s, degree_abbr = %s, coefficient = %s
                        WHERE degree_id = %s
                    """, (new_degree_name, new_degree_abbr, float(new_degree_coeff), degree_id))
                    conn.commit()
                    messagebox.showinfo("Th√†nh c√¥ng", f"C·∫≠p nh·∫≠t b·∫±ng c·∫•p {new_degree_name} th√†nh c√¥ng!")
                    self.load_degrees()
                    edit_window.destroy()
                except mysql.connector.Error as e:
                    messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t b·∫±ng c·∫•p: {e}")
                finally:
                    cursor.close()
                    conn.close()

            # Bind save function to "L∆∞u" button
            button_frame.winfo_children()[0].configure(command=save_degree)

        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu b·∫±ng c·∫•p: {e}")
        finally:
            if cursor:
                cursor.close()
            if conn:
                conn.close()


    def delete_degree(self, degree_id):
        conn = None
        cursor = None
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()

            # Ki·ªÉm tra li√™n quan ƒë·∫øn gi√°o vi√™n
            cursor.execute("SELECT 1 FROM teachers WHERE degree_id = %s LIMIT 1", (degree_id,))
            if cursor.fetchone():
                messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ x√≥a b·∫±ng c·∫•p v√¨ c√≥ gi√°o vi√™n ƒëang s·ª≠ d·ª•ng!", parent=self.window)
                return

            # X√°c nh·∫≠n x√≥a
            if messagebox.askyesno("X√°c nh·∫≠n", f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a b·∫±ng c·∫•p {degree_id}?", parent=self.window):
                cursor.execute("DELETE FROM degrees WHERE degree_id = %s", (degree_id,))
                conn.commit()
                messagebox.showinfo("Th√†nh c√¥ng", f"X√≥a b·∫±ng c·∫•p {degree_id} th√†nh c√¥ng", parent=self.window)
                self.load_degrees()
        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ x√≥a b·∫±ng c·∫•p: {e}", parent=self.window)
        finally:
            if cursor:
                cursor.close()
            if conn:
                conn.close()

    def load_degrees(self):
        # X√≥a c√°c widget c≈© trong frame
        for widget in self.degree_list_frame.winfo_children():
            widget.destroy()

        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            cursor.execute("SELECT degree_id, degree_name, degree_abbr FROM degrees")
            rows = cursor.fetchall()
            if not rows:
                CTkLabel(self.degree_list_frame, text="Kh√¥ng c√≥ d·ªØ li·ªáu b·∫±ng c·∫•p", font=("Helvetica", 14), text_color="gray").pack(pady=20, expand=True)
            else:
                for row in rows:
                    degree_id, name, abbr = row
                    # T·∫°o frame cho t·ª´ng d√≤ng
                    degree_row_frame = CTkFrame(self.degree_list_frame, fg_color="#F0F0F0", corner_radius=5)
                    degree_row_frame.pack(fill="x", padx=0, pady=2)

                    # Thay idx b·∫±ng degree_id
                    CTkLabel(degree_row_frame, text=degree_id, font=("Helvetica", 12), text_color="black", width=160, anchor="center").pack(side="left", padx=5)
                    CTkLabel(degree_row_frame, text=name, font=("Helvetica", 12), text_color="black", width=400, anchor="center").pack(side="left", padx=5)
                    CTkLabel(degree_row_frame, text=abbr, font=("Helvetica", 12), text_color="black", width=250, anchor="center").pack(side="left", padx=5)

                    # Frame ch·ª©a c√°c n√∫t S·ª≠a/X√≥a
                    button_frame = CTkFrame(degree_row_frame, fg_color="transparent", width=200)
                    button_frame.pack(side="left", padx=35)
                    CTkButton(button_frame, text="S·ª≠a", fg_color="#FFC107", width=60, command=lambda d_id=degree_id: self.edit_degree(d_id)).pack(side="left", padx=2)
                    CTkButton(button_frame, text="X√≥a", fg_color="#F44336", width=60, command=lambda d_id=degree_id: self.delete_degree(d_id)).pack(side="left", padx=2)
        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu b·∫±ng c·∫•p: {e}")
        finally:
            cursor.close()
            conn.close()

    def on_degree_select(self, event):
        # X√°c ƒë·ªãnh v√πng click
        region = self.degree_tree.identify_region(event.x, event.y)
        if region != "cell":
            return

        # X√°c ƒë·ªãnh d√≤ng ƒë∆∞·ª£c ch·ªçn
        selected_item = self.degree_tree.selection()
        if not selected_item:
            return

        # L·∫•y th√¥ng tin d√≤ng
        item = self.degree_tree.item(selected_item)
        degree_id = self.degree_tree.item(selected_item, "tags")[0]  # L·∫•y degree_id t·ª´ tags

        # X√°c ƒë·ªãnh c·ªôt ƒë∆∞·ª£c click
        column = self.degree_tree.identify_column(event.x)
        if column == "#5":  # C·ªôt "Thao t√°c" (c·ªôt th·ª© 5)
            # X√°c ƒë·ªãnh v·ªã tr√≠ ch√≠nh x√°c trong c·ªôt
            x_relative = event.x - self.degree_tree.winfo_rootx() - self.degree_tree.column("#5")["width"] * 4  # ƒêi·ªÅu ch·ªânh v·ªã tr√≠ x
            if 0 <= x_relative <= 40:  # V√πng "S·ª≠a"
                self.edit_degree(degree_id)
            elif 40 < x_relative <= 80:  # V√πng "X√≥a"
                self.delete_degree(degree_id)

    def reset_degree_fields(self):
        self.degree_name.delete(0, END)
        self.degree_name.configure(placeholder_text="T√™n b·∫±ng c·∫•p")
        self.degree_abbr.delete(0, END)
        self.degree_abbr.configure(placeholder_text="T√™n vi·∫øt t·∫Øt")
        self.degree_coeff.delete(0, END)
        self.degree_coeff.configure(placeholder_text="H·ªá s·ªë (v√≠ d·ª•: 1.5)")
        # B·ªè ch·ªçn d√≤ng trong b·∫£ng degree_tree
        for item in self.degree_tree.selection():
            self.degree_tree.selection_remove(item)

    def add_dept(self):
        add_window = CTkToplevel(self.window)
        add_window.title("Th√™m khoa")
        add_window.resizable(False, False)

        # Set window size and center
        window_width = 450
        window_height = 250
        screen_width = self.window.winfo_screenwidth()
        screen_height = self.window.winfo_screenheight()
        x_position = int((screen_width - window_width) / 2)
        y_position = int((screen_height - window_height) / 2)
        add_window.geometry(f"{window_width}x{window_height}+{x_position}+{y_position}")

        # Make window modal
        add_window.transient(self.window)
        add_window.grab_set()

        # Form frame
        form_frame = CTkFrame(add_window, fg_color="#F0F0F0", corner_radius=10)
        form_frame.pack(padx=20, pady=10, fill="both", expand=True)

        # Title
        CTkLabel(form_frame, text="Th√™m khoa", font=("Helvetica", 16, "bold"), text_color="black").pack(pady=5)

        # Frame for Dept Name
        name_frame = CTkFrame(form_frame, fg_color="transparent")
        name_frame.pack(fill="x", pady=2)
        CTkLabel(name_frame, text="T√™n khoa:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
        dept_name_entry = CTkEntry(name_frame, width=260, placeholder_text="VD: C√¥ng ngh·ªá th√¥ng tin")
        dept_name_entry.pack(side="left")

        # Frame for Abbreviation
        abbr_frame = CTkFrame(form_frame, fg_color="transparent")
        abbr_frame.pack(fill="x", pady=2)
        CTkLabel(abbr_frame, text="T√™n vi·∫øt t·∫Øt:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
        dept_abbr_entry = CTkEntry(abbr_frame, width=260, placeholder_text="VD: CNTT (‚â§5 k√Ω t·ª±)")
        dept_abbr_entry.pack(side="left")

        # Frame for Description
        desc_frame = CTkFrame(form_frame, fg_color="transparent")
        desc_frame.pack(fill="x", pady=2)
        CTkLabel(desc_frame, text="M√¥ t·∫£ nhi·ªám v·ª•:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
        dept_desc_entry = CTkEntry(desc_frame, width=260, placeholder_text="VD: Qu·∫£n l√Ω CNTT")
        dept_desc_entry.pack(side="left")

        # Buttons
        button_frame = CTkFrame(form_frame, fg_color="transparent")
        button_frame.pack(pady=10)
        CTkButton(button_frame, text="L∆∞u", fg_color="#0085FF", width=100).pack(side="left", padx=5)
        CTkButton(button_frame, text="H·ªßy", fg_color="#6C757D", width=100, command=add_window.destroy).pack(side="left", padx=5)

        def save_dept():
            dept_name = dept_name_entry.get().strip()
            dept_abbr = dept_abbr_entry.get().strip()
            dept_desc = dept_desc_entry.get().strip()

            if not all([dept_name, dept_abbr, dept_desc]):
                messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!")
                return

            if len(dept_abbr) > 5:
                messagebox.showerror("L·ªói", "T√™n vi·∫øt t·∫Øt kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 5 k√Ω t·ª±!")
                return

            try:
                conn = mysql.connector.connect(**DB_CONFIG)
                cursor = conn.cursor()
                # Ki·ªÉm tra tr√πng t√™n v√† t√™n vi·∫øt t·∫Øt
                cursor.execute("SELECT dept_id FROM departments WHERE dept_name = %s OR dept_abbr = %s", (dept_name, dept_abbr))
                if cursor.fetchone():
                    messagebox.showerror("L·ªói", "T√™n khoa ho·∫∑c t√™n vi·∫øt t·∫Øt ƒë√£ t·ªìn t·∫°i!")
                    return

                # T·ª± ƒë·ªông t·∫°o m√£ khoa (DEPTxxxx v·ªõi 4 s·ªë ng·∫´u nhi√™n)
                while True:
                    random_num = random.randint(0, 9999)
                    dept_id = f"DEPT{str(random_num).zfill(4)}"
                    cursor.execute("SELECT dept_id FROM departments WHERE dept_id = %s", (dept_id,))
                    if not cursor.fetchone():
                        break

                cursor.execute("""
                    INSERT INTO departments (dept_id, dept_name, dept_abbr, description)
                    VALUES (%s, %s, %s, %s)
                """, (dept_id, dept_name, dept_abbr, dept_desc))
                conn.commit()
                messagebox.showinfo("Th√†nh c√¥ng", f"Th√™m khoa {dept_name} v·ªõi m√£ {dept_id} th√†nh c√¥ng!")
                self.load_depts()
                add_window.destroy()
            except mysql.connector.Error as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ th√™m khoa: {e}")
            finally:
                cursor.close()
                conn.close()

        # Bind save function to "L∆∞u" button
        button_frame.winfo_children()[0].configure(command=save_dept)

    def edit_dept(self, dept_id):
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            cursor.execute("""
                SELECT dept_id, dept_name, dept_abbr, description
                FROM departments
                WHERE dept_id = %s
            """, (dept_id,))
            dept_data = cursor.fetchone()
            if not dept_data:
                messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y khoa!")
                return

            dept_id, dept_name, dept_abbr, description = dept_data

            # Create popup window
            edit_window = CTkToplevel(self.window)
            edit_window.title("S·ª≠a khoa")
            edit_window.resizable(False, False)

            # Set window size and center
            window_width = 450
            window_height = 250
            screen_width = self.window.winfo_screenwidth()
            screen_height = self.window.winfo_screenheight()
            x_position = int((screen_width - window_width) / 2)
            y_position = int((screen_height - window_height) / 2)
            edit_window.geometry(f"{window_width}x{window_height}+{x_position}+{y_position}")

            # Make window modal
            edit_window.transient(self.window)
            edit_window.grab_set()

            # Form frame
            form_frame = CTkFrame(edit_window, fg_color="#F0F0F0", corner_radius=10)
            form_frame.pack(padx=20, pady=10, fill="both", expand=True)

            # Title
            CTkLabel(form_frame, text="S·ª≠a khoa", font=("Helvetica", 16, "bold"), text_color="black").pack(pady=5)

            # Frame for Dept ID (display only, not editable)
            id_frame = CTkFrame(form_frame, fg_color="transparent")
            id_frame.pack(fill="x", pady=2)
            CTkLabel(id_frame, text="M√£ khoa:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
            dept_id_label = CTkLabel(id_frame, text=dept_id, width=260, anchor="w")
            dept_id_label.pack(side="left")

            # Frame for Dept Name
            name_frame = CTkFrame(form_frame, fg_color="transparent")
            name_frame.pack(fill="x", pady=2)
            CTkLabel(name_frame, text="T√™n khoa:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
            dept_name_entry = CTkEntry(name_frame, width=260, placeholder_text="VD: C√¥ng ngh·ªá th√¥ng tin")
            dept_name_entry.insert(0, dept_name)
            dept_name_entry.pack(side="left")

            # Frame for Abbreviation
            abbr_frame = CTkFrame(form_frame, fg_color="transparent")
            abbr_frame.pack(fill="x", pady=2)
            CTkLabel(abbr_frame, text="T√™n vi·∫øt t·∫Øt:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
            dept_abbr_entry = CTkEntry(abbr_frame, width=260, placeholder_text="VD: CNTT (‚â§5 k√Ω t·ª±)")
            dept_abbr_entry.insert(0, dept_abbr)
            dept_abbr_entry.pack(side="left")

            # Frame for Description
            desc_frame = CTkFrame(form_frame, fg_color="transparent")
            desc_frame.pack(fill="x", pady=2)
            CTkLabel(desc_frame, text="M√¥ t·∫£ nhi·ªám v·ª•:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
            dept_desc_entry = CTkEntry(desc_frame, width=260, placeholder_text="VD: Qu·∫£n l√Ω CNTT")
            dept_desc_entry.insert(0, description)
            dept_desc_entry.pack(side="left")

            # Buttons
            button_frame = CTkFrame(form_frame, fg_color="transparent")
            button_frame.pack(pady=10)
            CTkButton(button_frame, text="L∆∞u", fg_color="#0085FF", width=100).pack(side="left", padx=5)
            CTkButton(button_frame, text="H·ªßy", fg_color="#6C757D", width=100, command=edit_window.destroy).pack(side="left", padx=5)

            def save_dept():
                new_dept_name = dept_name_entry.get().strip()
                new_dept_abbr = dept_abbr_entry.get().strip()
                new_dept_desc = dept_desc_entry.get().strip()

                if not all([new_dept_name, new_dept_abbr, new_dept_desc]):
                    messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!")
                    return

                if len(new_dept_abbr) > 5:
                    messagebox.showerror("L·ªói", "T√™n vi·∫øt t·∫Øt kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 5 k√Ω t·ª±!")
                    return

                try:
                    conn = mysql.connector.connect(**DB_CONFIG)
                    cursor = conn.cursor()
                    # Ki·ªÉm tra tr√πng t√™n v√† t√™n vi·∫øt t·∫Øt (ngo·∫°i tr·ª´ b·∫£n ghi hi·ªán t·∫°i)
                    cursor.execute("""
                        SELECT dept_id FROM departments
                        WHERE (dept_name = %s OR dept_abbr = %s) AND dept_id != %s
                    """, (new_dept_name, new_dept_abbr, dept_id))
                    if cursor.fetchone():
                        messagebox.showerror("L·ªói", "T√™n khoa ho·∫∑c t√™n vi·∫øt t·∫Øt ƒë√£ t·ªìn t·∫°i!")
                        return

                    cursor.execute("""
                        UPDATE departments
                        SET dept_name = %s, dept_abbr = %s, description = %s
                        WHERE dept_id = %s
                    """, (new_dept_name, new_dept_abbr, new_dept_desc, dept_id))
                    conn.commit()
                    messagebox.showinfo("Th√†nh c√¥ng", f"C·∫≠p nh·∫≠t khoa {new_dept_name} th√†nh c√¥ng!")
                    self.load_depts()
                    edit_window.destroy()
                except mysql.connector.Error as e:
                    messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t khoa: {e}")
                finally:
                    cursor.close()
                    conn.close()

            # Bind save function to "L∆∞u" button
            button_frame.winfo_children()[0].configure(command=save_dept)

        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu khoa: {e}")
        finally:
            if cursor:
                cursor.close()
            if conn:
                conn.close()


    def delete_dept(self, dept_id):
        conn = None
        cursor = None
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()

            # Ki·ªÉm tra li√™n quan ƒë·∫øn gi√°o vi√™n
            cursor.execute("SELECT 1 FROM teachers WHERE dept_id = %s LIMIT 1", (dept_id,))
            if cursor.fetchone():
                messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ x√≥a khoa v√¨ c√≥ gi√°o vi√™n thu·ªôc khoa n√†y!", parent=self.window)
                return

            # X√°c nh·∫≠n x√≥a
            if messagebox.askyesno("X√°c nh·∫≠n", f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a khoa {dept_id}?", parent=self.window):
                cursor.execute("DELETE FROM departments WHERE dept_id = %s", (dept_id,))
                conn.commit()
                messagebox.showinfo("Th√†nh c√¥ng", f"X√≥a khoa {dept_id} th√†nh c√¥ng", parent=self.window)
                self.load_depts()
        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ x√≥a khoa: {e}", parent=self.window)
        finally:
            if cursor:
                cursor.close()
            if conn:
                conn.close()

    def load_depts(self):
        # X√≥a c√°c widget c≈© trong frame
        for widget in self.dept_list_frame.winfo_children():
            widget.destroy()

        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            
            # L·∫•y t·∫•t c·∫£ khoa
            query = "SELECT dept_id, dept_name, dept_abbr, dept_description FROM departments"
            cursor.execute(query)

            rows = cursor.fetchall()
            if not rows:
                CTkLabel(self.dept_list_frame, text="Kh√¥ng c√≥ d·ªØ li·ªáu khoa", font=("Helvetica", 14), text_color="gray").pack(pady=20, expand=True)
            else:
                for idx, row in enumerate(rows, start=1):
                    dept_id, name, abbr, description = row
                    # T·∫°o frame cho t·ª´ng d√≤ng
                    dept_row_frame = CTkFrame(self.dept_list_frame, fg_color="#F0F0F0", corner_radius=5)
                    dept_row_frame.pack(fill="x", padx=0, pady=2)

                    # CƒÉn ch·ªânh c√°c c·ªôt v·ªõi chi·ªÅu r·ªông ƒë·ªìng b·ªô v·ªõi heading
                    CTkLabel(dept_row_frame, text=dept_id, font=("Helvetica", 12), text_color="black", width=150, anchor="center").pack(side="left", padx=5)
                    CTkLabel(dept_row_frame, text=name, font=("Helvetica", 12), text_color="black", width=200, anchor="center").pack(side="left", padx=5)  # Gi·∫£m t·ª´ 450 xu·ªëng 400
                    CTkLabel(dept_row_frame, text=abbr, font=("Helvetica", 12), text_color="black", width=150, anchor="center").pack(side="left", padx=5)
                    CTkLabel(dept_row_frame, text=description if description else "N/A", font=("Helvetica", 12), text_color="black", width=300, anchor="center").pack(side="left", padx=5)  # Gi·∫£m t·ª´ 600 xu·ªëng 500
                    # Frame ch·ª©a c√°c n√∫t S·ª≠a/X√≥a
                    button_frame = CTkFrame(dept_row_frame, fg_color="transparent", width=250)  # TƒÉng t·ª´ 250 l√™n 350
                    button_frame.pack(side="left", padx=60)
                    CTkButton(button_frame, text="S·ª≠a", fg_color="#FFC107", width=60, command=lambda d_id=dept_id: self.edit_dept(d_id)).pack(side="left", padx=2)
                    CTkButton(button_frame, text="X√≥a", fg_color="#F44336", width=60, command=lambda d_id=dept_id: self.delete_dept(d_id)).pack(side="left", padx=2)
        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu khoa: {e}")
        finally:
            cursor.close()
            conn.close()

    def on_dept_select(self, event):
        selected_item = self.dept_tree.selection()
        if not selected_item:
            return
        item = self.dept_tree.item(selected_item)
        self.dept_name.delete(0, END)
        self.dept_name.insert(0, item["values"][1])
        self.dept_name.configure(placeholder_text="")
        self.dept_abbr.delete(0, END)
        self.dept_abbr.insert(0, item["values"][2])
        self.dept_abbr.configure(placeholder_text="")
        self.dept_description.delete(0, END)
        self.dept_description.insert(0, item["values"][3])
        self.dept_description.configure(placeholder_text="")

    def reset_dept_fields(self):
        self.dept_name.delete(0, END)
        self.dept_name.configure(placeholder_text="T√™n khoa")
        self.dept_abbr.delete(0, END)
        self.dept_abbr.configure(placeholder_text="T√™n vi·∫øt t·∫Øt")
        self.dept_description.delete(0, END)
        self.dept_description.configure(placeholder_text="M√¥ t·∫£ nhi·ªám v·ª•")
        # B·ªè ch·ªçn d√≤ng trong b·∫£ng dept_tree
        for item in self.dept_tree.selection():
            self.dept_tree.selection_remove(item)

    def update_teacher_coefficient(self, degree_combobox, teacher_coeff, window):
        degree = degree_combobox.get().strip()
        if not degree or degree == "Kh√¥ng c√≥ b·∫±ng c·∫•p" or degree == "L·ªói t·∫£i b·∫±ng c·∫•p":
            teacher_coeff.delete(0, "end")
            teacher_coeff.insert(0, "1.0")  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ b·∫±ng c·∫•p
            return
        degree_id = degree.split(":")[0].strip()
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            cursor.execute("SELECT coefficient FROM degrees WHERE degree_id = %s", (degree_id,))
            result = cursor.fetchone()
            teacher_coeff.delete(0, "end")
            if result:
                teacher_coeff.insert(0, str(result[0]))
            else:
                teacher_coeff.insert(0, "1.0")  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t√¨m th·∫•y
        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i h·ªá s·ªë: {e}", parent=window)
        finally:
            cursor.close()
            conn.close()


    def add_teacher(self):
    # T·∫°o c·ª≠a s·ªï pop-up
        add_window = CTkToplevel(self.window)
        add_window.title("Th√™m gi√°o vi√™n m·ªõi")
        add_window.geometry("500x400")
        add_window.resizable(False, False)

        # CƒÉn gi·ªØa c·ª≠a s·ªï popup
        self.window.update_idletasks()
        x = self.window.winfo_x()
        y = self.window.winfo_y()
        w = self.window.winfo_width()
        h = self.window.winfo_height()
        add_window.geometry(f"+{x + w//2 - 250}+{y + h//2 - 200}")

        # ƒê√® l√™n c·ª≠a s·ªï ch√≠nh
        add_window.transient(self.window)
        add_window.grab_set()

        # Frame ch√≠nh
        main_frame = CTkFrame(add_window, fg_color="transparent")
        main_frame.pack(padx=20, pady=20, fill="both", expand=True)

        # Ti√™u ƒë·ªÅ
        CTkLabel(main_frame, text="TH√äM GI√ÅO VI√äN M·ªöI", font=("Helvetica", 18, "bold")).pack(pady=(5, 15))

        # Frame nh·∫≠p li·ªáu
        form_frame = CTkFrame(main_frame, fg_color="transparent")
        form_frame.pack(fill="both", expand=True)

        def create_row(label, widget, row):
            CTkLabel(form_frame, text=label, anchor="w", font=("Helvetica", 12)).grid(row=row, column=0, sticky="w", pady=5, padx=(0, 10))
            widget.grid(row=row, column=1, sticky="ew", pady=5)

        form_frame.columnconfigure(1, weight=1)

        # H·ªç t√™n
        teacher_name = CTkEntry(form_frame, placeholder_text="H·ªç t√™n")
        create_row("H·ªç t√™n:", teacher_name, 0)

        # Ng√†y sinh + n√∫t l·ªãch
        date_frame = CTkFrame(form_frame, fg_color="transparent")
        date_of_birth = CTkEntry(date_frame, placeholder_text="YYYY-MM-DD")
        date_of_birth.pack(side="left", fill="x", expand=True)
        CTkButton(date_frame, text="üìÖ", width=30, fg_color="#0085FF", hover_color="#005BB5", 
                command=lambda: self.open_calendar(date_of_birth)).pack(side="right")
        create_row("Ng√†y sinh:", date_frame, 1)

        # ƒêi·ªán tho·∫°i
        phone = CTkEntry(form_frame, placeholder_text="S·ªë ƒëi·ªán tho·∫°i")
        create_row("ƒêi·ªán tho·∫°i:", phone, 2)

        # Email
        email = CTkEntry(form_frame, placeholder_text="Email")
        create_row("Email:", email, 3)

        # Khoa
        dept_combobox = CTkComboBox(form_frame, values=self.get_departments())
        dept_combobox.set(self.get_departments()[0] if self.get_departments() else "")
        create_row("Khoa:", dept_combobox, 4)

        # B·∫±ng c·∫•p
        degree_combobox = CTkComboBox(form_frame, values=self.get_degrees())
        degree_combobox.set(self.get_degrees()[0] if self.get_degrees() else "")
        create_row("B·∫±ng c·∫•p:", degree_combobox, 5)

        # H√†m l∆∞u gi√°o vi√™n
        def save_teacher(window):
            name = teacher_name.get().strip()
            dob_str = date_of_birth.get().strip()
            phone_num = phone.get().strip()
            email_addr = email.get().strip()
            dept_info = dept_combobox.get().strip()
            degree_info = degree_combobox.get().strip()

            if not all([name, dept_info, degree_info]):
                messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc (H·ªç t√™n, Khoa, B·∫±ng c·∫•p)", parent=window)
                return

            dob_date = None
            if dob_str:
                try:
                    dob_date = datetime.strptime(dob_str, '%Y-%m-%d').date()
                    if dob_date > datetime.now().date():
                        messagebox.showerror("L·ªói", "Ng√†y sinh kh√¥ng ƒë∆∞·ª£c trong t∆∞∆°ng lai!", parent=window)
                        return
                except ValueError:
                    messagebox.showerror("L·ªói", "Ng√†y sinh kh√¥ng h·ª£p l·ªá (YYYY-MM-DD)!", parent=window)
                    return

            if phone_num and not re.match(r"^\d{10,15}$", phone_num):
                messagebox.showerror("L·ªói", "S·ªë ƒëi·ªán tho·∫°i ph·∫£i t·ª´ 10 ƒë·∫øn 15 ch·ªØ s·ªë!", parent=window)
                return

            if email_addr and not re.match(r"[^@]+@[^@]+\.[^@]+", email_addr):
                messagebox.showerror("L·ªói", "Email kh√¥ng h·ª£p l·ªá!", parent=window)
                return

            dept_id = dept_info.split(":")[0].strip()
            degree_id = degree_info.split(":")[0].strip()

            conn = None
            cursor = None
            try:
                conn = mysql.connector.connect(**DB_CONFIG)
                cursor = conn.cursor()

                # L·∫•y h·ªá s·ªë t·ª´ b·∫£ng degrees
                cursor.execute("SELECT coefficient FROM degrees WHERE degree_id = %s", (degree_id,))
                result = cursor.fetchone()
                if not result:
                    messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y b·∫±ng c·∫•p!", parent=window)
                    return
                teacher_coefficient = result[0]

                # Ki·ªÉm tra email tr√πng l·∫∑p
                if email_addr:
                    cursor.execute("SELECT teacher_id FROM teachers WHERE email = %s", (email_addr,))
                    if cursor.fetchone():
                        messagebox.showerror("L·ªói", "Email ƒë√£ t·ªìn t·∫°i!", parent=window)
                        return

                # T·∫°o m√£ gi√°o vi√™n ng·∫´u nhi√™n
                import random
                max_attempts = 100
                for _ in range(max_attempts):
                    random_num = random.randint(0, 99999)
                    teacher_id = f"TCH{str(random_num).zfill(5)}"
                    cursor.execute("SELECT teacher_id FROM teachers WHERE teacher_id = %s", (teacher_id,))
                    if not cursor.fetchone():
                        break
                else:
                    messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ t·∫°o m√£ gi√°o vi√™n duy nh·∫•t sau nhi·ªÅu l·∫ßn th·ª≠!", parent=window)
                    return

                # Th√™m gi√°o vi√™n
                cursor.execute(
                    "INSERT INTO teachers (teacher_id, full_name, date_of_birth, phone, email, dept_id, degree_id, teacher_coefficient) "
                    "VALUES (%s, %s, %s, %s, %s, %s, %s, %s)",
                    (teacher_id, name, dob_date, phone_num or None, email_addr or None, dept_id, degree_id, teacher_coefficient)
                )
                conn.commit()
                messagebox.showinfo("Th√†nh c√¥ng", f"Th√™m gi√°o vi√™n th√†nh c√¥ng v·ªõi m√£ {teacher_id}", parent=window)
                self.load_teachers()
                window.destroy()
            except mysql.connector.Error as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ th√™m gi√°o vi√™n: {e}", parent=window)
            finally:
                if cursor:
                    cursor.close()
                if conn:
                    conn.close()

        # N√∫t Th√™m v√† H·ªßy
        button_frame = CTkFrame(form_frame, fg_color="transparent")
        button_frame.grid(row=6, column=0, columnspan=2, pady=(10, 0))

        CTkButton(button_frame, text="Th√™m", width=120, fg_color="#007bff", hover_color="#0056b3",
                command=lambda: save_teacher(add_window)).pack(side="left", padx=10)
        CTkButton(button_frame, text="H·ªßy", width=120, fg_color="#6c757d", hover_color="#5a6268",
                command=add_window.destroy).pack(side="left", padx=10)

        
    def edit_teacher(self, teacher_id):
        # T·∫°o c·ª≠a s·ªï pop-up
        edit_window = CTkToplevel(self.window)
        edit_window.title("S·ª≠a th√¥ng tin gi√°o vi√™n")
        edit_window.geometry("500x400")
        edit_window.resizable(False, False)

        # CƒÉn gi·ªØa pop-up
        self.window.update_idletasks()
        x = self.window.winfo_x()
        y = self.window.winfo_y()
        w = self.window.winfo_width()
        h = self.window.winfo_height()
        edit_window.geometry(f"+{x + w//2 - 250}+{y + h//2 - 200}")

        # ƒê√® l√™n c·ª≠a s·ªï ch√≠nh
        edit_window.transient(self.window)
        edit_window.grab_set()

        # Frame ch√≠nh
        main_frame = CTkFrame(edit_window, fg_color="transparent")
        main_frame.pack(padx=20, pady=20, fill="both", expand=True)

        # Ti√™u ƒë·ªÅ
        CTkLabel(main_frame, text="S·ª¨A TH√îNG TIN GI√ÅO VI√äN", font=("Helvetica", 18, "bold")).pack(pady=(5, 15))

        # Frame nh·∫≠p li·ªáu
        form_frame = CTkFrame(main_frame, fg_color="transparent")
        form_frame.pack(fill="both", expand=True)

        def create_row(label, widget, row):
            CTkLabel(form_frame, text=label, anchor="w", font=("Helvetica", 12)).grid(row=row, column=0, sticky="w", pady=5, padx=(0, 10))
            widget.grid(row=row, column=1, sticky="ew", pady=5)

        form_frame.columnconfigure(1, weight=1)

        # L·∫•y th√¥ng tin gi√°o vi√™n hi·ªán t·∫°i
        conn = None
        cursor = None
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            cursor.execute(
                "SELECT full_name, date_of_birth, phone, email, dept_id, degree_id "
                "FROM teachers WHERE teacher_id = %s",
                (teacher_id,)
            )
            result = cursor.fetchone()
            if not result:
                messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y gi√°o vi√™n!", parent=edit_window)
                edit_window.destroy()
                return
            current_name, current_dob, current_phone, current_email, current_dept_id, current_degree_id = result
        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i th√¥ng tin gi√°o vi√™n: {e}", parent=edit_window)
            edit_window.destroy()
            return
        finally:
            if cursor:
                cursor.close()
            if conn:
                conn.close()

        # H·ªç t√™n
        teacher_name = CTkEntry(form_frame, placeholder_text="H·ªç t√™n")
        teacher_name.insert(0, current_name)
        create_row("H·ªç t√™n:", teacher_name, 0)

        # Ng√†y sinh + n√∫t l·ªãch
        date_frame = CTkFrame(form_frame, fg_color="transparent")
        date_of_birth = CTkEntry(date_frame, placeholder_text="YYYY-MM-DD")
        if current_dob:
            date_of_birth.insert(0, current_dob.strftime('%Y-%m-%d'))
        date_of_birth.pack(side="left", fill="x", expand=True)
        CTkButton(date_frame, text="üìÖ", width=30, fg_color="#0085FF", hover_color="#005BB5", 
                command=lambda: self.open_calendar(date_of_birth)).pack(side="right")
        create_row("Ng√†y sinh:", date_frame, 1)

        # ƒêi·ªán tho·∫°i
        phone = CTkEntry(form_frame, placeholder_text="S·ªë ƒëi·ªán tho·∫°i")
        if current_phone:
            phone.insert(0, current_phone)
        create_row("ƒêi·ªán tho·∫°i:", phone, 2)

        # Email
        email = CTkEntry(form_frame, placeholder_text="Email")
        if current_email:
            email.insert(0, current_email)
        create_row("Email:", email, 3)

        # Khoa
        dept_combobox = CTkComboBox(form_frame, values=self.get_departments())
        dept_values = self.get_departments()
        for dept in dept_values:
            if dept.startswith(current_dept_id):
                dept_combobox.set(dept)
                break
        else:
            dept_combobox.set(dept_values[0] if dept_values else "")
        create_row("Khoa:", dept_combobox, 4)

        # B·∫±ng c·∫•p
        degree_combobox = CTkComboBox(form_frame, values=self.get_degrees())
        degree_values = self.get_degrees()
        for degree in degree_values:
            if degree.startswith(current_degree_id):
                degree_combobox.set(degree)
                break
        else:
            degree_combobox.set(degree_values[0] if degree_values else "")
        create_row("B·∫±ng c·∫•p:", degree_combobox, 5)

        # H√†m l∆∞u gi√°o vi√™n
        def save_teacher(window):
            name = teacher_name.get().strip()
            dob_str = date_of_birth.get().strip()
            phone_num = phone.get().strip()
            email_addr = email.get().strip()
            dept_info = dept_combobox.get().strip()
            degree_info = degree_combobox.get().strip()

            if not all([name, dept_info, degree_info]):
                messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc (H·ªç t√™n, Khoa, B·∫±ng c·∫•p)", parent=window)
                return

            dob_date = None
            if dob_str:
                try:
                    dob_date = datetime.strptime(dob_str, '%Y-%m-%d').date()
                    if dob_date > datetime.now().date():
                        messagebox.showerror("L·ªói", "Ng√†y sinh kh√¥ng ƒë∆∞·ª£c trong t∆∞∆°ng lai!", parent=window)
                        return
                except ValueError:
                    messagebox.showerror("L·ªói", "Ng√†y sinh kh√¥ng h·ª£p l·ªá (YYYY-MM-DD)!", parent=window)
                    return

            if phone_num and not re.match(r"^\d{10,15}$", phone_num):
                messagebox.showerror("L·ªói", "S·ªë ƒëi·ªán tho·∫°i ph·∫£i t·ª´ 10 ƒë·∫øn 15 ch·ªØ s·ªë!", parent=window)
                return

            if email_addr and not re.match(r"[^@]+@[^@]+\.[^@]+", email_addr):
                messagebox.showerror("L·ªói", "Email kh√¥ng h·ª£p l·ªá!", parent=window)
                return

            dept_id = dept_info.split(":")[0].strip()
            degree_id = degree_info.split(":")[0].strip()

            conn = None
            cursor = None
            try:
                conn = mysql.connector.connect(**DB_CONFIG)
                cursor = conn.cursor()

                # Ki·ªÉm tra email tr√πng l·∫∑p (tr·ª´ ch√≠nh gi√°o vi√™n hi·ªán t·∫°i)
                if email_addr:
                    cursor.execute(
                        "SELECT teacher_id FROM teachers WHERE email = %s AND teacher_id != %s",
                        (email_addr, teacher_id)
                    )
                    if cursor.fetchone():
                        messagebox.showerror("L·ªói", "Email ƒë√£ t·ªìn t·∫°i!", parent=window)
                        return

                # L·∫•y h·ªá s·ªë t·ª´ b·∫£ng degrees
                cursor.execute("SELECT coefficient FROM degrees WHERE degree_id = %s", (degree_id,))
                result = cursor.fetchone()
                if not result:
                    messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y b·∫±ng c·∫•p!", parent=window)
                    return
                teacher_coefficient = result[0]

                # C·∫≠p nh·∫≠t gi√°o vi√™n
                cursor.execute(
                    "UPDATE teachers SET full_name = %s, date_of_birth = %s, phone = %s, email = %s, "
                    "dept_id = %s, degree_id = %s, teacher_coefficient = %s WHERE teacher_id = %s",
                    (name, dob_date, phone_num or None, email_addr or None, dept_id, degree_id, teacher_coefficient, teacher_id)
                )
                conn.commit()
                messagebox.showinfo("Th√†nh c√¥ng", f"C·∫≠p nh·∫≠t gi√°o vi√™n {teacher_id} th√†nh c√¥ng", parent=window)
                self.load_teachers()
                window.destroy()
            except mysql.connector.Error as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t gi√°o vi√™n: {e}", parent=window)
            finally:
                if cursor:
                    cursor.close()
                if conn:
                    conn.close()

        # N√∫t L∆∞u v√† H·ªßy
        button_frame = CTkFrame(form_frame, fg_color="transparent")
        button_frame.grid(row=6, column=0, columnspan=2, pady=(10, 0))

        CTkButton(button_frame, text="L∆∞u", width=120, fg_color="#007bff", hover_color="#0056b3",
                command=lambda: save_teacher(edit_window)).pack(side="left", padx=10)
        CTkButton(button_frame, text="H·ªßy", width=120, fg_color="#6c757d", hover_color="#5a6268",
                command=edit_window.destroy).pack(side="left", padx=10)

    def delete_teacher(self, teacher_id):
        conn = None
        cursor = None
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()

            # Ki·ªÉm tra li√™n quan ƒë·∫øn assignments
            cursor.execute("SELECT 1 FROM assignments WHERE teacher_id = %s LIMIT 1", (teacher_id,))
            if cursor.fetchone():
                messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ x√≥a gi√°o vi√™n v√¨ ƒë√£ ƒë∆∞·ª£c ph√¢n c√¥ng!", parent=self.window)
                return

            # X√°c nh·∫≠n x√≥a
            if messagebox.askyesno("X√°c nh·∫≠n", f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a gi√°o vi√™n {teacher_id}?", parent=self.window):
                cursor.execute("DELETE FROM teachers WHERE teacher_id = %s", (teacher_id,))
                conn.commit()
                messagebox.showinfo("Th√†nh c√¥ng", f"X√≥a gi√°o vi√™n {teacher_id} th√†nh c√¥ng", parent=self.window)
                self.load_teachers()
        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ x√≥a gi√°o vi√™n: {e}", parent=self.window)
        finally:
            if cursor:
                cursor.close()
            if conn:
                conn.close()

    def load_teachers(self):
        # X√≥a c√°c widget c≈© trong frame
        for widget in self.teacher_list_frame.winfo_children():
            widget.destroy()

        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            query = """
                SELECT t.teacher_id, t.full_name, t.date_of_birth, t.phone, t.email, d.dept_name, deg.degree_name
                FROM teachers t
                JOIN departments d ON t.dept_id = d.dept_id
                JOIN degrees deg ON t.degree_id = deg.degree_id
            """
            cursor.execute(query)
            rows = cursor.fetchall()
            if not rows:
                CTkLabel(self.teacher_list_frame, text="Kh√¥ng c√≥ d·ªØ li·ªáu gi√°o vi√™n", font=("Helvetica", 14), text_color="gray").pack(pady=20, expand=True)
            else:
                for idx, row in enumerate(rows, start=1):
                    teacher_id, name, dob, phone, email, dept_name, degree_name = row
                    # T·∫°o frame cho t·ª´ng d√≤ng
                    teacher_row_frame = CTkFrame(self.teacher_list_frame, fg_color="#F0F0F0", corner_radius=5)
                    teacher_row_frame.pack(fill="x", padx=0, pady=2)

                    # CƒÉn ch·ªânh c√°c c·ªôt v·ªõi chi·ªÅu r·ªông ƒë·ªìng b·ªô v·ªõi heading
                    CTkLabel(teacher_row_frame, text=teacher_id, font=("Helvetica", 12), text_color="black", width=80, anchor="center").pack(side="left", padx=5)
                    CTkLabel(teacher_row_frame, text=name, font=("Helvetica", 12), text_color="black", width=120, anchor="center").pack(side="left", padx=5)
                    CTkLabel(teacher_row_frame, text=dob.strftime('%Y-%m-%d') if dob else "N/A", font=("Helvetica", 12), text_color="black", width=80, anchor="center").pack(side="left", padx=5)
                    CTkLabel(teacher_row_frame, text=phone if phone else "N/A", font=("Helvetica", 12), text_color="black", width=80, anchor="center").pack(side="left", padx=5)
                    CTkLabel(teacher_row_frame, text=email if email else "N/A", font=("Helvetica", 12), text_color="black", width=180, anchor="center").pack(side="left", padx=5)
                    CTkLabel(teacher_row_frame, text=dept_name, font=("Helvetica", 12), text_color="black", width=200, anchor="center").pack(side="left", padx=5)
                    CTkLabel(teacher_row_frame, text=degree_name, font=("Helvetica", 12), text_color="black", width=120, anchor="center").pack(side="left", padx=5)

                    # Frame ch·ª©a c√°c n√∫t S·ª≠a/X√≥a
                    button_frame = CTkFrame(teacher_row_frame, fg_color="transparent", width=100)
                    button_frame.pack(side="left", padx=20)
                    CTkButton(button_frame, text="S·ª≠a", fg_color="#FFC107", width=30, command=lambda t_id=teacher_id: self.edit_teacher(t_id)).pack(side="left", padx=2)
                    CTkButton(button_frame, text="X√≥a", fg_color="#F44336", width=30, command=lambda t_id=teacher_id: self.delete_teacher(t_id)).pack(side="left", padx=2)
        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu gi√°o vi√™n: {e}")
        finally:
            cursor.close()
            conn.close()

    def load_stats(self):
        dept_value = self.stats_dept_combobox.get()
        dept_id = None if dept_value in ["Kh√¥ng c√≥ khoa", "L·ªói t·∫£i khoa"] else dept_value.split(":")[0]

        # X√≥a c√°c bi·ªÉu ƒë·ªì c≈© n·∫øu c√≥
        for frame in [self.stats_tab.winfo_children()[2].winfo_children()[0],
                      self.stats_tab.winfo_children()[2].winfo_children()[1],
                      self.stats_tab.winfo_children()[2].winfo_children()[2]]:
            for item in frame.find_all():
                frame.delete(item)

        # L·∫•y d·ªØ li·ªáu
        age_labels, age_data = self.get_age_distribution(dept_id)
        dept_labels, dept_data = self.get_dept_distribution(dept_id)
        degree_labels, degree_data = self.get_degree_distribution(dept_id)

        # Bi·ªÉu ƒë·ªì ƒë·ªô tu·ªïi (c·ªôt)
        if age_labels and age_data:
            CTkLabel(self.stats_tab.winfo_children()[2].winfo_children()[0], text="Ph√¢n b·ªë ƒê·ªô tu·ªïi", font=("Helvetica", 14, "bold")).pack(pady=5)
            chart = {
                "type": "bar",
                "data": {
                    "labels": age_labels,
                    "datasets": [{
                        "label": "S·ªë gi√°o vi√™n",
                        "data": age_data,
                        "backgroundColor": ["#FF6384", "#36A2EB", "#FFCE56", "#4BC0C0", "#9966FF"],
                        "borderColor": ["#FF6384", "#36A2EB", "#FFCE56", "#4BC0C0", "#9966FF"],
                        "borderWidth": 1
                    }]
                },
                "options": {
                    "scales": {
                        "y": {
                            "beginAtZero": True,
                            "title": {
                                "display": True,
                                "text": "S·ªë gi√°o vi√™n"
                            }
                        },
                        "x": {
                            "title": {
                                "display": True,
                                "text": "Nh√≥m tu·ªïi"
                            }
                        }
                    }
                }
            }
            code_block = f"""
```chartjs
{chart}
```
"""
            self.stats_tab.winfo_children()[2].winfo_children()[0].create_text(10, 50, text=code_block, anchor="nw", font=("Helvetica", 10))

        # Bi·ªÉu ƒë·ªì khoa (tr√≤n)
        if dept_labels and dept_data:
            CTkLabel(self.stats_tab.winfo_children()[2].winfo_children()[1], text="Ph√¢n b·ªë theo Khoa", font=("Helvetica", 14, "bold")).pack(pady=5)
            chart = {
                "type": "pie",
                "data": {
                    "labels": dept_labels,
                    "datasets": [{
                        "label": "S·ªë gi√°o vi√™n",
                        "data": dept_data,
                        "backgroundColor": ["#FF6384", "#36A2EB", "#FFCE56", "#4BC0C0", "#9966FF", "#FF9F40"],
                        "borderColor": ["#FFFFFF"] * len(dept_labels),
                        "borderWidth": 1
                    }]
                },
                "options": {
                    "plugins": {
                        "legend": {
                            "position": "top"
                        }
                    }
                }
            }
            code_block = f"""
```chartjs
{chart}
```
"""
            self.stats_tab.winfo_children()[2].winfo_children()[1].create_text(10, 50, text=code_block, anchor="nw", font=("Helvetica", 10))

        # Bi·ªÉu ƒë·ªì b·∫±ng c·∫•p (c·ªôt)
        if degree_labels and degree_data:
            CTkLabel(self.stats_tab.winfo_children()[2].winfo_children()[2], text="Ph√¢n b·ªë theo B·∫±ng c·∫•p", font=("Helvetica", 14, "bold")).pack(pady=5)
            chart = {
                "type": "bar",
                "data": {
                    "labels": degree_labels,
                    "datasets": [{
                        "label": "S·ªë gi√°o vi√™n",
                        "data": degree_data,
                        "backgroundColor": ["#FF6384", "#36A2EB", "#FFCE56", "#4BC0C0", "#9966FF"],
                        "borderColor": ["#FF6384", "#36A2EB", "#FFCE56", "#4BC0C0", "#9966FF"],
                        "borderWidth": 1
                    }]
                },
                "options": {
                    "scales": {
                        "y": {
                            "beginAtZero": True,
                            "title": {
                                "display": True,
                                "text": "S·ªë gi√°o vi√™n"
                            }
                        },
                        "x": {
                            "title": {
                                "display": True,
                                "text": "B·∫±ng c·∫•p"
                            }
                        }
                    }
                }
            }
            code_block = f"""
```chartjs
{chart}
```
"""
            self.stats_tab.winfo_children()[2].winfo_children()[2].create_text(10, 50, text=code_block, anchor="nw", font=("Helvetica", 10))

    def add_module(self):
    # Create popup window
        add_window = CTkToplevel(self.window)
        add_window.title("Th√™m h·ªçc ph·∫ßn m·ªõi")
        add_window.resizable(False, False)

        # Set window size
        window_width = 450
        window_height = 350
        add_window.geometry(f"{window_width}x{window_height}")

        # Center the window on the screen
        screen_width = self.window.winfo_screenwidth()
        screen_height = self.window.winfo_screenheight()
        x_position = int((screen_width - window_width) / 2)
        y_position = int((screen_height - window_height) / 2)
        add_window.geometry(f"{window_width}x{window_height}+{x_position}+{y_position}")

        # Make window modal
        add_window.transient(self.window)
        add_window.grab_set()

        # Form frame
        form_frame = CTkFrame(add_window, fg_color="#F0F0F0", corner_radius=10)
        form_frame.pack(padx=20, pady=20, fill="both", expand=True)

        # Title
        CTkLabel(form_frame, text="Th√™m h·ªçc ph·∫ßn m·ªõi", font=("Helvetica", 16, "bold"), text_color="black").pack(pady=10)

        # Module Name
        name_frame = CTkFrame(form_frame, fg_color="transparent")
        name_frame.pack(fill="x", pady=5)
        CTkLabel(name_frame, text="T√™n h·ªçc ph·∫ßn:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
        module_name_entry = CTkEntry(name_frame, placeholder_text="T√™n h·ªçc ph·∫ßn", width=300)
        module_name_entry.pack(side="left", fill="x", expand=True)

        # Credits (Combobox t·ª´ 1-12)
        credits_frame = CTkFrame(form_frame, fg_color="transparent")
        credits_frame.pack(fill="x", pady=5)
        CTkLabel(credits_frame, text="S·ªë t√≠n ch·ªâ:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
        credits_combobox = CTkComboBox(credits_frame, values=[str(i) for i in range(1, 13)], width=300)
        credits_combobox.pack(side="left", fill="x", expand=True)
        credits_combobox.set("1")

        # Coefficient
        coefficient_frame = CTkFrame(form_frame, fg_color="transparent")
        coefficient_frame.pack(fill="x", pady=5)
        CTkLabel(coefficient_frame, text="H·ªá s·ªë h·ªçc ph·∫ßn:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
        coefficient_entry = CTkEntry(coefficient_frame, placeholder_text="H·ªá s·ªë (v√≠ d·ª•: 1.5)", width=300)
        coefficient_entry.pack(side="left", fill="x", expand=True)

        # # Periods
        # periods_frame = CTkFrame(form_frame, fg_color="transparent")
        # periods_frame.pack(fill="x", pady=5)
        # CTkLabel(periods_frame, text="S·ªë ti·∫øt:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
        # periods_entry = CTkEntry(periods_frame, placeholder_text="S·ªë ti·∫øt", width=300)
        # periods_entry.pack(side="left", fill="x", expand=True)

        # Department
        dept_frame = CTkFrame(form_frame, fg_color="transparent")
        dept_frame.pack(fill="x", pady=5)
        CTkLabel(dept_frame, text="Khoa:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
        departments = self.get_departments()
        dept_combobox = CTkComboBox(dept_frame, width=300, values=departments)
        dept_combobox.pack(side="left", fill="x", expand=True)
        if departments and departments[0] not in ["Kh√¥ng c√≥ khoa", "L·ªói t·∫£i khoa"]:
            dept_combobox.set(departments[0])
        else:
            dept_combobox.set(departments[0])

        # Buttons
        button_frame = CTkFrame(form_frame, fg_color="transparent")
        button_frame.pack(pady=20)
        CTkButton(button_frame, text="Th√™m", fg_color="#0085FF", width=100).pack(side="left", padx=5)
        CTkButton(button_frame, text="H·ªßy", fg_color="#6C757D", width=100, command=lambda: add_window.destroy()).pack(side="left", padx=5)

        # Save function
        def save_module():
            name = module_name_entry.get().strip()
            credits = credits_combobox.get().strip()
            coefficient = coefficient_entry.get().strip()
            # periods = periods_entry.get().strip()
            dept = dept_combobox.get().strip()

            # Validation
            if not all([name, credits, coefficient, dept]):
                messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!", parent=add_window)
                return

            try:
                credits = int(credits)
                # T·ª± ƒë·ªông t√≠nh s·ªë ti·∫øt = t√≠n ch·ªâ * 15
                periods = credits * 15
            except ValueError:
                messagebox.showerror("L·ªói", "S·ªë t√≠n ch·ªâ ph·∫£i l√† s·ªë nguy√™n!", parent=add_window)
                return

            try:
                coefficient = float(coefficient)
                if coefficient < 1.0 or coefficient > 1.5:
                    messagebox.showerror("L·ªói", "H·ªá s·ªë h·ªçc ph·∫ßn ph·∫£i t·ª´ 1.0 ƒë·∫øn 1.5!", parent=add_window)
                    return
            except ValueError:
                messagebox.showerror("L·ªói", "H·ªá s·ªë ph·∫£i l√† s·ªë th·ª±c!", parent=add_window)
                return

            try:
                periods = int(periods)
                if periods <= 0:
                    messagebox.showerror("L·ªói", "S·ªë ti·∫øt ph·∫£i l·ªõn h∆°n 0!", parent=add_window)
                    return
            except ValueError:
                messagebox.showerror("L·ªói", "S·ªë ti·∫øt ph·∫£i l√† s·ªë nguy√™n!", parent=add_window)
                return

            dept_id = dept.split(":")[0].strip()

            # Check for duplicate module name
            try:
                conn = mysql.connector.connect(**DB_CONFIG)
                cursor = conn.cursor()
                cursor.execute("SELECT module_id FROM course_modules WHERE module_name = %s", (name,))
                if cursor.fetchone():
                    messagebox.showerror("L·ªói", "T√™n h·ªçc ph·∫ßn ƒë√£ t·ªìn t·∫°i!", parent=add_window)
                    return

                # Generate module ID
                cursor.execute("SELECT module_id FROM course_modules ORDER BY CAST(SUBSTRING(module_id, 4) AS UNSIGNED) DESC LIMIT 1")
                result = cursor.fetchone()
                if result:
                    last_id = result[0]
                    last_num = int(last_id[3:])
                    new_num = last_num + 1
                else:
                    new_num = 1
                module_id = f"MOD{str(new_num).zfill(5)}"

                # Insert new module with dept_id
                cursor.execute("INSERT INTO course_modules (module_id, module_name, credits, coefficient, periods, dept_id) VALUES (%s, %s, %s, %s, %s, %s)",
                            (module_id, name, credits, coefficient, periods, dept_id))
                conn.commit()
                messagebox.showinfo("Th√†nh c√¥ng", f"Th√™m h·ªçc ph·∫ßn th√†nh c√¥ng v·ªõi m√£ {module_id}", parent=add_window)
                self.load_modules()
                self.module_list_frame.update_idletasks()
                add_window.destroy()
            except mysql.connector.Error as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ th√™m h·ªçc ph·∫ßn: {e}", parent=add_window)
            finally:
                cursor.close()
                conn.close()

        # Bind save function to "Th√™m" button
        button_frame.winfo_children()[0].configure(command=save_module)

    def edit_module(self, module_id):
        # Load module data into the edit form
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            cursor.execute("""
                SELECT module_id, module_name, credits, coefficient, periods, dept_id
                FROM course_modules
                WHERE module_id = %s
            """, (module_id,))
            module_data = cursor.fetchone()
            if not module_data:
                messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y h·ªçc ph·∫ßn!")
                return

            module_id, name, credits, coefficient, periods, dept_id = module_data

            # Create popup window
            edit_window = CTkToplevel(self.window)
            edit_window.title("S·ª≠a h·ªçc ph·∫ßn")
            edit_window.resizable(False, False)

            # Set window size
            window_width = 450
            window_height = 350
            edit_window.geometry(f"{window_width}x{window_height}")

            # Center the window on the screen
            screen_width = self.window.winfo_screenwidth()
            screen_height = self.window.winfo_screenheight()
            x_position = int((screen_width - window_width) / 2)
            y_position = int((screen_height - window_height) / 2)
            edit_window.geometry(f"{window_width}x{window_height}+{x_position}+{y_position}")

            # Make window modal
            edit_window.transient(self.window)
            edit_window.grab_set()

            # Form frame
            form_frame = CTkFrame(edit_window, fg_color="#F0F0F0", corner_radius=10)
            form_frame.pack(padx=20, pady=20, fill="both", expand=True)

            # Title
            CTkLabel(form_frame, text="S·ª≠a h·ªçc ph·∫ßn", font=("Helvetica", 16, "bold"), text_color="black").pack(pady=10)

            # Module Name
            name_frame = CTkFrame(form_frame, fg_color="transparent")
            name_frame.pack(fill="x", pady=5)
            CTkLabel(name_frame, text="T√™n h·ªçc ph·∫ßn:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
            module_name_entry = CTkEntry(name_frame, width=300)
            module_name_entry.pack(side="left", fill="x", expand=True)
            module_name_entry.insert(0, name)

            # Credits (Combobox t·ª´ 1-12)
            credits_frame = CTkFrame(form_frame, fg_color="transparent")
            credits_frame.pack(fill="x", pady=5)
            CTkLabel(credits_frame, text="S·ªë t√≠n ch·ªâ:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
            credits_combobox = CTkComboBox(credits_frame, values=[str(i) for i in range(1, 13)], width=300)
            credits_combobox.pack(side="left", fill="x", expand=True)
            credits_combobox.set(str(credits))

            # Coefficient
            coefficient_frame = CTkFrame(form_frame, fg_color="transparent")
            coefficient_frame.pack(fill="x", pady=5)
            CTkLabel(coefficient_frame, text="H·ªá s·ªë h·ªçc ph·∫ßn:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
            coefficient_entry = CTkEntry(coefficient_frame, width=300)
            coefficient_entry.pack(side="left", fill="x", expand=True)
            coefficient_entry.insert(0, coefficient)

            # Periods
            # periods_frame = CTkFrame(form_frame, fg_color="transparent")
            # periods_frame.pack(fill="x", pady=5)
            # CTkLabel(periods_frame, text="S·ªë ti·∫øt:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
            # periods_entry = CTkEntry(periods_frame, width=300)
            # periods_entry.pack(side="left", fill="x", expand=True)
            # periods_entry.insert(0, periods)

            # Department
            dept_frame = CTkFrame(form_frame, fg_color="transparent")
            dept_frame.pack(fill="x", pady=5)
            CTkLabel(dept_frame, text="Khoa:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
            departments = self.get_departments()
            dept_combobox = CTkComboBox(dept_frame, width=300, values=departments)
            dept_combobox.pack(side="left", fill="x", expand=True)
            for dept in departments:
                if dept.startswith(dept_id):
                    dept_combobox.set(dept)
                    break
            else:
                dept_combobox.set(departments[0] if departments else "Kh√¥ng c√≥ khoa")

            # Buttons
            button_frame = CTkFrame(form_frame, fg_color="transparent")
            button_frame.pack(pady=20)
            CTkButton(button_frame, text="L∆∞u", fg_color="#0085FF", width=100).pack(side="left", padx=5)
            CTkButton(button_frame, text="H·ªßy", fg_color="#6C757D", width=100, command=lambda: edit_window.destroy()).pack(side="left", padx=5)

            # Save function
            def save_module():
                new_name = module_name_entry.get().strip()
                new_credits = credits_combobox.get().strip()
                new_coefficient = coefficient_entry.get().strip()
                # new_periods = periods_entry.get().strip()
                new_dept = dept_combobox.get().strip()

                if not all([new_name, new_credits, new_coefficient, new_dept]):
                    messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!", parent=edit_window)
                    return

                try:
                    new_credits = int(new_credits)
                    # T·ª± ƒë·ªông t√≠nh s·ªë ti·∫øt = t√≠n ch·ªâ * 15
                    new_periods = new_credits * 15
                except ValueError:
                    messagebox.showerror("L·ªói", "S·ªë t√≠n ch·ªâ ph·∫£i l√† s·ªë nguy√™n!", parent=edit_window)
                    return

                try:
                    new_coefficient = float(new_coefficient)
                    if new_coefficient < 1.0 or new_coefficient > 1.5:
                        messagebox.showerror("L·ªói", "H·ªá s·ªë h·ªçc ph·∫ßn ph·∫£i t·ª´ 1.0 ƒë·∫øn 1.5!", parent=edit_window)
                        return
                except ValueError:
                    messagebox.showerror("L·ªói", "H·ªá s·ªë ph·∫£i l√† s·ªë th·ª±c!", parent=edit_window)
                    return

                try:
                    new_periods = int(new_periods)
                    if new_periods <= 0:
                        messagebox.showerror("L·ªói", "S·ªë ti·∫øt ph·∫£i l·ªõn h∆°n 0!", parent=edit_window)
                        return
                except ValueError:
                    messagebox.showerror("L·ªói", "S·ªë ti·∫øt ph·∫£i l√† s·ªë nguy√™n!", parent=edit_window)
                    return

                new_dept_id = new_dept.split(":")[0].strip()

                try:
                    conn = mysql.connector.connect(**DB_CONFIG)
                    cursor = conn.cursor()
                    cursor.execute("SELECT module_id FROM course_modules WHERE module_name = %s AND module_id != %s", (new_name, module_id))
                    if cursor.fetchone():
                        messagebox.showerror("L·ªói", "T√™n h·ªçc ph·∫ßn ƒë√£ t·ªìn t·∫°i!", parent=edit_window)
                        return

                    cursor.execute("UPDATE course_modules SET module_name = %s, credits = %s, coefficient = %s, periods = %s, dept_id = %s WHERE module_id = %s",
                                (new_name, new_credits, new_coefficient, new_periods, new_dept_id, module_id))
                    conn.commit()
                    messagebox.showinfo("Th√†nh c√¥ng", "C·∫≠p nh·∫≠t h·ªçc ph·∫ßn th√†nh c√¥ng!", parent=edit_window)
                    self.load_modules()
                    self.module_list_frame.update_idletasks()
                    edit_window.destroy()
                except mysql.connector.Error as e:
                    messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t h·ªçc ph·∫ßn: {e}", parent=edit_window)
                finally:
                    cursor.close()
                    conn.close()

            # Bind save function to "L∆∞u" button
            button_frame.winfo_children()[0].configure(command=save_module)

        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu h·ªçc ph·∫ßn: {e}")
        finally:
            cursor.close()
            conn.close()

    def delete_module(self, module_id):
        # Hi·ªán h·ªôp tho·∫°i x√°c nh·∫≠n tr∆∞·ªõc khi x√≥a
        if not messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a h·ªçc ph·∫ßn n√†y?"):
            return
    
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
    
            # Ki·ªÉm tra xem c√≥ l·ªõp h·ªçc n√†o ƒëang s·ª≠ d·ª•ng h·ªçc ph·∫ßn n√†y kh√¥ng
            cursor.execute("SELECT 1 FROM classes WHERE module_id = %s LIMIT 1", (module_id,))
            if cursor.fetchone():
                messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ x√≥a h·ªçc ph·∫ßn v√¨ ƒë√£ c√≥ l·ªõp h·ªçc ƒë∆∞·ª£c t·∫°o!")
                return
    
            # Th·ª±c hi·ªán x√≥a h·ªçc ph·∫ßn
            cursor.execute("DELETE FROM course_modules WHERE module_id = %s", (module_id,))
            conn.commit()
            
            messagebox.showinfo("Th√†nh c√¥ng", "X√≥a h·ªçc ph·∫ßn th√†nh c√¥ng!")
            self.load_modules()
            self.module_list_frame.update_idletasks()
            
        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ x√≥a h·ªçc ph·∫ßn: {e}")
        finally:
            cursor.close()
            conn.close()

    def load_modules(self):
        # Clear existing items in module_list_frame
        for widget in self.module_list_frame.winfo_children():
            widget.destroy()

        conn = None
        cursor = None
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            
            # X√≥a ƒëi·ªÅu ki·ªán WHERE ƒë·ªÉ l·∫•y t·∫•t c·∫£ h·ªçc ph·∫ßn
            query = """
                SELECT cm.module_id, cm.module_name, cm.credits, cm.coefficient, cm.periods, d.dept_abbr
                FROM course_modules cm
                LEFT JOIN departments d ON cm.dept_id = d.dept_id
            """
            cursor.execute(query)
            rows = cursor.fetchall()

            if not rows:
                CTkLabel(self.module_list_frame, text="Kh√¥ng c√≥ d·ªØ li·ªáu h·ªçc ph·∫ßn", 
                        font=("Helvetica", 14), text_color="gray").pack(pady=10)
                return

            # Create a row for each module
            for row in rows:
                module_id, name, credits, coefficient, periods, dept_abbr = row

                # Row frame for each module
                row_frame = CTkFrame(self.module_list_frame, fg_color="#F5F5F5", corner_radius=0)
                row_frame.pack(fill="x", pady=2)

                # Data labels
                CTkLabel(row_frame, text=module_id, font=("Helvetica", 12), 
                        text_color="black", width=80, anchor="center").pack(side="left", padx=5)
                CTkLabel(row_frame, text=name, font=("Helvetica", 12),
                        text_color="black", width=300, anchor="center").pack(side="left", padx=5)
                CTkLabel(row_frame, text=str(credits), font=("Helvetica", 12),
                        text_color="black", width=100, anchor="center").pack(side="left", padx=5)
                CTkLabel(row_frame, text=str(coefficient), font=("Helvetica", 12),
                        text_color="black", width=100, anchor="center").pack(side="left", padx=5)
                CTkLabel(row_frame, text=str(periods), font=("Helvetica", 12),
                        text_color="black", width=100, anchor="center").pack(side="left", padx=5)
                CTkLabel(row_frame, text=dept_abbr if dept_abbr else "N/A", font=("Helvetica", 12),
                        text_color="black", width=150, anchor="center").pack(side="left", padx=5)

                # Actions frame
                actions_frame = CTkFrame(row_frame, fg_color="transparent", width=150)
                actions_frame.pack(side="left", padx=5)

                # Edit button
                CTkButton(actions_frame, text="S·ª≠a", width=30, fg_color="#FFC107", hover_color="#E0A800", 
                        command=lambda m_id=module_id: self.edit_module(m_id)).pack(side="left", padx=2)

                # Delete button
                CTkButton(actions_frame, text="X√≥a", width=30, fg_color="#F44336", hover_color="#D32F2F", 
                        command=lambda m_id=module_id: self.delete_module(m_id)).pack(side="left", padx=2)

            # Force refresh
            self.module_list_frame.update_idletasks()
            
        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu h·ªçc ph·∫ßn: {e}")
        finally:
            if cursor:
                cursor.close()
            if conn:
                conn.close()


    def add_classes(self):
        # Create popup window
        add_window = CTkToplevel(self.window)
        add_window.title("Th√™m l·ªõp h·ªçc ph·∫ßn")
        add_window.resizable(False, False)

        # Set window size
        window_width = 500
        window_height = 350
        add_window.geometry(f"{window_width}x{window_height}")

        # Center the window
        screen_width = self.window.winfo_screenwidth()
        screen_height = self.window.winfo_screenheight()
        x_position = int((screen_width - window_width) / 2)
        y_position = int((screen_height - window_height) / 2)
        add_window.geometry(f"{window_width}x{window_height}+{x_position}+{y_position}")

        # Make modal
        add_window.transient(self.window)
        add_window.grab_set()

        form_frame = CTkFrame(add_window, fg_color="#F0F0F0", corner_radius=10)
        form_frame.pack(padx=20, pady=10, fill="both", expand=True)

        CTkLabel(form_frame, text="Th√™m l·ªõp h·ªçc ph·∫ßn", font=("Helvetica", 16, "bold"), text_color="black").pack(pady=5)

        # Semester Combobox
        semester_frame = CTkFrame(form_frame, fg_color="transparent")
        semester_frame.pack(fill="x", pady=2)
        CTkLabel(semester_frame, text="H·ªçc k·ª≥:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
        semester_combobox = CTkComboBox(semester_frame, values=self.get_semesters(), width=260, height=32)
        semester_combobox.pack(side="left")
        if self.get_semesters():
            semester_combobox.set(self.get_semesters()[0])

        # Module Combobox
        module_frame = CTkFrame(form_frame, fg_color="transparent")
        module_frame.pack(fill="x", pady=2)
        CTkLabel(module_frame, text="H·ªçc ph·∫ßn:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
        modules = self.get_modules()
        module_dict = {module.split(":")[1].strip(): module.split(":")[0].strip() for module in modules}
        module_names = list(module_dict.keys())
        module_combobox = CTkComboBox(module_frame, values=module_names, width=260, height=32)
        module_combobox.pack(side="left")
        if module_names:
            module_combobox.set(module_names[0])

        # Number of Classes
        num_classes_frame = CTkFrame(form_frame, fg_color="transparent")
        num_classes_frame.pack(fill="x", pady=2)
        CTkLabel(num_classes_frame, text="S·ªë l·ªõp:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
        num_classes_combobox = CTkComboBox(num_classes_frame, values=[str(i) for i in range(1, 9)], width=260, height=32)
        num_classes_combobox.pack(side="left")
        num_classes_combobox.set("1")

        # Number of Students
        num_students_frame = CTkFrame(form_frame, fg_color="transparent")
        num_students_frame.pack(fill="x", pady=2)
        CTkLabel(num_students_frame, text="S·ªë sinh vi√™n:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
        num_students_entry = CTkEntry(num_students_frame, placeholder_text="S·ªë sinh vi√™n", width=260, height=32)
        num_students_entry.pack(side="left")

        # Buttons
        button_frame = CTkFrame(form_frame, fg_color="transparent")
        button_frame.pack(pady=10)
        create_button = CTkButton(button_frame, text="T·∫°o", fg_color="#0085FF", width=100)
        create_button.pack(side="left", padx=5)
        CTkButton(button_frame, text="H·ªßy", fg_color="#6C757D", width=100, command=lambda: add_window.destroy()).pack(side="left", padx=5)

        # Save function
        def save_classes():
            semester_id = semester_combobox.get().strip()
            module_name = module_combobox.get().strip()
            num_classes_str = num_classes_combobox.get()
            num_students = num_students_entry.get().strip()

            if not all([semester_id, module_name, num_classes_str, num_students]):
                messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!", parent=add_window)
                return

            try:
                num_classes = int(num_classes_str)
                if not (1 <= num_classes <= 8):
                    raise ValueError
            except ValueError:
                messagebox.showerror("L·ªói", "S·ªë l·ªõp ph·∫£i t·ª´ 1 ƒë·∫øn 8!", parent=add_window)
                return

            try:
                num_students = int(num_students)
                if num_students < 0:
                    raise ValueError
            except ValueError:
                messagebox.showerror("L·ªói", "S·ªë sinh vi√™n ph·∫£i l√† s·ªë nguy√™n >= 0!", parent=add_window)
                return

            module_id = module_dict.get(module_name)
            if not module_id:
                messagebox.showerror("L·ªói", "H·ªçc ph·∫ßn kh√¥ng h·ª£p l·ªá!", parent=add_window)
                return

            conn = cursor = None
            try:
                conn = mysql.connector.connect(**DB_CONFIG)
                cursor = conn.cursor()

                # Ki·ªÉm tra s·ªë l·ªõp hi·ªán t·∫°i
                cursor.execute("SELECT class_id FROM classes WHERE semester_id = %s AND module_id = %s", (semester_id, module_id))
                existing_classes = cursor.fetchall()
                current_count = len(existing_classes)

                if current_count + num_classes > 8:
                    messagebox.showerror("L·ªói", f"T·ªëi ƒëa 8 l·ªõp/h·ªçc ph·∫ßn/k·ª≥! Hi·ªán c√≥ {current_count} l·ªõp.", parent=add_window)
                    return

                # L·∫•y chi ti·∫øt h·ªçc ph·∫ßn + vi·∫øt t·∫Øt khoa
                cursor.execute("""
                    SELECT cm.module_name, cm.credits, d.dept_abbr
                    FROM course_modules cm
                    JOIN departments d ON cm.dept_id = d.dept_id
                    WHERE cm.module_id = %s
                """, (module_id,))
                module_info = cursor.fetchone()
                if not module_info:
                    messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y th√¥ng tin h·ªçc ph·∫ßn!", parent=add_window)
                    return
                module_name_db, credits, dept_abbr = module_info

                # L·∫•y nƒÉm h·ªçc ƒë·∫ßy ƒë·ªß t·ª´ semester
                cursor.execute("SELECT year FROM semesters WHERE semester_id = %s", (semester_id,))
                year_result = cursor.fetchone()
                if not year_result:
                    messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y k·ª≥ h·ªçc!", parent=add_window)
                    return
                full_year = year_result[0]

                # L·∫•y t·∫•t c·∫£ class_id hi·ªán c√≥
                cursor.execute("SELECT class_id FROM classes")
                all_class_ids = {row[0] for row in cursor.fetchall()}

                # T·∫°o danh s√°ch l·ªõp
                class_names = []
                for i in range(num_classes):
                    group_num = i + 1
                    group_str = f"N{str(group_num).zfill(2)}"
                    class_name = f"{dept_abbr}{module_id}-LT-{credits}-{full_year}({group_str})"

                    if len(class_name) > 50:
                        messagebox.showerror("L·ªói", f"T√™n l·ªõp '{class_name}' qu√° d√†i!", parent=add_window)
                        return

                    # Sinh class_id
                    found_valid_id = False
                    for _ in range(1000):
                        class_id_candidate = f"CLS{random.randint(0, 99999):05}"
                        if class_id_candidate not in all_class_ids:
                            all_class_ids.add(class_id_candidate)
                            found_valid_id = True
                            break
                    if not found_valid_id:
                        messagebox.showerror("L·ªói", "Kh√¥ng t·∫°o ƒë∆∞·ª£c m√£ l·ªõp m·ªõi!", parent=add_window)
                        return

                    class_names.append((class_name, class_id_candidate, group_num))

                if not messagebox.askyesno("X√°c nh·∫≠n", f"T·∫°o {num_classes} l·ªõp h·ªçc ph·∫ßn:\n" + "\n".join(n[0] for n in class_names), parent=add_window):
                    return

                for class_name, class_id, _ in class_names:
                    cursor.execute("""
                        INSERT INTO classes (class_id, semester_id, module_id, class_name, num_students)
                        VALUES (%s, %s, %s, %s, %s)
                    """, (class_id, semester_id, module_id, class_name, num_students))
                conn.commit()
                messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ t·∫°o {num_classes} l·ªõp h·ªçc ph·∫ßn!", parent=add_window)

                # L√†m m·ªõi giao di·ªán
                self.semester_filter.set("T·∫•t c·∫£")
                self.module_filter.set("T·∫•t c·∫£")
                self.status_filter.set("T·∫•t c·∫£")
                self.load_classes()
                self.class_list_frame.update_idletasks()
                add_window.destroy()

            except mysql.connector.Error as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫°o l·ªõp h·ªçc ph·∫ßn: {e}", parent=add_window)
            finally:
                if cursor:
                    cursor.close()
                if conn:
                    conn.close()

        # G·∫Øn h√†m t·∫°o v√†o n√∫t
        create_button.configure(command=save_classes)


    def edit_class(self, class_id):
    # Load class data
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            cursor.execute("""
                SELECT c.semester_id, c.module_id, c.class_name, c.num_students
                FROM classes c
                WHERE c.class_id = %s
            """, (class_id,))
            class_data = cursor.fetchone()
            if not class_data:
                messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc!")
                return

            semester_id, module_id, class_name, num_students = class_data

        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu l·ªõp h·ªçc: {e}")
            return
        finally:
            cursor.close()
            conn.close()

        # Create popup window
        edit_window = CTkToplevel(self.window)
        edit_window.title("S·ª≠a th√¥ng tin l·ªõp")
        edit_window.resizable(False, False)

        # Set window size
        window_width = 500
        window_height = 350
        edit_window.geometry(f"{window_width}x{window_height}")

        # Center the window on the screen
        screen_width = self.window.winfo_screenwidth()
        screen_height = self.window.winfo_screenheight()
        x_position = int((screen_width - window_width) / 2)
        y_position = int((screen_height - window_height) / 2)
        edit_window.geometry(f"{window_width}x{window_height}+{x_position}+{y_position}")

        # Make window modal
        edit_window.transient(self.window)
        edit_window.grab_set()

        # Form frame
        form_frame = CTkFrame(edit_window, fg_color="#F0F0F0", corner_radius=10)
        form_frame.pack(padx=20, pady=10, fill="both", expand=True)

        # Title
        CTkLabel(form_frame, text="S·ª≠a th√¥ng tin l·ªõp", font=("Helvetica", 16, "bold"), text_color="black").pack(pady=5)

        # Semester Combobox
        semester_frame = CTkFrame(form_frame, fg_color="transparent")
        semester_frame.pack(fill="x", pady=2)
        CTkLabel(semester_frame, text="H·ªçc k·ª≥:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
        semester_combobox = CTkComboBox(semester_frame, values=self.get_semesters(), width=260, height=32)
        semester_combobox.pack(side="left")
        semester_combobox.set(semester_id)

        # Module Combobox (hi·ªÉn th·ªã module_name, gi√° tr·ªã l√† module_id)
        module_frame = CTkFrame(form_frame, fg_color="transparent")
        module_frame.pack(fill="x", pady=2)
        CTkLabel(module_frame, text="H·ªçc ph·∫ßn:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))

        # L·∫•y danh s√°ch h·ªçc ph·∫ßn
        modules = self.get_modules()  # modules c√≥ ƒë·ªãnh d·∫°ng ["MOD29934: L·∫≠p tr√¨nh Python", ...]
        module_dict = {module.split(":")[1].strip(): module.split(":")[0].strip() for module in modules}  # {module_name: module_id}
        module_names = list(module_dict.keys())  # Danh s√°ch t√™n h·ªçc ph·∫ßn ƒë·ªÉ hi·ªÉn th·ªã

        module_combobox = CTkComboBox(module_frame, values=module_names, width=260, height=32)
        module_combobox.pack(side="left")
        # T√¨m module_name t∆∞∆°ng ·ª©ng v·ªõi module_id
        for name, id in module_dict.items():
            if id == module_id:
                module_combobox.set(name)
                break

        # Class Name
        name_frame = CTkFrame(form_frame, fg_color="transparent")
        name_frame.pack(fill="x", pady=2)
        CTkLabel(name_frame, text="T√™n l·ªõp:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
        class_name_entry = CTkEntry(name_frame, placeholder_text="T√™n l·ªõp", width=260, height=32)
        class_name_entry.pack(side="left")
        class_name_entry.insert(0, class_name)

        # Number of Students
        num_students_frame = CTkFrame(form_frame, fg_color="transparent")
        num_students_frame.pack(fill="x", pady=2)
        CTkLabel(num_students_frame, text="S·ªë sinh vi√™n:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
        num_students_entry = CTkEntry(num_students_frame, placeholder_text="S·ªë sinh vi√™n", width=260, height=32)
        num_students_entry.pack(side="left")
        num_students_entry.insert(0, str(num_students))

        # Buttons
        button_frame = CTkFrame(form_frame, fg_color="transparent")
        button_frame.pack(pady=10)
        CTkButton(button_frame, text="L∆∞u", fg_color="#0085FF", width=100).pack(side="left", padx=5)
        CTkButton(button_frame, text="H·ªßy", fg_color="#6C757D", width=100, command=lambda: edit_window.destroy()).pack(side="left", padx=5)

        # Save function
        def save_class():
            new_semester_id = semester_combobox.get().strip()
            new_module_name = module_combobox.get().strip()
            new_class_name = class_name_entry.get().strip()
            new_num_students = num_students_entry.get().strip()

            # L·∫•y module_id t·ª´ module_name
            new_module_id = module_dict.get(new_module_name)
            if not new_module_id:
                messagebox.showerror("L·ªói", "H·ªçc ph·∫ßn kh√¥ng h·ª£p l·ªá!", parent=edit_window)
                return

            # Validation
            if not all([new_semester_id, new_module_id, new_class_name, new_num_students]):
                messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!", parent=edit_window)
                return

            try:
                new_num_students = int(new_num_students)
                if new_num_students < 0:
                    messagebox.showerror("L·ªói", "S·ªë sinh vi√™n ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 0!", parent=edit_window)
                    return
            except ValueError:
                messagebox.showerror("L·ªói", "S·ªë sinh vi√™n ph·∫£i l√† s·ªë nguy√™n!", parent=edit_window)
                return

            try:
                conn = mysql.connector.connect(**DB_CONFIG)
                cursor = conn.cursor()

                # Update class
                cursor.execute("UPDATE classes SET semester_id = %s, module_id = %s, class_name = %s, num_students = %s WHERE class_id = %s",
                            (new_semester_id, new_module_id, new_class_name, new_num_students, class_id))
                conn.commit()
                messagebox.showinfo("Th√†nh c√¥ng", "C·∫≠p nh·∫≠t th√¥ng tin l·ªõp th√†nh c√¥ng!", parent=edit_window)
                self.load_classes()
                self.class_list_frame.update_idletasks()
                edit_window.destroy()
            except mysql.connector.Error as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t l·ªõp h·ªçc: {e}", parent=edit_window)
            finally:
                cursor.close()
                conn.close()

        # Bind save function to "L∆∞u" button
        button_frame.winfo_children()[0].configure(command=save_class)

    def delete_class(self, class_id):
        if messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a l·ªõp h·ªçc ph·∫ßn n√†y kh√¥ng?\nL∆∞u √Ω: N·∫øu l·ªõp ƒë√£ ƒë∆∞·ª£c ph√¢n c√¥ng gi·∫£ng vi√™n, d·ªØ li·ªáu l∆∞∆°ng li√™n quan c≈©ng s·∫Ω b·ªã x√≥a."):
            conn = None
            cursor = None
            try:
                conn = mysql.connector.connect(**DB_CONFIG)
                cursor = conn.cursor()

                # X√≥a d·ªØ li·ªáu l∆∞∆°ng li√™n quan (s·∫Ω t·ª± ƒë·ªông x√≥a nh·ªù r√†ng bu·ªôc ON DELETE CASCADE trong b·∫£ng salaries)
                # X√≥a ph√¢n c√¥ng (s·∫Ω t·ª± ƒë·ªông x√≥a nh·ªù r√†ng bu·ªôc ON DELETE CASCADE trong b·∫£ng assignments)
                # X√≥a l·ªõp h·ªçc ph·∫ßn
                cursor.execute("DELETE FROM classes WHERE class_id = %s", (class_id,))
                conn.commit()
                messagebox.showinfo("Th√†nh c√¥ng", "X√≥a l·ªõp h·ªçc ph·∫ßn th√†nh c√¥ng!")
                self.load_classes()
                self.class_list_frame.update_idletasks()
            except mysql.connector.Error as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ x√≥a l·ªõp h·ªçc ph·∫ßn: {e}")
            finally:
                cursor.close()
                conn.close()

    def load_classes(self):
        # Clear existing items in class_list_frame
        for widget in self.class_list_frame.winfo_children():
            widget.destroy()

        # L·∫•y gi√° tr·ªã hi·ªán t·∫°i t·ª´ combobox
        semester_filter = self.semester_filter.get()
        module_filter = self.module_filter.get()
        status_filter = self.status_filter.get()

        conn = None
        cursor = None
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()

            # Ki·ªÉm tra d·ªØ li·ªáu trong c√°c b·∫£ng li√™n quan
            cursor.execute("SELECT semester_id FROM semesters")
            available_semesters = [row[0] for row in cursor.fetchall()]
            print(f"Debug: Available semesters: {available_semesters}")

            cursor.execute("SELECT module_id, module_name FROM course_modules")
            module_data = cursor.fetchall()
            available_modules = {row[1].strip(): row[0] for row in module_data}
            print(f"Debug: Available modules: {[row[1] for row in module_data]}")

            # Debug: Ki·ªÉm tra d·ªØ li·ªáu trong b·∫£ng class_enrollments
            cursor.execute("SELECT class_id, enrolled_students FROM class_enrollments")
            enrollments = cursor.fetchall()
            print(f"Debug: Data in class_enrollments: {enrollments}")

            query = """
                SELECT c.semester_id, m.module_name, c.class_id, c.class_name, c.num_students, 
                    COALESCE(ce.enrolled_students, 0) as enrolled_students, t.full_name
                FROM classes c
                JOIN semesters s ON c.semester_id = s.semester_id
                JOIN course_modules m ON c.module_id = m.module_id
                LEFT JOIN class_enrollments ce ON c.class_id = ce.class_id 
                LEFT JOIN assignments a ON c.class_id = a.class_id
                LEFT JOIN teachers t ON a.teacher_id = t.teacher_id
                WHERE 1=1
            """
            params = []

            print(f"Debug: Filter values - Semester: {semester_filter}, Module: {module_filter}, Status: {status_filter}")

            if semester_filter != "T·∫•t c·∫£":
                if semester_filter in available_semesters:
                    query += " AND c.semester_id = %s"
                    params.append(semester_filter)
                else:
                    CTkLabel(self.class_list_frame, text=f"Kh√¥ng c√≥ d·ªØ li·ªáu l·ªõp h·ªçc cho k·ª≥ h·ªçc {semester_filter}", font=("Helvetica", 14), text_color="gray").pack(pady=10)
                    print(f"Debug: No data for semester {semester_filter}")
                    return

            if module_filter != "T·∫•t c·∫£":
                if module_filter.strip() in available_modules:
                    query += " AND m.module_name = %s"
                    params.append(module_filter.strip())
                else:
                    CTkLabel(self.class_list_frame, text=f"Kh√¥ng c√≥ d·ªØ li·ªáu l·ªõp h·ªçc cho h·ªçc ph·∫ßn {module_filter}", font=("Helvetica", 14), text_color="gray").pack(pady=10)
                    print(f"Debug: No data for module {module_filter}")
                    return

            if status_filter == "ƒê√£ ph√¢n c√¥ng":
                query += " AND a.teacher_id IS NOT NULL"
            elif status_filter == "Ch∆∞a ph√¢n c√¥ng":
                query += " AND a.teacher_id IS NULL"

            print(f"Debug: Executing query: {query} with params: {params}")
            cursor.execute(query, params)
            rows = cursor.fetchall()

            print(f"Debug: Number of rows fetched: {len(rows)}")
            print(f"Debug: Fetched rows: {rows}")

            if not rows:
                CTkLabel(self.class_list_frame, text="Kh√¥ng c√≥ d·ªØ li·ªáu l·ªõp h·ªçc", font=("Helvetica", 14), text_color="gray").pack(pady=10)
                print("Debug: No data found")
                return

            # Create a row for each class
            for idx, row in enumerate(rows):
                semester_id, module_name, class_id, class_name, num_students, enrolled_students, teacher_name = row
                print(f"Debug: Row {idx+1} - Class ID: {class_id}, Enrolled Students: {enrolled_students}")

                # Row frame for each class
                row_frame = CTkFrame(self.class_list_frame, fg_color="#F5F5F5" if idx % 2 else "#FFFFFF", corner_radius=0)
                row_frame.pack(fill="x", pady=2)

                # Data labels
                CTkLabel(row_frame, text=semester_id, font=("Helvetica", 12), text_color="black", width=70, anchor="center").pack(side="left", padx=5)
                CTkLabel(row_frame, text=module_name, font=("Helvetica", 12), text_color="black", width=150, anchor="center").pack(side="left", padx=5)
                CTkLabel(row_frame, text=class_id, font=("Helvetica", 12), text_color="black", width=70, anchor="center").pack(side="left", padx=5)
                CTkLabel(row_frame, text=class_name, font=("Helvetica", 12), text_color="black", width=220, anchor="center").pack(side="left", padx=5)
                CTkLabel(row_frame, text=str(num_students), font=("Helvetica", 12), text_color="black", width=100, anchor="center").pack(side="left", padx=5)
                CTkLabel(row_frame, text=str(enrolled_students) if enrolled_students is not None else "0", font=("Helvetica", 12), text_color="black", width=120, anchor="center").pack(side="left", padx=5)
                CTkLabel(row_frame, text=teacher_name if teacher_name else "Ch∆∞a ph√¢n c√¥ng", font=("Helvetica", 12), text_color="black", width=150, anchor="center").pack(side="left", padx=5)

                # Actions frame
                actions_frame = CTkFrame(row_frame, fg_color="transparent", width=200)
                actions_frame.pack(side="left", padx=5)

                CTkButton(actions_frame, text="S·ª≠a", width=80, fg_color="#FFC107", hover_color="#E0A800", 
                        command=lambda c_id=class_id: self.edit_class(c_id)).pack(side="left", padx=2)

                CTkButton(actions_frame, text="X√≥a", width=80, fg_color="#F44336", hover_color="#D32F2F", 
                        command=lambda c_id=class_id: self.delete_class(c_id)).pack(side="left", padx=2)

        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu l·ªõp h·ªçc: {e}")
            print(f"Debug: Database error: {e}")
        finally:
            if cursor:
                cursor.close()
            if conn:
                conn.close()

        # L√†m m·ªõi giao di·ªán
        print("Debug: Refreshing class_list_frame")
        self.class_list_frame.update_idletasks()

    def load_salaries(self):
        try:
            teacher = self.salary_teacher_combobox.get()
            semester = self.salary_semester.get().strip()
            teacher_id = teacher.split(":")[0] if teacher and teacher != "Kh√¥ng c√≥ gi√°o vi√™n" and teacher != "L·ªói t·∫£i gi√°o vi√™n" else None
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            query = """
                SELECT t.full_name, cm.module_name, s.salary_amount, s.semester, s.calculated_at
                FROM salaries s
                JOIN teachers t ON s.teacher_id = t.teacher_id
                JOIN classes c ON s.class_id = c.class_id
                JOIN course_modules cm ON c.module_id = cm.module_id
                WHERE t.dept_id = %s
            """
            params = [self.user['dept_id']]
            if teacher_id:
                query += " AND s.teacher_id = %s"
                params.append(teacher_id)
            if semester:
                query += " AND s.semester = %s"
                params.append(semester)
            cursor.execute(query, params)
            for item in self.salary_tree.get_children():
                self.salary_tree.delete(item)
            rows = cursor.fetchall()
            if not rows:
                messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ d·ªØ li·ªáu l∆∞∆°ng")
            for row in rows:
                self.salary_tree.insert("", "end", values=row)
        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu l∆∞∆°ng: {e}")
        finally:
            cursor.close()
            conn.close()

    def reset_salary_fields(self):
        self.salary_teacher_combobox.set(self.get_teachers()[0] if self.get_teachers() else "")
        self.salary_semester.delete(0, END)
        self.salary_semester.configure(placeholder_text="H·ªçc k·ª≥ (v√≠ d·ª•: 2025-1)")

    def logout(self):
        if messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t?"):
            self.window.destroy()

            import os
            os.system("python login_view.py")



    def reset_teacher_fields(self):
        # L√†m tr·ªëng c√°c tr∆∞·ªùng text
        self.teacher_name.delete(0, END)
        self.teacher_name.configure(placeholder_text="H·ªç t√™n")
        
        # ƒê·∫∑t ng√†y sinh v·ªÅ ng√†y hi·ªán t·∫°i (26/05/2025)
        current_date = datetime.now().strftime('%Y-%m-%d')  # L·∫•y ng√†y hi·ªán t·∫°i theo ƒë·ªãnh d·∫°ng YYYY-MM-DD
        self.date_of_birth.delete(0, END)
        self.date_of_birth.insert(0, current_date)
        
        self.phone.delete(0, END)
        self.phone.configure(placeholder_text="ƒêi·ªán tho·∫°i")
        
        self.email.delete(0, END)
        self.email.configure(placeholder_text="Email")
        
        # ƒê·∫∑t combobox khoa v·ªÅ gi√° tr·ªã ƒë·∫ßu ti√™n
        departments = self.get_departments()
        self.dept_combobox.set(departments[0] if departments else "")
        
        # ƒê·∫∑t combobox b·∫±ng c·∫•p v·ªÅ "Th·∫°c sƒ©" (gi·∫£ ƒë·ªãnh l√† gi√° tr·ªã c√≥ degree_name l√† "Th·∫°c sƒ©")
        degrees = self.get_degrees()
        selected_degree = ""
        for degree in degrees:
            if "Th·∫°c sƒ©" in degree:
                selected_degree = degree
                break
        if not selected_degree and degrees:
            selected_degree = degrees[0]  # N·∫øu kh√¥ng t√¨m th·∫•y "Th·∫°c sƒ©", l·∫•y gi√° tr·ªã ƒë·∫ßu ti√™n
        self.degree_combobox.set(selected_degree)
        self.update_teacher_coefficient(None)  # C·∫≠p nh·∫≠t h·ªá s·ªë d·ª±a tr√™n b·∫±ng c·∫•p "Th·∫°c sƒ©"
        
        # B·ªè ch·ªçn d√≤ng trong b·∫£ng teacher_tree
        for item in self.teacher_tree.selection():
            self.teacher_tree.selection_remove(item)
    

    def get_age_distribution(self):
        """L·∫•y ph√¢n b·ªë ƒë·ªô tu·ªïi c·ªßa gi√°o vi√™n."""
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            current_year = datetime.now().year
            query = """
                SELECT YEAR(date_of_birth) 
                FROM teachers 
                WHERE date_of_birth IS NOT NULL
            """
            cursor.execute(query)
            ages = []
            for row in cursor.fetchall():
                birth_year = row[0]
                if birth_year:
                    age = current_year - birth_year
                    ages.append(age)

            # Ph√¢n nh√≥m tu·ªïi
            bins = [20, 30, 40, 50, 60, 100]  # Nh√≥m tu·ªïi: 20-30, 30-40, 40-50, 50-60, 60+
            labels = ["20-30", "30-40", "40-50", "50-60", "60+"]
            distribution = [0] * (len(bins) - 1)
            for age in ages:
                for i in range(len(bins) - 1):
                    if bins[i] <= age < bins[i + 1]:
                        distribution[i] += 1
                        break

            return labels, distribution
        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ƒë·ªô tu·ªïi: {e}")
            return [], []
        finally:
            cursor.close()
            conn.close()

    def get_dept_distribution(self):
        """L·∫•y ph√¢n b·ªë gi√°o vi√™n theo khoa."""
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            query = """
                SELECT d.dept_name, COUNT(t.teacher_id) 
                FROM departments d 
                LEFT JOIN teachers t ON d.dept_id = t.dept_id
                GROUP BY d.dept_id, d.dept_name
            """
            cursor.execute(query)
            labels = []
            data = []
            for row in cursor.fetchall():
                dept_name, count = row
                labels.append(dept_name)
                data.append(count)

            return labels, data
        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu khoa: {e}")
            return [], []
        finally:
            cursor.close()
            conn.close()

    def get_degree_distribution(self):
        """L·∫•y ph√¢n b·ªë gi√°o vi√™n theo b·∫±ng c·∫•p."""
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            query = """
                SELECT d.degree_name, COUNT(t.teacher_id) 
                FROM degrees d 
                LEFT JOIN teachers t ON d.degree_id = t.degree_id
                GROUP BY d.degree_id, d.degree_name
            """
            cursor.execute(query)
            labels = []
            data = []
            for row in cursor.fetchall():
                degree_name, count = row
                labels.append(degree_name)
                data.append(count)

            return labels, data
        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu b·∫±ng c·∫•p: {e}")
            return [], []
        finally:
            cursor.close()
            conn.close()


    def get_years(self):
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            cursor.execute("SELECT DISTINCT year FROM semesters")
            years = [row[0] for row in cursor.fetchall()]
            return years if years else ["Kh√¥ng c√≥ nƒÉm h·ªçc"]
        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i danh s√°ch nƒÉm h·ªçc: {e}")
            return ["L·ªói t·∫£i nƒÉm h·ªçc"]
        finally:
            cursor.close()
            conn.close()

    def add_semester(self):
        # Create popup window
        add_window = CTkToplevel(self.window)
        add_window.title("Th√™m k·ª≥ h·ªçc m·ªõi")
        add_window.resizable(False, False)

        # Set window size
        window_width = 450
        window_height = 300
        add_window.geometry(f"{window_width}x{window_height}")

        # Center the window on the screen
        screen_width = self.window.winfo_screenwidth()
        screen_height = self.window.winfo_screenheight()
        x_position = int((screen_width - window_width) / 2)
        y_position = int((screen_height - window_height) / 2)
        add_window.geometry(f"{window_width}x{window_height}+{x_position}+{y_position}")

        # Make window modal
        add_window.transient(self.window)
        add_window.grab_set()

        # Form frame
        form_frame = CTkFrame(add_window, fg_color="#F0F0F0", corner_radius=10)
        form_frame.pack(padx=20, pady=10, fill="both", expand=True)

        # Title
        CTkLabel(form_frame, text="Th√™m k·ª≥ h·ªçc m·ªõi", font=("Helvetica", 16, "bold"), text_color="black").pack(pady=5)

        # Semester Name (Combobox: K·ª≥ 1, K·ª≥ 2, ..., K·ª≥ 5)
        name_frame = CTkFrame(form_frame, fg_color="transparent")
        name_frame.pack(fill="x", pady=2)
        CTkLabel(name_frame, text="T√™n k·ª≥:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
        semester_name_combobox = CTkComboBox(name_frame, values=["H·ªçc k·ª≥ 1", "H·ªçc k·ª≥ 2", "H·ªçc k·ª≥ 3", "H·ªçc k·ª≥ 4", "H·ªçc k·ª≥ 5"], width=240, height=32)  # Gi·∫£m width t·ª´ 300 xu·ªëng 260
        semester_name_combobox.pack(side="left")
        semester_name_combobox.set("H·ªçc k·ª≥ 1")

        # Academic Year (Combobox: 10 nƒÉm tr∆∞·ªõc ƒë·∫øn hi·ªán t·∫°i)
        year_frame = CTkFrame(form_frame, fg_color="transparent")
        year_frame.pack(fill="x", pady=2)
        CTkLabel(year_frame, text="NƒÉm h·ªçc:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
        current_year = 2020  # B·∫Øt ƒë·∫ßu t·ª´ 2010
        academic_years = [f"{y}-{y+1}" for y in range(current_year, 2031)]  # K·∫øt th√∫c ·ªü 2040
        semester_year_combobox = CTkComboBox(year_frame, values=academic_years, width=240, height=32)
        semester_year_combobox.pack(side="left")
        semester_year_combobox.set("2025-2026")  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh

        # Start Date (Calendar)
        start_date_frame = CTkFrame(form_frame, fg_color="transparent")
        start_date_frame.pack(fill="x", pady=2)
        CTkLabel(start_date_frame, text="Ng√†y b·∫Øt ƒë·∫ßu:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
        start_date_entry = CTkEntry(start_date_frame, placeholder_text="YYYY-MM-DD", width=210, height=32)  # Gi·∫£m width t·ª´ 270 xu·ªëng 210
        start_date_entry.pack(side="left")
        start_date_entry.insert(0, "2025-01-01")
        calendar_button_start = CTkButton(start_date_frame, text="üìÖ", width=30, height=32, fg_color="#4A4A4A", hover_color="#666666",
                                        command=lambda: self.open_calendar(start_date_entry))
        calendar_button_start.pack(side="left", padx=5)

        # End Date (Calendar)
        end_date_frame = CTkFrame(form_frame, fg_color="transparent")
        end_date_frame.pack(fill="x", pady=2)
        CTkLabel(end_date_frame, text="Ng√†y k·∫øt th√∫c:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
        end_date_entry = CTkEntry(end_date_frame, placeholder_text="YYYY-MM-DD", width=210, height=32)  # Gi·∫£m width t·ª´ 270 xu·ªëng 210
        end_date_entry.pack(side="left")
        end_date_entry.insert(0, "2025-12-31")
        calendar_button_end = CTkButton(end_date_frame, text="üìÖ", width=30, height=32, fg_color="#4A4A4A", hover_color="#666666",
                                        command=lambda: self.open_calendar(end_date_entry))
        calendar_button_end.pack(side="left", padx=5)

        # Buttons
        button_frame = CTkFrame(form_frame, fg_color="transparent")
        button_frame.pack(pady=10)
        CTkButton(button_frame, text="Th√™m", fg_color="#0085FF", width=100).pack(side="left", padx=5)
        CTkButton(button_frame, text="H·ªßy", fg_color="#6C757D", width=100, command=lambda: add_window.destroy()).pack(side="left", padx=5)

        # Save function
        def save_semester():
            semester_name = semester_name_combobox.get().strip()
            year = semester_year_combobox.get().strip()
            start_date_str = start_date_entry.get().strip()
            end_date_str = end_date_entry.get().strip()

            # Validation: Check if all fields are filled
            if not all([semester_name, year, start_date_str, end_date_str]):
                messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!", parent=add_window)
                return

            # Parse dates
            try:
                start_date = datetime.strptime(start_date_str, '%Y-%m-%d').date()
                end_date = datetime.strptime(end_date_str, '%Y-%m-%d').date()
            except ValueError:
                messagebox.showerror("L·ªói", "Ng√†y th√°ng kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p theo ƒë·ªãnh d·∫°ng YYYY-MM-DD!", parent=add_window)
                return

            # Validation: Start date must be before end date
            if start_date >= end_date:
                messagebox.showerror("L·ªói", "Ng√†y b·∫Øt ƒë·∫ßu ph·∫£i tr∆∞·ªõc ng√†y k·∫øt th√∫c!", parent=add_window)
                return

            # Validation: Dates must belong to the academic year
            try:
                start_year, end_year = map(int, year.split('-'))
            except ValueError:
                messagebox.showerror("L·ªói", "NƒÉm h·ªçc kh√¥ng h·ª£p l·ªá!", parent=add_window)
                return

            if start_date.year != start_year:
                messagebox.showerror("L·ªói", f"Ng√†y b·∫Øt ƒë·∫ßu ph·∫£i thu·ªôc nƒÉm {start_year}!", parent=add_window)
                return
            if end_date.year not in [start_year, end_year]:
                messagebox.showerror("L·ªói", f"Ng√†y k·∫øt th√∫c ph·∫£i thu·ªôc nƒÉm {start_year} ho·∫∑c {end_year}!", parent=add_window)
                return

            # Validation: Check for overlapping semesters
            try:
                conn = mysql.connector.connect(**DB_CONFIG)
                cursor = conn.cursor()
                cursor.execute("""
                    SELECT semester_id FROM semesters
                    WHERE (start_date <= %s AND end_date >= %s)
                    OR (start_date <= %s AND end_date >= %s)
                    OR (%s <= start_date AND %s >= end_date)
                """, (end_date, start_date, end_date, start_date, start_date, end_date))
                if cursor.fetchone():
                    messagebox.showerror("L·ªói", "Th·ªùi gian k·ª≥ h·ªçc n√†y tr√πng v·ªõi m·ªôt k·ª≥ h·ªçc kh√°c!", parent=add_window)
                    return

                # Generate semester ID
                semester_num = semester_name.split()[-1]  # L·∫•y s·ªë k·ª≥ t·ª´ "K·ª≥ 1", "K·ª≥ 2", ...
                year_suffix = year[-2:]  # L·∫•y 2 s·ªë cu·ªëi c·ªßa nƒÉm
                semester_id = f"HK{semester_num}-{year_suffix}"

                # Check if semester ID already exists
                cursor.execute("SELECT semester_id FROM semesters WHERE semester_id = %s", (semester_id,))
                if cursor.fetchone():
                    messagebox.showerror("L·ªói", f"K·ª≥ h·ªçc {semester_id} ƒë√£ t·ªìn t·∫°i!", parent=add_window)
                    return

                # Insert new semester
                cursor.execute("INSERT INTO semesters (semester_id, semester_name, year, start_date, end_date) VALUES (%s, %s, %s, %s, %s)",
                            (semester_id, semester_name, year, start_date, end_date))
                conn.commit()
                messagebox.showinfo("Th√†nh c√¥ng", f"Th√™m k·ª≥ h·ªçc th√†nh c√¥ng v·ªõi m√£ {semester_id}", parent=add_window)
                self.load_semesters()
                self.semester_list_frame.update_idletasks()
                add_window.destroy()
            except mysql.connector.Error as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ th√™m k·ª≥ h·ªçc: {e}", parent=add_window)
            finally:
                cursor.close()
                conn.close()

        # Bind save function to "Th√™m" button
        button_frame.winfo_children()[0].configure(command=save_semester)

    def edit_semester(self, semester_id):
        # Load semester data
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            cursor.execute("""
                SELECT semester_id, semester_name, year, start_date, end_date
                FROM semesters
                WHERE semester_id = %s
            """, (semester_id,))
            semester_data = cursor.fetchone()
            if not semester_data:
                messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y k·ª≥ h·ªçc!")
                return

            _, semester_name, year, start_date, end_date = semester_data

            # Create popup window
            edit_window = CTkToplevel(self.window)
            edit_window.title("S·ª≠a k·ª≥ h·ªçc")
            edit_window.resizable(False, False)

            # Set window size
            window_width = 450
            window_height = 300
            edit_window.geometry(f"{window_width}x{window_height}")

            # Center the window on the screen
            screen_width = self.window.winfo_screenwidth()
            screen_height = self.window.winfo_screenheight()
            x_position = int((screen_width - window_width) / 2)
            y_position = int((screen_height - window_height) / 2)
            edit_window.geometry(f"{window_width}x{window_height}+{x_position}+{y_position}")

            # Make window modal
            edit_window.transient(self.window)
            edit_window.grab_set()

            # Form frame
            form_frame = CTkFrame(edit_window, fg_color="#F0F0F0", corner_radius=10)
            form_frame.pack(padx=20, pady=10, fill="both", expand=True)

            # Title
            CTkLabel(form_frame, text="S·ª≠a k·ª≥ h·ªçc", font=("Helvetica", 16, "bold"), text_color="black").pack(pady=5)

            # Semester Name (Combobox: K·ª≥ 1, K·ª≥ 2, ..., K·ª≥ 5)
            name_frame = CTkFrame(form_frame, fg_color="transparent")
            name_frame.pack(fill="x", pady=2)
            CTkLabel(name_frame, text="T√™n k·ª≥:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
            semester_name_combobox = CTkComboBox(name_frame, values=["H·ªçc k·ª≥ 1", "H·ªçc k·ª≥ 2", "H·ªçc k·ª≥ 3", "H·ªçc k·ª≥ 4", "H·ªçc k·ª≥ 5"], width=240, height=32)  # Gi·∫£m width t·ª´ 300 xu·ªëng 260
            semester_name_combobox.pack(side="left")
            semester_name_combobox.set(semester_name)

            # Academic Year (Combobox: 10 nƒÉm tr∆∞·ªõc ƒë·∫øn hi·ªán t·∫°i)
            year_frame = CTkFrame(form_frame, fg_color="transparent")
            year_frame.pack(fill="x", pady=2)
            CTkLabel(year_frame, text="NƒÉm h·ªçc:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
            current_year = 2020  # B·∫Øt ƒë·∫ßu t·ª´ 2010
            academic_years = [f"{y}-{y+1}" for y in range(current_year, 2031)]  # K·∫øt th√∫c ·ªü 2040
            semester_year_combobox = CTkComboBox(year_frame, values=academic_years, width=240, height=32)
            semester_year_combobox.pack(side="left")
            semester_year_combobox.set(year)  # Set gi√° tr·ªã hi·ªán t·∫°i c·ªßa k·ª≥ h·ªçc

            # Start Date (Calendar)
            start_date_frame = CTkFrame(form_frame, fg_color="transparent")
            start_date_frame.pack(fill="x", pady=2)
            CTkLabel(start_date_frame, text="Ng√†y b·∫Øt ƒë·∫ßu:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
            start_date_entry = CTkEntry(start_date_frame, placeholder_text="YYYY-MM-DD", width=210, height=32)  # Gi·∫£m width t·ª´ 270 xu·ªëng 210
            start_date_entry.pack(side="left")
            start_date_entry.insert(0, start_date.strftime('%Y-%m-%d'))
            calendar_button_start = CTkButton(start_date_frame, text="üìÖ", width=30, height=32, fg_color="#4A4A4A", hover_color="#666666",
                                            command=lambda: self.open_calendar(start_date_entry))
            calendar_button_start.pack(side="left", padx=5)

            # End Date (Calendar)
            end_date_frame = CTkFrame(form_frame, fg_color="transparent")
            end_date_frame.pack(fill="x", pady=2)
            CTkLabel(end_date_frame, text="Ng√†y k·∫øt th√∫c:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
            end_date_entry = CTkEntry(end_date_frame, placeholder_text="YYYY-MM-DD", width=210, height=32)  # Gi·∫£m width t·ª´ 270 xu·ªëng 210
            end_date_entry.pack(side="left")
            end_date_entry.insert(0, end_date.strftime('%Y-%m-%d'))
            calendar_button_end = CTkButton(end_date_frame, text="üìÖ", width=30, height=32, fg_color="#4A4A4A", hover_color="#666666",
                                            command=lambda: self.open_calendar(end_date_entry))
            calendar_button_end.pack(side="left", padx=5)

            # Buttons
            button_frame = CTkFrame(form_frame, fg_color="transparent")
            button_frame.pack(pady=10)
            CTkButton(button_frame, text="L∆∞u", fg_color="#0085FF", width=100).pack(side="left", padx=5)
            CTkButton(button_frame, text="H·ªßy", fg_color="#6C757D", width=100, command=lambda: edit_window.destroy()).pack(side="left", padx=5)

            # Save function
            def save_semester():
                new_semester_name = semester_name_combobox.get().strip() 
                new_year = semester_year_combobox.get().strip()
                new_start_date_str = start_date_entry.get().strip()
                new_end_date_str = end_date_entry.get().strip()

                try:
                    conn = mysql.connector.connect(**DB_CONFIG)
                    cursor = conn.cursor()

                    # 1. Ki·ªÉm tra t·ªìn t·∫°i semester_id m·ªõi
                    semester_num = new_semester_name.split()[-1]  # L·∫•y s·ªë t·ª´ "H·ªçc k·ª≥ X"
                    year_suffix = new_year[-2:]  # 2 s·ªë cu·ªëi c·ªßa nƒÉm
                    new_semester_id = f"HK{semester_num}-{year_suffix}"

                    # 2. Ki·ªÉm tra tr√πng l·∫∑p 
                    if new_semester_id != semester_id:
                        cursor.execute("""
                            SELECT 1 FROM semesters 
                            WHERE semester_id = %s
                        """, (new_semester_id,))
                        if cursor.fetchone():
                            messagebox.showerror("L·ªói", "M√£ k·ª≥ h·ªçc m·ªõi ƒë√£ t·ªìn t·∫°i!", parent=edit_window)
                            return

                    # 3. Th√™m semester_id m·ªõi tr∆∞·ªõc
                    cursor.execute("""
                        INSERT INTO semesters (semester_id, semester_name, year, start_date, end_date)
                        VALUES (%s, %s, %s, %s, %s)
                    """, (new_semester_id, new_semester_name, new_year, new_start_date_str, new_end_date_str))

                    # 4. C·∫≠p nh·∫≠t classes v·ªÅ semester_id m·ªõi
                    cursor.execute("""
                        UPDATE classes 
                        SET semester_id = %s
                        WHERE semester_id = %s
                    """, (new_semester_id, semester_id))

                    # 5. X√≥a semester_id c≈©
                    if new_semester_id != semester_id:
                        cursor.execute("DELETE FROM semesters WHERE semester_id = %s", (semester_id,))

                    conn.commit()
                    messagebox.showinfo("Th√†nh c√¥ng", "C·∫≠p nh·∫≠t h·ªçc k·ª≥ th√†nh c√¥ng!", parent=edit_window)
                    self.load_semesters()
                    edit_window.destroy()

                except mysql.connector.Error as e:
                    conn.rollback()
                    messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t k·ª≥ h·ªçc: {e}", parent=edit_window)
                finally:
                    cursor.close()
                    conn.close()


            # Bind save function to "L∆∞u" button
            button_frame.winfo_children()[0].configure(command=save_semester)

        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu k·ª≥ h·ªçc: {e}")
        finally:
            cursor.close()
            conn.close()

    def delete_semester(self, semester_id):
        if messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a k·ª≥ h·ªçc n√†y?"):
            conn = None
            cursor = None
            try:
                conn = mysql.connector.connect(**DB_CONFIG)
                cursor = conn.cursor()
                # Ki·ªÉm tra xem k·ª≥ h·ªçc c√≥ l·ªõp h·ªçc li√™n quan kh√¥ng
                cursor.execute("SELECT 1 FROM classes WHERE semester_id = %s LIMIT 1", (semester_id,))
                if cursor.fetchone():
                    messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ x√≥a k·ª≥ h·ªçc v√¨ c√≥ l·ªõp h·ªçc li√™n quan")
                    return
                # Th·ª±c hi·ªán x√≥a
                cursor.execute("DELETE FROM semesters WHERE semester_id = %s", (semester_id,))
                conn.commit()
                messagebox.showinfo("Th√†nh c√¥ng", "X√≥a k·ª≥ h·ªçc th√†nh c√¥ng")
                self.load_semesters()
                self.semester_list_frame.update_idletasks()
            except mysql.connector.Error as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ x√≥a k·ª≥ h·ªçc: {str(e)}")
            finally:
                if cursor:
                    cursor.close()
                if conn:
                    conn.close()

    def load_semesters(self):
        # Clear existing items in semester_list_frame
        for widget in self.semester_list_frame.winfo_children():
            widget.destroy()

        conn = None
        cursor = None
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            query = """
                SELECT semester_id, semester_name, year, start_date, end_date
                FROM semesters
            """
            cursor.execute(query)
            rows = cursor.fetchall()

            if not rows:
                CTkLabel(self.semester_list_frame, text="Kh√¥ng c√≥ d·ªØ li·ªáu k·ª≥ h·ªçc", font=("Helvetica", 14), text_color="gray").pack(pady=10)
                return

            # Create a row for each semester
            for row in rows:
                semester_id, semester_name, year, start_date, end_date = row

                # Row frame for each semester
                row_frame = CTkFrame(self.semester_list_frame, fg_color="#F5F5F5", corner_radius=0)
                row_frame.pack(fill="x", pady=2)

                # Data labels (kh·ªõp v·ªõi heading)
                CTkLabel(row_frame, text=semester_id, font=("Helvetica", 12), text_color="black", width=150, anchor="center").pack(side="left", padx=5)
                CTkLabel(row_frame, text=semester_name, font=("Helvetica", 12), text_color="black", width=200, anchor="center").pack(side="left", padx=5)
                CTkLabel(row_frame, text=year, font=("Helvetica", 12), text_color="black", width=150, anchor="center").pack(side="left", padx=5)
                CTkLabel(row_frame, text=start_date.strftime('%Y-%m-%d'), font=("Helvetica", 12), text_color="black", width=200, anchor="center").pack(side="left", padx=5)
                CTkLabel(row_frame, text=end_date.strftime('%Y-%m-%d'), font=("Helvetica", 12), text_color="black", width=200, anchor="center").pack(side="left", padx=5)

                # Actions frame
                actions_frame = CTkFrame(row_frame, fg_color="transparent", width=150)
                actions_frame.pack(side="left", padx=5)

                # Edit button
                CTkButton(actions_frame, text="S·ª≠a", width=50, fg_color="#FFC107", hover_color="#E0A800", 
                        command=lambda s_id=semester_id: self.edit_semester(s_id)).pack(side="left", padx=5)

                # Delete button
                CTkButton(actions_frame, text="X√≥a", width=50, fg_color="#F44336", hover_color="#D32F2F", 
                        command=lambda s_id=semester_id: self.delete_semester(s_id)).pack(side="left", padx=5)

        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu k·ª≥ h·ªçc: {e}")
        finally:
            if cursor:
                cursor.close()
            if conn:
                conn.close()

        # L√†m m·ªõi giao di·ªán
        self.semester_list_frame.update_idletasks()
        
    
    def get_classes(self):
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            cursor.execute("""
                SELECT c.class_id, m.module_name 
                FROM classes c 
                JOIN course_modules m ON c.module_id = m.module_id
            """)
            classes = [f"{row[0]}: {row[1]}" for row in cursor.fetchall()]
            return classes if classes else ["Kh√¥ng c√≥ l·ªõp h·ªçc"]
        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i danh s√°ch l·ªõp h·ªçc: {e}")
            return ["L·ªói t·∫£i l·ªõp h·ªçc"]
        finally:
            cursor.close()
            conn.close()

    # def add_assignment(self):
    #     selected = self.assignment_tree.selection()
    #     if selected:
    #         messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng reset form tr∆∞·ªõc khi th√™m m·ªõi!")
    #         return

    #     class_info = self.assignment_class_combobox.get()
    #     teacher = self.assignment_teacher_combobox.get()

    #     if not all([class_info, teacher]):
    #         messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß th√¥ng tin")
    #         return

    #     class_id = class_info.split(":")[0]
    #     teacher_id = teacher.split(":")[0]

    #     try:
    #         conn = mysql.connector.connect(**DB_CONFIG)
    #         cursor = conn.cursor()
    #         cursor.execute("SELECT assignment_id FROM assignments WHERE class_id = %s", (class_id,))
    #         if cursor.fetchone():
    #             messagebox.showerror("L·ªói", "L·ªõp h·ªçc n√†y ƒë√£ ƒë∆∞·ª£c ph√¢n c√¥ng!")
    #             return

    #         while True:
    #             random_num = random.randint(0, 99999)
    #             assignment_id = f"ASN{str(random_num).zfill(5)}"
    #             cursor.execute("SELECT assignment_id FROM assignments WHERE assignment_id = %s", (assignment_id,))
    #             if not cursor.fetchone():
    #                 break

    #         cursor.execute("INSERT INTO assignments (assignment_id, class_id, teacher_id) VALUES (%s, %s, %s)",
    #                     (assignment_id, class_id, teacher_id))
    #         conn.commit()
    #         messagebox.showinfo("Th√†nh c√¥ng", f"Ph√¢n c√¥ng th√†nh c√¥ng v·ªõi m√£ {assignment_id}")
    #         self.reset_assignment_fields()
    #         self.load_assignments()
    #     except mysql.connector.Error as e:
    #         messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ th√™m ph√¢n c√¥ng: {e}")
    #     finally:
    #         cursor.close()
    #         conn.close()

    # def edit_assignment(self):
    #     selected_item = self.assignment_tree.selection()
    #     if not selected_item:
    #         messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn ph√¢n c√¥ng ƒë·ªÉ s·ª≠a!")
    #         return

    #     item = self.assignment_tree.item(selected_item)
    #     assignment_id = item["values"][0]
    #     class_info = self.assignment_class_combobox.get()
    #     teacher = self.assignment_teacher_combobox.get()

    #     if not all([class_info, teacher]):
    #         messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß th√¥ng tin")
    #         return

    #     class_id = class_info.split(":")[0]
    #     teacher_id = teacher.split(":")[0]

    #     try:
    #         conn = mysql.connector.connect(**DB_CONFIG)
    #         cursor = conn.cursor()
    #         cursor.execute("UPDATE assignments SET class_id = %s, teacher_id = %s WHERE assignment_id = %s",
    #                     (class_id, teacher_id, assignment_id))
    #         conn.commit()
    #         messagebox.showinfo("Th√†nh c√¥ng", "C·∫≠p nh·∫≠t ph√¢n c√¥ng th√†nh c√¥ng")
    #         self.reset_assignment_fields()
    #         self.load_assignments()
    #     except mysql.connector.Error as e:
    #         messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ s·ª≠a ph√¢n c√¥ng: {e}")
    #     finally:
    #         cursor.close()
    #         conn.close()

    def delete_assignment(self):
        if not hasattr(self, 'selected_class_id'):
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn l·ªõp h·ªçc ph·∫ßn!")
            return

        class_id = self.selected_class_id

        # Ki·ªÉm tra l·ªõp h·ªçc c√≥ ph√¢n c√¥ng kh√¥ng
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            cursor.execute("SELECT assignment_id FROM assignments WHERE class_id = %s", (class_id,))
            assignment = cursor.fetchone()
            if not assignment:
                messagebox.showwarning("C·∫£nh b√°o", "L·ªõp h·ªçc n√†y ch∆∞a ƒë∆∞·ª£c ph√¢n c√¥ng!")
                return
            assignment_id = assignment[0]

            # Ki·ªÉm tra xem ph√¢n c√¥ng c√≥ li√™n quan ƒë·∫øn l∆∞∆°ng kh√¥ng (d√πng class_id thay v√¨ assignment_id)
            cursor.execute("SELECT 1 FROM salaries WHERE class_id = %s LIMIT 1", (class_id,))
            if cursor.fetchone():
                if messagebox.askyesno("X√°c nh·∫≠n", "Ph√¢n c√¥ng n√†y c√≥ li√™n quan ƒë·∫øn l∆∞∆°ng. X√≥a ph√¢n c√¥ng s·∫Ω x√≥a c·∫£ d·ªØ li·ªáu l∆∞∆°ng. B·∫°n c√≥ ch·∫Øc mu·ªën ti·∫øp t·ª•c?"):
                    # X√≥a d·ªØ li·ªáu l∆∞∆°ng li√™n quan
                    cursor.execute("DELETE FROM salaries WHERE class_id = %s", (class_id,))
                    conn.commit()
                else:
                    return
        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ki·ªÉm tra ph√¢n c√¥ng: {e}")
            return
        finally:
            cursor.close()
            conn.close()

        if messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ph√¢n c√¥ng c·ªßa l·ªõp h·ªçc n√†y?"):
            try:
                conn = mysql.connector.connect(**DB_CONFIG)
                cursor = conn.cursor()
                cursor.execute("DELETE FROM assignments WHERE assignment_id = %s", (assignment_id,))
                conn.commit()
                messagebox.showinfo("Th√†nh c√¥ng", "X√≥a ph√¢n c√¥ng th√†nh c√¥ng")
                self.load_classes_by_semester(None)
            except mysql.connector.Error as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ x√≥a ph√¢n c√¥ng: {e}")
            finally:
                cursor.close()
                conn.close()

    def load_assignments(self):
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            cursor.execute("""
                SELECT a.assignment_id, c.class_id, cm.module_name, t.full_name, a.assigned_at
                FROM assignments a
                JOIN classes c ON a.class_id = c.class_id
                JOIN course_modules cm ON c.module_id = cm.module_id
                JOIN teachers t ON a.teacher_id = t.teacher_id
                WHERE cm.dept_id = %s
            """, (self.user['dept_id'],))
            for item in self.assignment_tree.get_children():
                self.assignment_tree.delete(item)
            rows = cursor.fetchall()
            if not rows:
                messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ d·ªØ li·ªáu ph√¢n c√¥ng")
            for row in rows:
                self.assignment_tree.insert("", "end", values=(row[0], f"{row[1]}: {row[2]}", row[3], row[4]))
        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ph√¢n c√¥ng: {e}")
        finally:
            cursor.close()
            conn.close()

    def on_assignment_select(self, event):
        selected_item = self.assignment_tree.selection()
        if selected_item:
            self.assign_button.configure(state="normal")
            self.edit_button.configure(state="normal")
            self.delete_button.configure(state="normal")
            self.reset_button.configure(state="normal")
            item = self.assignment_tree.item(selected_item)
            self.selected_class_id = item['values'][2]  # L∆∞u class_id ƒë·ªÉ s·ª≠ d·ª•ng khi ph√¢n c√¥ng/x√≥a
        else:
            self.assign_button.configure(state="disabled")
            self.edit_button.configure(state="disabled")
            self.delete_button.configure(state="disabled")
            self.reset_button.configure(state="disabled")

    def reset_assignment_fields(self):
        self.assignment_semester_combobox.set(self.get_semesters()[0] if self.get_semesters() else "")
        self.assignment_module_combobox.set("T·∫•t c·∫£")
        # L√†m m·ªõi b·∫£ng d·ªØ li·ªáu v·ªõi t·∫•t c·∫£ d·ªØ li·ªáu (kh√¥ng √°p d·ª•ng b·ªô l·ªçc)
        self.load_classes_by_semester(None)
        for item in self.assignment_tree.selection():
            self.assignment_tree.selection_remove(item)
        self.assign_button.configure(state="disabled")
        self.edit_button.configure(state="disabled")
        self.delete_button.configure(state="disabled")
        self.reset_button.configure(state="disabled")

    def get_academic_years(self):
        current_year = datetime.now().year
        years = [f"{y}-{y+1}" for y in range(current_year - 5, current_year + 5)]
        return years if years else ["2025-2026"]
    
    def get_date_options(self):
        dates = []
        for year in range(2025, 2027):  # T·ª´ 2025 ƒë·∫øn 2026
            for month in range(1, 13):  # T·ª´ th√°ng 1 ƒë·∫øn th√°ng 12
                try:
                    date = datetime(year, month, 1).strftime('%Y-%m-%d')
                    dates.append(date)
                except ValueError:
                    continue  # B·ªè qua c√°c th√°ng kh√¥ng h·ª£p l·ªá (n·∫øu c√≥)
        return dates
    

    def update_date_years(self, event=None):
        year_range = self.semester_year.get().strip()
        print(f"update_date_years: year_range={year_range}")  # Debug gi√° tr·ªã nƒÉm h·ªçc
        if not year_range:
            self.start_date.delete(0, "end")
            self.start_date.insert(0, "2025-01-01")
            self.end_date.delete(0, "end")
            self.end_date.insert(0, "2025-12-31")
            return
        try:
            start_year, end_year = map(int, year_range.split('-'))
            # C·∫≠p nh·∫≠t ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c
            start_date = f"{start_year}-01-01"
            end_date = f"{end_year}-12-31"
            # Ch·ªâ c·∫≠p nh·∫≠t n·∫øu √¥ nh·∫≠p li·ªáu ƒëang tr·ªëng
            if not self.start_date.get():
                self.start_date.delete(0, "end")
                self.start_date.insert(0, start_date)
            if not self.end_date.get():
                self.end_date.delete(0, "end")
                self.end_date.insert(0, end_date)
        except ValueError:
            messagebox.showerror("L·ªói", "NƒÉm h·ªçc kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn l·∫°i!")
            self.start_date.delete(0, "end")
            self.start_date.insert(0, "2025-01-01")
            self.end_date.delete(0, "end")
            self.end_date.insert(0, "2025-12-31")

    def open_calendar(self, entry_widget):
        # T·∫°o c·ª≠a s·ªï pop-up
        top = CTkToplevel(self.window)
        top.title("Ch·ªçn ng√†y")
        top.geometry("300x300")

        # L·∫•y ng√†y hi·ªán t·∫°i t·ª´ √¥ nh·∫≠p li·ªáu (n·∫øu c√≥)
        try:
            current_date = datetime.strptime(entry_widget.get(), '%Y-%m-%d')
        except ValueError:
            current_date = datetime.now()

        # T·∫°o l·ªãch
        cal = Calendar(
            top,
            selectmode="day",
            year=current_date.year,
            month=current_date.month,
            day=current_date.day,
            date_pattern="yyyy-mm-dd"
        )
        cal.pack(pady=10, fill="both", expand=True)

        # N√∫t x√°c nh·∫≠n
        def set_date():
            selected_date = cal.get_date()
            entry_widget.delete(0, "end")
            entry_widget.insert(0, selected_date)
            top.destroy()

        CTkButton(top, text="X√°c nh·∫≠n", command=set_date, fg_color="#0085FF").pack(pady=5)

    def get_semesters(self):
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            cursor.execute("SELECT semester_id FROM semesters ORDER BY semester_id")
            semesters = [row[0] for row in cursor.fetchall()]
            return semesters
        except mysql.connector.Error:
            return []
        finally:
            cursor.close()
            conn.close()

    def load_classes_by_semester(self, event=None):
        semester = self.assignment_semester_combobox.get().strip()
        module_filter = self.assignment_module_combobox.get().strip()

        if not semester:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn k·ª≥ h·ªçc")
            return

        semester_id = semester.split(":")[0].strip()

        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            query = """
                SELECT s.semester_name, s.year, m.module_name, c.class_id, c.class_name, c.num_students, t.full_name
                FROM classes c
                JOIN semesters s ON c.semester_id = s.semester_id
                JOIN course_modules m ON c.module_id = m.module_id
                LEFT JOIN assignments a ON c.class_id = a.class_id
                LEFT JOIN teachers t ON a.teacher_id = t.teacher_id
                WHERE c.semester_id = %s
            """
            params = [semester_id]
            if module_filter != "T·∫•t c·∫£":
                query += " AND m.module_name = %s"
                params.append(module_filter)

            cursor.execute(query, params)
            for item in self.assignment_tree.get_children():
                self.assignment_tree.delete(item)
            rows = cursor.fetchall()
            if not rows:
                messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ d·ªØ li·ªáu l·ªõp h·ªçc ph·∫ßn")
            for row in rows:
                semester_display = f"{row[0]} {row[1]}"
                teacher_display = row[6] if row[6] else "Ch∆∞a ph√¢n c√¥ng"
                self.assignment_tree.insert("", "end", values=(semester_display, row[2], row[3], row[4], row[5], teacher_display))
        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu l·ªõp h·ªçc ph·∫ßn: {e}")
        finally:
            cursor.close()
            conn.close()


    def assign_teacher(self, class_id):
        # L·∫•y th√¥ng tin l·ªõp h·ªçc ƒë·ªÉ x√°c ƒë·ªãnh khoa c·ªßa h·ªçc ph·∫ßn
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            cursor.execute("""
                SELECT m.dept_id, a.teacher_id
                FROM classes c
                JOIN course_modules m ON c.module_id = m.module_id
                LEFT JOIN assignments a ON c.class_id = a.class_id
                WHERE c.class_id = %s
            """, (class_id,))
            result = cursor.fetchone()
            if not result:
                messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc!", parent=self.window)
                return
            dept_id, current_teacher = result

            # L·∫•y danh s√°ch gi·∫£ng vi√™n thu·ªôc khoa c·ªßa h·ªçc ph·∫ßn
            cursor.execute("SELECT teacher_id, full_name FROM teachers WHERE dept_id = %s", (dept_id,))
            teachers = [f"{row[0]}: {row[1]}" for row in cursor.fetchall()]

        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu: {e}", parent=self.window)
            return
        finally:
            cursor.close()
            conn.close()

        # Create popup window
        assign_window = CTkToplevel(self.window)
        assign_window.title("Ph√¢n c√¥ng gi·∫£ng vi√™n")
        assign_window.resizable(False, False)

        # Set window size
        window_width = 500
        window_height = 350
        assign_window.geometry(f"{window_width}x{window_height}")

        # Center the window on the screen
        screen_width = self.window.winfo_screenwidth()
        screen_height = self.window.winfo_screenheight()
        x_position = int((screen_width - window_width) / 2)
        y_position = int((screen_height - window_height) / 2)
        assign_window.geometry(f"{window_width}x{window_height}+{x_position}+{y_position}")

        # Make window modal
        assign_window.transient(self.window)
        assign_window.grab_set()

        # Form frame
        form_frame = CTkFrame(assign_window, fg_color="#F0F0F0", corner_radius=10)
        form_frame.pack(padx=20, pady=10, fill="both", expand=True)

        # Title
        CTkLabel(form_frame, text="Ph√¢n c√¥ng gi·∫£ng vi√™n", font=("Helvetica", 16, "bold"), text_color="black").pack(pady=5)

        # Teacher Combobox
        teacher_frame = CTkFrame(form_frame, fg_color="transparent")
        teacher_frame.pack(fill="x", pady=2)
        CTkLabel(teacher_frame, text="Gi·∫£ng vi√™n:", font=("Helvetica", 12), text_color="black", width=120, anchor="w").pack(side="left", padx=(0, 5))
        teacher_combobox = CTkComboBox(teacher_frame, values=teachers, width=260, height=32)
        teacher_combobox.pack(side="left")
        if current_teacher:
            for teacher in teachers:
                if teacher.startswith(current_teacher):
                    teacher_combobox.set(teacher)
                    break
        elif teachers:
            teacher_combobox.set(teachers[0])

        # Buttons
        button_frame = CTkFrame(form_frame, fg_color="transparent")
        button_frame.pack(pady=10)
        CTkButton(button_frame, text="Ph√¢n c√¥ng", fg_color="#0085FF", width=100).pack(side="left", padx=5)
        CTkButton(button_frame, text="H·ªßy", fg_color="#6C757D", width=100, command=lambda: assign_window.destroy()).pack(side="left", padx=5)

        # Save function
        def save_assignment():
            selected_teacher = teacher_combobox.get().strip()
            if not selected_teacher:
                messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn gi·∫£ng vi√™n!", parent=assign_window)
                return

            teacher_id = selected_teacher.split(":")[0].strip()

            try:
                conn = mysql.connector.connect(**DB_CONFIG)
                cursor = conn.cursor()

                # Check if class is already assigned
                cursor.execute("SELECT assignment_id FROM assignments WHERE class_id = %s", (class_id,))
                existing_assignment = cursor.fetchone()

                if existing_assignment:
                    # Update existing assignment
                    cursor.execute("UPDATE assignments SET teacher_id = %s, assigned_at = CURRENT_TIMESTAMP WHERE class_id = %s",
                                (teacher_id, class_id))
                else:
                    # Generate assignment ID
                    cursor.execute("SELECT assignment_id FROM assignments ORDER BY CAST(SUBSTRING(assignment_id, 4) AS UNSIGNED) DESC LIMIT 1")
                    result = cursor.fetchone()
                    if result:
                        last_id = result[0]
                        last_num = int(last_id[3:])
                        new_num = last_num + 1
                    else:
                        new_num = 1
                    assignment_id = f"ASN{str(new_num).zfill(5)}"

                    # Insert new assignment
                    cursor.execute("INSERT INTO assignments (assignment_id, class_id, teacher_id) VALUES (%s, %s, %s)",
                                (assignment_id, class_id, teacher_id))

                conn.commit()
                messagebox.showinfo("Th√†nh c√¥ng", "Ph√¢n c√¥ng gi·∫£ng vi√™n th√†nh c√¥ng!", parent=assign_window)
                self.load_classes()
                self.class_list_frame.update_idletasks()
                assign_window.destroy()
            except mysql.connector.Error as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ph√¢n c√¥ng gi·∫£ng vi√™n: {e}", parent=assign_window)
            finally:
                cursor.close()
                conn.close()

        # Bind save function to "Ph√¢n c√¥ng" button
        button_frame.winfo_children()[0].configure(command=save_assignment)

    def show_class_stats(self):
        year = self.stats_year_combobox.get().strip()
        if not year:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn nƒÉm h·ªçc!")
            return

        # L·∫•y d·ªØ li·ªáu th·ªëng k√™
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            query = """
                SELECT cm.module_name, COUNT(c.class_id) as num_classes, SUM(c.num_students) as total_students
                FROM classes c
                JOIN semesters s ON c.semester_id = s.semester_id
                JOIN course_modules cm ON c.module_id = cm.module_id
                WHERE s.year = %s
                GROUP BY cm.module_id, cm.module_name
            """
            cursor.execute(query, (year,))
            rows = cursor.fetchall()
            if not rows:
                messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ th·ªëng k√™.")
                return

            # L∆∞u d·ªØ li·ªáu ƒë·ªÉ d√πng cho xu·∫•t b√°o c√°o
            self.stats_data = [{"Module": row[0], "Num Classes": row[1], "Total Students": row[2]} for row in rows]

            # X√≥a bi·ªÉu ƒë·ªì c≈©, gi·ªØ l·∫°i stats_table_frame n·∫øu n√≥ t·ªìn t·∫°i
            for widget in self.class_stats_frame.winfo_children():
                if widget != getattr(self, 'stats_table_frame', None):  # Gi·ªØ l·∫°i stats_table_frame n·∫øu t·ªìn t·∫°i
                    widget.destroy()

            # Ki·ªÉm tra v√† t√°i t·∫°o stats_table_frame n·∫øu c·∫ßn
            if not hasattr(self, 'stats_table_frame') or not self.stats_table_frame.winfo_exists():
                self.stats_table_frame = CTkFrame(self.class_stats_frame, fg_color="#FFFFFF", corner_radius=10)
                self.stats_table_frame.pack(side="bottom", padx=10, pady=10, fill="both", expand=True)

            # Ki·ªÉm tra v√† t√°i t·∫°o class_stats_tree n·∫øu c·∫ßn
            if not hasattr(self, 'class_stats_tree') or not self.class_stats_tree.winfo_exists():
                self.class_stats_tree = ttk.Treeview(self.stats_table_frame, columns=("Module", "Num Classes", "Total Students"), show="headings")
                self.class_stats_tree.heading("Module", text="H·ªçc ph·∫ßn")
                self.class_stats_tree.heading("Num Classes", text="S·ªë l·ªõp m·ªü")
                self.class_stats_tree.heading("Total Students", text="T·ªïng s·ªë sinh vi√™n")
                self.class_stats_tree.column("Module", width=200, anchor="center")
                self.class_stats_tree.column("Num Classes", width=100, anchor="center")
                self.class_stats_tree.column("Total Students", width=100, anchor="center")
                self.class_stats_tree.pack(padx=10, pady=10, fill="both", expand=True)

            # V·∫Ω bi·ªÉu ƒë·ªì
            labels = [row[0] for row in rows]
            num_classes = [row[1] for row in rows]
            fig, ax = plt.subplots(figsize=(6, 4))
            ax.bar(labels, num_classes, color="#36A2EB")
            ax.set_title(f"S·ªë l·ªõp m·ªü theo h·ªçc ph·∫ßn ({year})", fontsize=14, pad=15)
            ax.set_xlabel("H·ªçc ph·∫ßn", fontsize=12)
            ax.set_ylabel("S·ªë l·ªõp m·ªü", fontsize=12)
            ax.set_ylim(0, max(num_classes) + 1 if num_classes else 1)
            plt.xticks(rotation=0, ha="right")

            # Nh√∫ng bi·ªÉu ƒë·ªì v√†o giao di·ªán
            canvas = FigureCanvasTkAgg(fig, master=self.class_stats_frame)
            canvas.draw()
            canvas.get_tk_widget().pack(fill="both", expand=True)

            # Hi·ªÉn th·ªã b·∫£ng
            for item in self.class_stats_tree.get_children():
                self.class_stats_tree.delete(item)
            for row in rows:
                self.class_stats_tree.insert("", "end", values=row)
        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu th·ªëng k√™: {e}")
        finally:
            cursor.close()
            conn.close()

    
    def export_excel(self):
        year = self.stats_year_combobox.get().strip()
        if not year:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn nƒÉm h·ªçc!")
            return

        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()

            # L·∫•y danh s√°ch h·ªçc k·ª≥ trong nƒÉm
            cursor.execute("SELECT semester_name FROM semesters WHERE year = %s ORDER BY semester_name", (year,))
            semesters = [row[0] for row in cursor.fetchall()]

            # Ki·ªÉm tra xem c√≥ d·ªØ li·ªáu kh√¥ng
            cursor.execute("""
                SELECT COUNT(*)
                FROM classes c
                JOIN semesters s ON c.semester_id = s.semester_id
                JOIN course_modules cm ON c.module_id = cm.module_id
                WHERE s.year = %s
            """, (year,))
            has_data = cursor.fetchone()[0] > 0

            if not has_data:
                messagebox.showwarning("C·∫£nh b√°o", f"Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t trong nƒÉm h·ªçc {year}!")
                return

            # L·∫•y d·ªØ li·ªáu th·ªëng k√™
            cursor.execute("""
                SELECT 
                    cm.module_name,
                    s.semester_name,
                    COUNT(c.class_id) as class_count,
                    SUM(c.num_students) as total_students
                FROM course_modules cm
                LEFT JOIN classes c ON cm.module_id = c.module_id
                LEFT JOIN semesters s ON c.semester_id = s.semester_id
                WHERE s.year = %s
                GROUP BY cm.module_name, s.semester_name
                ORDER BY cm.module_name, s.semester_name
            """, (year,))
            rows = cursor.fetchall()

            # T·∫°o DataFrame cho pivot table
            df = pd.DataFrame(rows, columns=['H·ªçc ph·∫ßn', 'K·ª≥ h·ªçc', 'S·ªë l·ªõp', 'S·ªë sinh vi√™n'])
            pivot_df = pd.pivot_table(
                df,
                values='S·ªë l·ªõp',
                index=['H·ªçc ph·∫ßn'],
                columns=['K·ª≥ h·ªçc'],
                fill_value=0,
                aggfunc='sum'
            )

            # T√≠nh t·ªïng s·ªë l·ªõp v√† sinh vi√™n
            total_classes = df.groupby('H·ªçc ph·∫ßn')['S·ªë l·ªõp'].sum()
            total_students = df.groupby('H·ªçc ph·∫ßn')['S·ªë sinh vi√™n'].sum()
            avg_students = total_students / total_classes

            # G·ªôp c√°c DataFrame
            result_df = pd.DataFrame({
                'T·ªïng s·ªë l·ªõp': total_classes,
                'T·ªïng sinh vi√™n': total_students,
                'TB SV/l·ªõp': avg_students.round(1)
            })

            # K·∫øt h·ª£p pivot table v·ªõi c√°c c·ªôt t·ªïng
            final_df = pd.concat([pivot_df, result_df], axis=1)

            # Th√™m h√†ng t·ªïng c·ªông
            sums = final_df.sum()
            sums['TB SV/l·ªõp'] = (final_df['T·ªïng sinh vi√™n'].sum() / final_df['T·ªïng s·ªë l·ªõp'].sum()).round(1)
            final_df.loc['T·ªîNG C·ªòNG'] = sums

            # Xu·∫•t Excel
            output_file = f"Class_Stats_Report_{year}.xlsx"
            with pd.ExcelWriter(output_file, engine='xlsxwriter') as writer:
                final_df.to_excel(writer, sheet_name='Statistics')
                
                # ƒê·ªãnh d·∫°ng
                workbook = writer.book
                worksheet = writer.sheets['Statistics']
                
                # Format cho header
                header_format = workbook.add_format({
                    'bold': True,
                    'align': 'center',
                    'valign': 'vcenter',
                    'bg_color': '#D3D3D3'
                })
                
                # Format cho s·ªë li·ªáu
                number_format = workbook.add_format({
                    'align': 'center',
                    'valign': 'vcenter'
                })

                # √Åp d·ª•ng format
                for col_num, value in enumerate(final_df.columns.values):
                    worksheet.write(0, col_num + 1, value, header_format)
                    worksheet.set_column(col_num + 1, col_num + 1, 15)

                # Format cho c·ªôt h·ªçc ph·∫ßn
                worksheet.set_column(0, 0, 30)

            messagebox.showinfo("Th√†nh c√¥ng", f"B√°o c√°o ƒë√£ ƒë∆∞·ª£c xu·∫•t: {output_file}")

        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu: {e}")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ xu·∫•t file Excel: {e}")
        finally:
            if cursor:
                cursor.close()
            if conn:
                conn.close()


    def show_class_stats_table(self):
        for widget in self.class_stats_frame.winfo_children():
            widget.destroy()

        data = self.get_class_stats_data()
        if not data:
            ctk.CTkLabel(self.class_stats_frame, text="Kh√¥ng c√≥ d·ªØ li·ªáu l·ªõp h·ªçc trong nƒÉm h·ªçc n√†y.", 
                         font=("Helvetica", 14), text_color="gray").pack(pady=10)
            self.clear_summary_labels()
            return

        self.update_summary_labels(data)
        self.show_table(data)

    def show_class_stats_chart(self):
        for widget in self.class_stats_frame.winfo_children():
            widget.destroy()

        data = self.get_class_stats_data()
        if not data or data["total_classes"] == 0:
            ctk.CTkLabel(self.class_stats_frame, text="Kh√¥ng c√≥ d·ªØ li·ªáu l·ªõp h·ªçc trong nƒÉm h·ªçc n√†y.", 
                        font=("Helvetica", 14), text_color="gray").pack(pady=10)
            self.clear_summary_labels()
            return

        self.update_summary_labels(data)
        self.show_charts(data)


    def toggle_submenu(self, main_item):
        # ·∫®n t·∫•t c·∫£ c√°c drop down kh√°c tr∆∞·ªõc
        for other_main_item in self.submenu_visible:
            if other_main_item != main_item and self.submenu_visible[other_main_item]:
                self.submenu_visible[other_main_item] = False
                self.hide_submenu_buttons(other_main_item)
                # C·∫≠p nh·∫≠t bi·ªÉu t∆∞·ª£ng m≈©i t√™n cho m·ª•c ch√≠nh kh√°c
                button = getattr(self, f"{other_main_item.lower().replace(' ', '_')}_button", None)
                if button:
                    button.configure(text=f"‚ñ∂ {other_main_item}")

        # Toggle tr·∫°ng th√°i hi·ªÉn th·ªã c·ªßa m·ª•c ch√≠nh hi·ªán t·∫°i
        self.submenu_visible[main_item] = not self.submenu_visible[main_item]

        # C·∫≠p nh·∫≠t bi·ªÉu t∆∞·ª£ng m≈©i t√™n cho m·ª•c ch√≠nh hi·ªán t·∫°i
        button = getattr(self, f"{main_item.lower().replace(' ', '_')}_button", None)
        if button:
            button.configure(text=f"‚ñº {main_item}" if self.submenu_visible[main_item] else f"‚ñ∂ {main_item}")

        if self.submenu_visible[main_item]:
            # Hi·ªÉn th·ªã c√°c tab con
            button_height = 40  # Chi·ªÅu cao c·ªßa m·ªói button
            for idx, item in enumerate(self.submenu_items[main_item]):
                btn = CTkButton(self.submenu_frames[main_item], text=f"{item}", font=("Helvetica", 14), fg_color="transparent",
                                text_color="#DDEEFF", hover_color="#5A9BFF", anchor="w",
                                command=lambda x=item: self.switch_tab(x))
                btn.place(relx=0.15, rely=0, y=-button_height)  # L√πi v√†o 15% t·ª´ l·ªÅ tr√°i, b·ªè relwidth ƒë·ªÉ kh√¥ng m·ªü r·ªông
                self.submenu_buttons[main_item].append(btn)
                # Hi·ªáu ·ª©ng slide down
                self.slide_down(btn, idx * button_height, -button_height)
            # ƒê·∫∑t chi·ªÅu cao c·ªßa frame ƒë·ªÉ ch·ª©a t·∫•t c·∫£ c√°c button
            self.submenu_frames[main_item].configure(height=len(self.submenu_items[main_item]) * button_height)
        else:
            # ·∫®n c√°c tab con
            self.hide_submenu_buttons(main_item)

    def hide_submenu_buttons(self, main_item):
        buttons = self.submenu_buttons[main_item]
        if not buttons:
            return

        def destroy_buttons():
            for btn in buttons:
                btn.destroy()
            self.submenu_buttons[main_item] = []
            # ƒê·∫∑t l·∫°i chi·ªÅu cao frame v·ªÅ 0 sau khi ·∫©n
            self.submenu_frames[main_item].configure(height=0)

        # Hi·ªáu ·ª©ng slide up cho t·∫•t c·∫£ c√°c button
        button_height = 40
        for idx, btn in enumerate(buttons):
            target_y = -button_height
            current_y = idx * button_height
            self.slide_up(btn, target_y, current_y, callback=lambda: destroy_buttons() if btn == buttons[-1] else None)

    def slide_down(self, button, target_y, current_y):
        if current_y < target_y:
            button.place(relx=0, rely=0, y=current_y, relwidth=1.0)
            button.after(10, lambda: self.slide_down(button, target_y, current_y + 5))
        else:
            button.place(relx=0, rely=0, y=target_y, relwidth=1.0)

    def slide_up(self, button, target_y, current_y, callback=None):
        if current_y > target_y:
            button.place(relx=0, rely=0, y=current_y, relwidth=1.0)
            button.after(10, lambda: self.slide_up(button, target_y, current_y - 5, callback))
        else:
            button.place(relx=0, rely=0, y=target_y, relwidth=1.0)
            if callback:
                callback()

    def edit_assignment(self):
        if not hasattr(self, 'selected_class_id'):
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn l·ªõp h·ªçc ph·∫ßn ƒë·ªÉ s·ª≠a!")
            return

        class_id = self.selected_class_id

        # Ki·ªÉm tra xem l·ªõp h·ªçc ƒë√£ ƒë∆∞·ª£c ph√¢n c√¥ng ch∆∞a
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            cursor.execute("SELECT assignment_id, teacher_id FROM assignments WHERE class_id = %s", (class_id,))
            existing_assignment = cursor.fetchone()
            if not existing_assignment:
                messagebox.showwarning("C·∫£nh b√°o", "L·ªõp h·ªçc n√†y ch∆∞a ƒë∆∞·ª£c ph√¢n c√¥ng! Vui l√≤ng ph√¢n c√¥ng tr∆∞·ªõc khi s·ª≠a.")
                return
            assignment_id, current_teacher_id = existing_assignment
        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ki·ªÉm tra ph√¢n c√¥ng: {e}")
            return
        finally:
            cursor.close()
            conn.close()

        # T·∫°o c·ª≠a s·ªï pop-up
        edit_window = CTkToplevel(self.window)
        edit_window.title("S·ª≠a ph√¢n c√¥ng gi·∫£ng vi√™n")
        edit_window.geometry("400x200")
        edit_window.resizable(False, False)

        # Frame ch·ª©a c√°c tr∆∞·ªùng nh·∫≠p li·ªáu
        form_frame = CTkFrame(edit_window, fg_color="transparent")
        form_frame.pack(padx=20, pady=20, fill="both", expand=True)

        # Gi√°o vi√™n
        CTkLabel(form_frame, text="Ch·ªçn gi·∫£ng vi√™n:", font=("Helvetica", 12)).pack(pady=(5, 0))
        teachers = self.get_teachers()
        teacher_var = CTkComboBox(form_frame, width=350, values=teachers)
        teacher_var.pack(pady=5)
        if teachers and teachers[0] not in ["Kh√¥ng c√≥ gi√°o vi√™n", "L·ªói t·∫£i gi√°o vi√™n"]:
            # T√¨m v√† ƒë·∫∑t gi·∫£ng vi√™n hi·ªán t·∫°i
            for teacher in teachers:
                if teacher.startswith(current_teacher_id):
                    teacher_var.set(teacher)
                    break
            else:
                teacher_var.set(teachers[0])
        else:
            teacher_var.set(teachers[0])

        # H√†m x·ª≠ l√Ω khi nh·∫•n n√∫t "L∆∞u"
        def save_assignment():
            teacher = teacher_var.get().strip()

            if not teacher or teacher in ["Kh√¥ng c√≥ gi√°o vi√™n", "L·ªói t·∫£i gi√°o vi√™n"]:
                messagebox.showerror("L·ªói", "Kh√¥ng c√≥ gi√°o vi√™n ƒë·ªÉ s·ª≠a ph√¢n c√¥ng!", parent=edit_window)
                return

            teacher_id = teacher.split(":")[0].strip()

            # H·ªèi x√°c nh·∫≠n
            confirm = messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën s·ª≠a ph√¢n c√¥ng n√†y?", parent=edit_window)
            if not confirm:
                return

            # C·∫≠p nh·∫≠t ph√¢n c√¥ng
            try:
                conn = mysql.connector.connect(**DB_CONFIG)
                cursor = conn.cursor()
                cursor.execute("UPDATE assignments SET teacher_id = %s WHERE assignment_id = %s", (teacher_id, assignment_id))
                conn.commit()
                messagebox.showinfo("Th√†nh c√¥ng", "S·ª≠a ph√¢n c√¥ng th√†nh c√¥ng", parent=edit_window)
                self.load_classes_by_semester(None)
                edit_window.destroy()
            except mysql.connector.Error as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ s·ª≠a ph√¢n c√¥ng: {e}", parent=edit_window)
            finally:
                cursor.close()
                conn.close()

        # H√†m ƒë√≥ng c·ª≠a s·ªï
        def cancel():
            edit_window.destroy()

        # N√∫t L∆∞u v√† H·ªßy
        button_frame = CTkFrame(form_frame, fg_color="transparent")
        button_frame.pack(pady=10)
        CTkButton(button_frame, text="L∆∞u", fg_color="#0085FF", command=save_assignment, width=100).pack(side="left", padx=5)
        CTkButton(button_frame, text="H·ªßy", fg_color="#6C757D", command=cancel, width=100).pack(side="left", padx=5)

    def open_calendar(self, entry_field):
        # T·∫°o c·ª≠a s·ªï l·ªãch
        calendar_window = CTkToplevel(self.window)
        calendar_window.title("Ch·ªçn ng√†y")
        calendar_window.resizable(False, False)

        # ƒê√® l√™n c·ª≠a s·ªï ch√≠nh
        calendar_window.transient(self.window)
        calendar_window.grab_set()

        # T·∫°o l·ªãch
        cal = Calendar(calendar_window, selectmode="day", date_pattern="yyyy-mm-dd", font=("Helvetica", 12))
        cal.pack(padx=10, pady=10)

        # CƒÉn gi·ªØa c·ª≠a s·ªï l·ªãch so v·ªõi c·ª≠a s·ªï ch√≠nh
        self.window.update_idletasks()  # C·∫≠p nh·∫≠t k√≠ch th∆∞·ªõc c·ª≠a s·ªï ch√≠nh
        window_width = self.window.winfo_width()
        window_height = self.window.winfo_height()
        window_x = self.window.winfo_x()
        window_y = self.window.winfo_y()
        cal_width = calendar_window.winfo_reqwidth()
        cal_height = calendar_window.winfo_reqheight()
        pos_x = window_x + (window_width // 2) - (cal_width // 2)
        pos_y = window_y + (window_height // 2) - (cal_height // 2)
        calendar_window.geometry(f"+{pos_x}+{pos_y}")

        # H√†m ch·ªçn ng√†y
        def select_date():
            selected_date = cal.get_date()
            entry_field.delete(0, "end")
            entry_field.insert(0, selected_date)
            calendar_window.destroy()

        # N√∫t ch·ªçn ng√†y
        CTkButton(calendar_window, text="Ch·ªçn", fg_color="#0085FF", hover_color="#005BB5", width=100, height=30, font=("Helvetica", 12, "bold"), command=select_date).pack(pady=5)


    def get_class_stats_data(self):
        year = self.stats_year_combobox.get().strip()
        if not year:
            return None

        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()

            # L·∫•y danh s√°ch c√°c h·ªçc k·ª≥ trong nƒÉm h·ªçc
            cursor.execute("""
                SELECT semester_id, semester_name 
                FROM semesters 
                WHERE year = %s
                ORDER BY semester_id
            """, (year,))
            semesters = [row[0] for row in cursor.fetchall()]

            # Truy v·∫•n ch√≠nh
            cursor.execute("""
                SELECT 
                    cm.module_name,
                    s.semester_id,
                    COUNT(c.class_id) as class_count,
                    COALESCE(SUM(ce.enrolled_students), 0) as total_enrolled,
                    COALESCE(AVG(ce.enrolled_students), 0) as avg_enrolled
                FROM classes c
                JOIN semesters s ON c.semester_id = s.semester_id
                JOIN course_modules cm ON c.module_id = cm.module_id
                LEFT JOIN class_enrollments ce ON c.class_id = ce.class_id
                WHERE s.year = %s
                GROUP BY cm.module_name, s.semester_id
                ORDER BY cm.module_name, s.semester_id
            """, (year,))
            pivot_data = cursor.fetchall()

            # T·ªïng s·ªë l·ªõp v√† sinh vi√™n
            cursor.execute("""
                SELECT 
                    COUNT(DISTINCT c.class_id) as total_classes,
                    COUNT(DISTINCT cm.module_id) as total_modules,
                    COALESCE(SUM(ce.enrolled_students), 0) as total_enrolled,
                    COALESCE(AVG(ce.enrolled_students), 0) as avg_enrolled
                FROM classes c
                JOIN semesters s ON c.semester_id = s.semester_id
                JOIN course_modules cm ON c.module_id = cm.module_id
                LEFT JOIN class_enrollments ce ON c.class_id = ce.class_id
                WHERE s.year = %s
            """, (year,))
            summary = cursor.fetchone()

            # Top 5 h·ªçc ph·∫ßn c√≥ nhi·ªÅu sinh vi√™n nh·∫•t
            cursor.execute("""
                SELECT 
                    cm.module_name,
                    COALESCE(SUM(ce.enrolled_students), 0) as total_enrolled
                FROM classes c
                JOIN semesters s ON c.semester_id = s.semester_id
                JOIN course_modules cm ON c.module_id = cm.module_id
                LEFT JOIN class_enrollments ce ON c.class_id = ce.class_id
                WHERE s.year = %s
                GROUP BY cm.module_name
                ORDER BY total_enrolled DESC
                LIMIT 5
            """, (year,))
            top_modules = cursor.fetchall()

            return {
                "semesters": semesters,
                "pivot_data": pivot_data,
                "total_classes": summary[0] if summary else 0,
                "total_modules": summary[1] if summary else 0,
                "total_students": int(summary[2]) if summary else 0,
                "avg_students": round(float(summary[3]), 1) if summary else 0,
                "top_modules": top_modules
            }

        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu th·ªëng k√™: {e}")
            return None
        finally:
            if cursor:
                cursor.close()
            if conn:
                conn.close()


    def show_class_stats_all(self):
        for widget in self.class_stats_frame.winfo_children():
            widget.destroy()

        data = self.get_class_stats_data()
        if not data:
            ctk.CTkLabel(self.class_stats_frame, text="Kh√¥ng c√≥ d·ªØ li·ªáu l·ªõp h·ªçc trong nƒÉm h·ªçc n√†y.", 
                         font=("Helvetica", 14), text_color="gray").pack(pady=10)
            self.clear_summary_labels()
            return

        self.update_summary_labels(data)
        self.show_charts(data)
        self.show_table(data)
    
    def update_class_stats(self, event=None):
        # M·∫∑c ƒë·ªãnh hi·ªÉn th·ªã bi·ªÉu ƒë·ªì khi v√†o tab ho·∫∑c thay ƒë·ªïi nƒÉm
        self.show_class_stats_chart()

    def update_stat_labels(self, data):
        """C·∫≠p nh·∫≠t c√°c nh√£n th·ªëng k√™"""
        self.total_classes_label.configure(text=str(data["total_classes"]))
        self.total_modules_label.configure(text=f"{data['total_modules']}")
        self.total_students_label.configure(text=str(data["total_students"]))
        self.avg_students_label.configure(text=f"TB {data['avg_students']} SV/l·ªõp")
        self.sem1_classes_label.configure(text=str(data["sem1_count"]))
        self.sem1_percentage_label.configure(text=f"{data['sem1_percentage']}%")
        self.sem2_classes_label.configure(text=str(data["sem2_count"]))
        self.sem2_percentage_label.configure(text=f"{data['sem2_percentage']}%")


    def show_charts(self, data):
        chart_frame = ctk.CTkFrame(self.class_stats_frame, fg_color="white")
        chart_frame.pack(fill="both", expand=True, padx=10, pady=10)

        # T√≠nh to√°n s·ªë l·ªõp theo h·ªçc ph·∫ßn
        module_counts = {}
        for row in data["pivot_data"]:
            module_name = row[0]  # module_name
            class_count = row[2]  # class_count
            if module_name not in module_counts:
                module_counts[module_name] = 0
            module_counts[module_name] += class_count

        # Bi·ªÉu ƒë·ªì s·ªë l·ªõp theo k·ª≥ h·ªçc
        fig1, ax1 = plt.subplots(figsize=(10, 3))
        pivot_counts = {}
        for row in data["pivot_data"]:
            sem_name = row[1]  # semester_name
            class_count = row[2]  # class_count
            if sem_name not in pivot_counts:
                pivot_counts[sem_name] = 0
            pivot_counts[sem_name] += class_count

        x = np.arange(len(data["semesters"]))
        ax1.bar(x, [pivot_counts.get(sem, 0) for sem in data["semesters"]], color='#36A2EB')
        ax1.set_xlabel('K·ª≥ h·ªçc', fontsize=10)
        ax1.set_ylabel('S·ªë l·ªõp', fontsize=10)
        ax1.set_xticks(x)
        ax1.set_xticklabels(data["semesters"], rotation=0, ha='center', fontsize=10)
        ax1.set_title(f'S·ªë l·ªõp theo k·ª≥ h·ªçc ({self.stats_year_combobox.get()})', fontsize=12, pad=15)
        plt.tight_layout()

        canvas1 = FigureCanvasTkAgg(fig1, master=chart_frame)
        canvas1.draw()
        canvas1.get_tk_widget().pack(fill="x", expand=True, pady=5)

        # Bi·ªÉu ƒë·ªì top 5 h·ªçc ph·∫ßn
        fig2, ax2 = plt.subplots(figsize=(10, 3))
        module_names = [row[0] for row in data["top_modules"]]
        total_students = [row[1] for row in data["top_modules"]]
        
        ax2.bar(module_names, total_students, color='#FF6384')
        ax2.set_xlabel('H·ªçc ph·∫ßn', fontsize=10)
        ax2.set_ylabel('T·ªïng sinh vi√™n', fontsize=10)
        ax2.set_xticks(range(len(module_names)))
        ax2.set_xticklabels(module_names, rotation=0, ha='right', fontsize=10)
        ax2.set_title(f'Top 5 h·ªçc ph·∫ßn nhi·ªÅu SV nh·∫•t ({self.stats_year_combobox.get()})', fontsize=12)
        plt.tight_layout()

        canvas2 = FigureCanvasTkAgg(fig2, master=chart_frame)
        canvas2.draw()
        canvas2.get_tk_widget().pack(fill="x", expand=True, pady=5)
            
    def update_summary_labels(self, data):
        """C·∫≠p nh·∫≠t c√°c nh√£n th·ªëng k√™"""
        # C·∫≠p nh·∫≠t t·ªïng s·ªë l·ªõp
        self.total_classes_label.configure(text=str(data["total_classes"]) if data["total_classes"] is not None else "0")
        
        # C·∫≠p nh·∫≠t t·ªïng s·ªë h·ªçc ph·∫ßn
        self.total_modules_label.configure(text=f"{data['total_modules']}" if data["total_modules"] is not None else "0")
        
        # C·∫≠p nh·∫≠t t·ªïng s·ªë sinh vi√™n
        self.total_students_label.configure(text=str(data["total_students"]) if data["total_students"] is not None else "0")
        
        # C·∫≠p nh·∫≠t trung b√¨nh sinh vi√™n/l·ªõp  
        self.avg_per_class_label.configure(text=str(data["avg_students"]) if data["avg_students"] is not None else "0")

    def clear_summary_labels(self):
        """X√≥a ho·∫∑c ƒë·∫∑t l·∫°i c√°c nh√£n th·ªëng k√™ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh"""
        self.total_classes_label.configure(text="0")
        self.total_modules_label.configure(text="0")
        self.total_students_label.configure(text="0")
        self.avg_per_class_label.configure(text="0")

    def show_table(self, data):
        # Ki·ªÉm tra d·ªØ li·ªáu tr∆∞·ªõc khi t·∫°o b·∫£ng
        if not data or not data["pivot_data"]:
            ctk.CTkLabel(self.class_stats_frame, text="Kh√¥ng c√≥ d·ªØ li·ªáu", 
                        font=("Helvetica", 14), text_color="gray").pack(pady=20)
            return

        table_frame = ctk.CTkFrame(self.class_stats_frame, fg_color="#FFFFFF", corner_radius=10)
        table_frame.pack(padx=10, pady=10, fill="both", expand=True)

        # T√≠nh to√°n s·ªë c·ªôt v√† chi·ªÅu r·ªông
        num_semesters = len(data["semesters"])
        if num_semesters == 0:  # Th√™m ki·ªÉm tra n√†y
            num_semesters = 1  # ƒê·∫∑t gi√° tr·ªã m·∫∑c ƒë·ªãnh ƒë·ªÉ tr√°nh chia cho 0

        # T√≠nh chi·ªÅu r·ªông m·ªói c·ªôt
        total_width = 1100  # T·ªïng chi·ªÅu r·ªông c√≥ s·∫µn
        col_widths = {
            "module": int(total_width * 0.25),  # 25% cho c·ªôt h·ªçc ph·∫ßn
            "semester": int((total_width * 0.45) / num_semesters),  # 45% chia ƒë·ªÅu cho c√°c k·ª≥
            "summary": int((total_width * 0.30) / 3)  # 30% chia ƒë·ªÅu cho 3 c·ªôt t·ªïng
        }

        # Frame ti√™u ƒë·ªÅ
        heading_frame = ctk.CTkFrame(table_frame, fg_color="#D3D3D3", corner_radius=0, height=40)
        heading_frame.pack(fill="x", padx=5, pady=(5,0))
        heading_frame.pack_propagate(False)

        # T·∫°o ti√™u ƒë·ªÅ
        ctk.CTkLabel(heading_frame, text="H·ªçc ph·∫ßn", 
                    font=("Helvetica", 12, "bold"), width=col_widths["module"],
                    anchor="center").pack(side="left")
                    
        for sem in data["semesters"]:
            ctk.CTkLabel(heading_frame, text=f"S·ªë l·ªõp {sem}",
                        font=("Helvetica", 12, "bold"), width=col_widths["semester"],
                        anchor="center").pack(side="left")
                        
        summary_headers = ["T·ªïng s·ªë l·ªõp", "T·ªïng sinh vi√™n", "TB SV/l·ªõp"]
        for header in summary_headers:
            ctk.CTkLabel(heading_frame, text=header,
                        font=("Helvetica", 12, "bold"), width=col_widths["summary"],
                        anchor="center").pack(side="left")

        # Frame cho d·ªØ li·ªáu
        data_frame = ctk.CTkScrollableFrame(table_frame, fg_color="transparent") 
        data_frame.pack(fill="both", expand=True, padx=5, pady=5)

        # T·∫°o pivot_dict t·ª´ pivot_data
        pivot_dict = {}
        grand_total_classes = 0
        grand_total_students = 0
        semester_totals = {sem: 0 for sem in data["semesters"]}  # Kh·ªüi t·∫°o t·ªïng theo k·ª≥

        for row in data["pivot_data"]:
            module_name = row[0]
            sem_name = row[1]
            class_count = row[2]
            total_students = row[3]

            if module_name not in pivot_dict:
                pivot_dict[module_name] = {
                    "semesters": {sem: 0 for sem in data["semesters"]},
                    "total_students": 0,
                    "total_classes": 0
                }
            pivot_dict[module_name]["semesters"][sem_name] = class_count
            pivot_dict[module_name]["total_students"] += total_students
            pivot_dict[module_name]["total_classes"] += class_count
            
            # C·∫≠p nh·∫≠t t·ªïng theo k·ª≥
            semester_totals[sem_name] += class_count
            grand_total_classes += class_count
            grand_total_students += total_students

        # Hi·ªÉn th·ªã d·ªØ li·ªáu t·ª´ng d√≤ng
        for module_name, stats in pivot_dict.items():
            row_frame = ctk.CTkFrame(data_frame, fg_color="#F5F5F5", corner_radius=0, height=35)
            row_frame.pack(fill="x", pady=1)
            row_frame.pack_propagate(False)

            # T√™n h·ªçc ph·∫ßn
            ctk.CTkLabel(row_frame, text=module_name,
                        font=("Helvetica", 12), width=col_widths["module"],
                        anchor="center").pack(side="left")
                        
            # S·ªë l·ªõp theo k·ª≥
            for sem in data["semesters"]:
                ctk.CTkLabel(row_frame, text=str(stats["semesters"].get(sem, 0)),
                            font=("Helvetica", 12), width=col_widths["semester"],
                            anchor="center").pack(side="left")

            # C√°c c·ªôt t·ªïng
            summary_values = [
                stats["total_classes"],
                stats["total_students"],
                f"{stats['total_students']/stats['total_classes']:.1f}" if stats["total_classes"] > 0 else "0"
            ]
            for value in summary_values:
                ctk.CTkLabel(row_frame, text=str(value),
                            font=("Helvetica", 12), width=col_widths["summary"],
                            anchor="center").pack(side="left")

        # Th√™m d√≤ng t·ªïng c·ªông
        total_frame = ctk.CTkFrame(data_frame, fg_color="#E0E0E0", corner_radius=0, height=35)
        total_frame.pack(fill="x", pady=1)
        total_frame.pack_propagate(False)

        # Label "T·ªîNG C·ªòNG"
        ctk.CTkLabel(total_frame, text="T·ªîNG C·ªòNG",
                    font=("Helvetica", 12, "bold"), width=col_widths["module"],
                    anchor="center").pack(side="left")

        # T·ªïng theo t·ª´ng k·ª≥
        for sem in data["semesters"]:
            ctk.CTkLabel(total_frame, text=str(semester_totals[sem]),
                        font=("Helvetica", 12, "bold"), width=col_widths["semester"],
                        anchor="center").pack(side="left")

        # T·ªïng c√°c c·ªôt cu·ªëi
        avg_per_class = grand_total_students / grand_total_classes if grand_total_classes > 0 else 0
        summary_totals = [
            grand_total_classes,
            grand_total_students,
            f"{avg_per_class:.1f}"
        ]
        for value in summary_totals:
            ctk.CTkLabel(total_frame, text=str(value),
                        font=("Helvetica", 12, "bold"), width=col_widths["summary"],
                        anchor="center").pack(side="left")

    
            
    def refresh_data_realtime(self):
        # L√†m m·ªõi d·ªØ li·ªáu v√† c·∫≠p nh·∫≠t giao di·ªán
        self.update_class_stats()
        messagebox.showinfo("Th√†nh c√¥ng", "D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t theo th·ªùi gian th·ª±c!")

    def get_dept_ids(self):
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            cursor.execute("SELECT dept_id FROM departments")
            dept_ids = [row[0] for row in cursor.fetchall()]
            return dept_ids
        except mysql.connector.Error:
            return ['DEPT2321']  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu l·ªói
        finally:
            cursor.close()
            conn.close()

    def get_filtered_modules(self, dept_id=None):
        """L·∫•y danh s√°ch h·ªçc ph·∫ßn theo khoa"""
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            
            if dept_id:
                query = """
                    SELECT module_id, module_name 
                    FROM course_modules 
                    WHERE dept_id = %s
                    ORDER BY module_name
                """
                cursor.execute(query, (dept_id,))
            else:
                query = """
                    SELECT module_id, module_name 
                    FROM course_modules
                    ORDER BY module_name
                """
                cursor.execute(query)
                
            modules = [f"{row[0]}: {row[1]}" for row in cursor.fetchall()]
            return modules if modules else ["Kh√¥ng c√≥ h·ªçc ph·∫ßn"]
        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i danh s√°ch h·ªçc ph·∫ßn: {e}")
            return ["L·ªói t·∫£i h·ªçc ph·∫ßn"]
        finally:
            cursor.close()
            conn.close()

    def add_teacher_coefficient(self):
        year = self.coefficient_year_filter.get().strip()
        if not year:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn nƒÉm h·ªçc")
            return

        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM teacher_coefficients WHERE year = %s", (year,))
            if cursor.fetchone()[0] > 0:
                messagebox.showwarning("C·∫£nh b√°o", f"ƒê√£ c√≥ d·ªØ li·ªáu h·ªá s·ªë cho nƒÉm h·ªçc {year}!")
                return

            # Th√™m m·∫∑c ƒë·ªãnh v·ªõi ki·ªÉm tra degree_id
            default_coefficients = [
                ('DEG82838', 1.3),  # ƒê·∫°i h·ªçc
                ('DEG12238', 1.5),  # Th·∫°c sƒ©
                ('DEG34993', 1.7),  # Ti·∫øn sƒ©
                ('DEG21434', 2.0),  # Ph√≥ gi√°o s∆∞
                ('DEG92138', 2.5)   # Gi√°o s∆∞
            ]
            for degree_id, coefficient in default_coefficients:
                cursor.execute("SELECT COUNT(*) FROM degrees WHERE degree_id = %s", (degree_id,))
                if cursor.fetchone()[0] == 0:
                    messagebox.showerror("L·ªói", f"degree_id {degree_id} kh√¥ng t·ªìn t·∫°i trong b·∫£ng degrees!")
                    return
                cursor.execute("INSERT INTO teacher_coefficients (degree_id, year, coefficient) VALUES (%s, %s, %s)",
                            (degree_id, year, coefficient))
            conn.commit()
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ th√™m h·ªá s·ªë m·∫∑c ƒë·ªãnh cho nƒÉm h·ªçc {year}!")
            self.load_teacher_coefficients()
        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ th√™m h·ªá s·ªë m·∫∑c ƒë·ªãnh: {e}")
        finally:
            cursor.close()
            conn.close()

    def edit_teacher_coefficient(self, degree_id, degree_name, current_coeff, year):
        edit_window = CTkToplevel(self.window)
        edit_window.title("S·ª≠a h·ªá s·ªë gi√°o vi√™n")
        edit_window.geometry("400x250")
        edit_window.resizable(False, False)
        edit_window.transient(self.window)
        edit_window.grab_set()

        form_frame = CTkFrame(edit_window, fg_color="#F0F0F0", corner_radius=10)
        form_frame.pack(padx=20, pady=20, fill="both", expand=True)

        CTkLabel(form_frame, text="S·ª≠a h·ªá s·ªë gi√°o vi√™n", font=("Helvetica", 16, "bold"), text_color="black").pack(pady=10)

        # Degree field (disabled)
        degree_row = CTkFrame(form_frame, fg_color="transparent")
        degree_row.pack(fill="x", pady=2)
        CTkLabel(degree_row, text="B·∫±ng c·∫•p:", font=("Helvetica", 12), width=100, anchor="e").pack(side="left", padx=(0, 5))
        degree_var = CTkEntry(degree_row, width=250)
        degree_var.pack(side="left", pady=5)
        degree_var.insert(0, f"{degree_name} (ID: {degree_id})")
        degree_var.configure(state="disabled")

        # Year field (disabled)
        year_row = CTkFrame(form_frame, fg_color="transparent")
        year_row.pack(fill="x", pady=2)
        CTkLabel(year_row, text="NƒÉm h·ªçc:", font=("Helvetica", 12), width=100, anchor="e").pack(side="left", padx=(0, 5))
        year_var = CTkEntry(year_row, width=250)
        year_var.pack(side="left", pady=5)
        year_var.insert(0, year)
        year_var.configure(state="disabled")

        # Coefficient field
        coeff_row = CTkFrame(form_frame, fg_color="transparent")
        coeff_row.pack(fill="x", pady=2)
        CTkLabel(coeff_row, text="H·ªá s·ªë:", font=("Helvetica", 12), width=100, anchor="e").pack(side="left", padx=(0, 5))
        coeff_var = CTkEntry(coeff_row, width=250)
        coeff_var.pack(side="left", pady=5)
        coeff_var.insert(0, str(current_coeff))

        def save_coefficient():
            coeff = coeff_var.get().strip()
            try:
                coeff = float(coeff)
                if coeff < 1.0:
                    messagebox.showerror("L·ªói", "H·ªá s·ªë ph·∫£i l·ªõn h∆°n 1.0!", parent=edit_window)
                    return
            except ValueError:
                messagebox.showerror("L·ªói", "H·ªá s·ªë ph·∫£i l√† s·ªë h·ª£p l·ªá!", parent=edit_window)
                return

            if messagebox.askyesno("X√°c nh·∫≠n", f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën c·∫≠p nh·∫≠t h·ªá s·ªë cho nƒÉm {year}?"):
                try:
                    conn = mysql.connector.connect(**DB_CONFIG)
                    cursor = conn.cursor()
                    # Ki·ªÉm tra b·∫£n ghi hi·ªán t·∫°i
                    cursor.execute("""
                        SELECT coefficient FROM teacher_coefficients 
                        WHERE degree_id = %s AND year = %s
                    """, (degree_id, year))
                    existing_coeff = cursor.fetchone()

                    if existing_coeff:
                        cursor.execute("""
                            UPDATE teacher_coefficients 
                            SET coefficient = %s 
                            WHERE degree_id = %s AND year = %s
                        """, (coeff, degree_id, year))
                    else:
                        cursor.execute("""
                            INSERT INTO teacher_coefficients (year, degree_id, coefficient)
                            VALUES (%s, %s, %s)
                        """, (year, degree_id, coeff))
                    conn.commit()

                    # Ki·ªÉm tra to√†n b·ªô d·ªØ li·ªáu sau khi c·∫≠p nh·∫≠t
                    cursor.execute("""
                        SELECT year, coefficient FROM teacher_coefficients 
                        WHERE degree_id = %s ORDER BY year
                    """, (degree_id,))
                    all_coeffs_after = cursor.fetchall()
                    print(f"Debug [10:46 AM, 14/06/2025] - Updated coefficient for degree_id: {degree_id}, year: {year}, new_coeff: {coeff}, existing: {existing_coeff}, all_coeffs_after: {all_coeffs_after}")
                    messagebox.showinfo("Th√†nh c√¥ng", f"C·∫≠p nh·∫≠t h·ªá s·ªë cho nƒÉm {year} th√†nh c√¥ng!")
                    self.load_teacher_coefficients()
                    edit_window.destroy()
                except mysql.connector.Error as e:
                    messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ l∆∞u h·ªá s·ªë: {e}", parent=edit_window)
                finally:
                    cursor.close()
                    conn.close()

        button_frame = CTkFrame(form_frame, fg_color="transparent")
        button_frame.pack(pady=10)
        CTkButton(button_frame, text="L∆∞u", fg_color="#0085FF", command=save_coefficient, width=100).pack(side="left", padx=5)
        CTkButton(button_frame, text="H·ªßy", fg_color="#6C757D", command=edit_window.destroy, width=100).pack(side="left", padx=5)

    def delete_teacher_coefficient(self, degree_id, degree_name, year):
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            # Ki·ªÉm tra xem c√≥ ƒëang s·ª≠ d·ª•ng trong ph√¢n c√¥ng kh√¥ng
            cursor.execute("""
                SELECT 1 
                FROM teachers t 
                WHERE t.degree_id = %s 
                LIMIT 1
            """, (degree_id,))
            if cursor.fetchone():
                messagebox.showwarning("C·∫£nh b√°o", f"B·∫±ng c·∫•p {degree_name} ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng trong ph√¢n c√¥ng. X√≥a c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn d·ªØ li·ªáu!")
                if not messagebox.askyesno("X√°c nh·∫≠n", f"B·∫°n v·∫´n mu·ªën x√≥a h·ªá s·ªë c·ªßa {degree_name} trong nƒÉm {year}?"):
                    return
        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ki·ªÉm tra ph√¢n c√¥ng: {e}")
            return
        finally:
            cursor.close()
            conn.close()

        if messagebox.askyesno("X√°c nh·∫≠n", f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a h·ªá s·ªë c·ªßa {degree_name} trong nƒÉm {year}?"):
            try:
                conn = mysql.connector.connect(**DB_CONFIG)
                cursor = conn.cursor()
                cursor.execute("DELETE FROM teacher_coefficients WHERE degree_id = %s AND year = %s", (degree_id, year))
                conn.commit()
                messagebox.showinfo("Th√†nh c√¥ng", "X√≥a h·ªá s·ªë th√†nh c√¥ng!")
                self.load_teacher_coefficients()
            except mysql.connector.Error as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ x√≥a h·ªá s·ªë: {e}")
            finally:
                cursor.close()
                conn.close()
    def load_teacher_coefficients(self, event=None):
        year = self.coefficient_year_filter.get().strip()
        if not year:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn nƒÉm h·ªçc")
            return

        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()

            # L·∫•y t·∫•t c·∫£ b·∫±ng c·∫•p v√† h·ªá s·ªë t·ª´ teacher_coefficients cho nƒÉm h·ªçc
            cursor.execute("""
                SELECT d.degree_name, tc.coefficient, d.degree_id, tc.coefficient IS NOT NULL AS has_custom_coeff
                FROM degrees d
                LEFT JOIN teacher_coefficients tc ON d.degree_id = tc.degree_id AND tc.year = %s
                ORDER BY d.degree_name
            """, (year,))
            rows = cursor.fetchall()

            # Clear previous data
            for widget in self.coefficient_list_frame.winfo_children():
                widget.destroy()

            if not rows:
                CTkLabel(self.coefficient_list_frame, text="Kh√¥ng c√≥ d·ªØ li·ªáu b·∫±ng c·∫•p", font=("Helvetica", 12), text_color="gray").pack(pady=10)
                return

            # Heading
            heading_frame = CTkFrame(self.coefficient_list_frame, fg_color="#D3D3D3", corner_radius=0)
            heading_frame.pack(fill="x", padx=5, pady=(5, 0))
            CTkLabel(heading_frame, text="STT", font=("Helvetica", 12, "bold"), width=50, anchor="center").pack(side="left", padx=5)
            CTkLabel(heading_frame, text="B·∫±ng c·∫•p", font=("Helvetica", 12, "bold"), width=500, anchor="center").pack(side="left", padx=5)
            CTkLabel(heading_frame, text="H·ªá s·ªë", font=("Helvetica", 12, "bold"), width=100, anchor="center").pack(side="left", padx=5)
            CTkLabel(heading_frame, text="Tr·∫°ng th√°i", font=("Helvetica", 12, "bold"), width=200, anchor="center").pack(side="left", padx=5)
            CTkLabel(heading_frame, text="Thao t√°c", font=("Helvetica", 12, "bold"), width=200, anchor="center").pack(side="left", padx=5)

            # Populate table
            for idx, (degree_name, coefficient, degree_id, has_custom_coeff) in enumerate(rows, 1):
                coefficient = coefficient if coefficient is not None else 1.0
                # X√°c ƒë·ªãnh tr·∫°ng th√°i d·ª±a tr√™n h√†nh ƒë·ªông
                if not has_custom_coeff:
                    status = "Ch∆∞a thi·∫øt l·∫≠p"  # Ban ƒë·∫ßu ho·∫∑c sau khi x√≥a
                else:
                    # Ki·ªÉm tra xem h·ªá s·ªë c√≥ kh·ªõp v·ªõi m·∫∑c ƒë·ªãnh t·ª´ degrees kh√¥ng
                    cursor.execute("SELECT coefficient FROM degrees WHERE degree_id = %s", (degree_id,))
                    default_coeff = cursor.fetchone()[0]
                    if coefficient == default_coeff:
                        status = "M·∫∑c ƒë·ªãnh"  # Sau khi ƒë·∫∑t l·∫°i th√†nh m·∫∑c ƒë·ªãnh
                    else:
                        status = "ƒê√£ thi·∫øt l·∫≠p"  # Sau khi s·ª≠a v√† kh√°c m·∫∑c ƒë·ªãnh

                row_frame = CTkFrame(self.coefficient_list_frame, fg_color="#F5F5F5" if idx % 2 else "#FFFFFF")
                row_frame.pack(fill="x", pady=2)
                CTkLabel(row_frame, text=str(idx), font=("Helvetica", 12), width=50, anchor="center").pack(side="left", padx=5)
                CTkLabel(row_frame, text=degree_name, font=("Helvetica", 12), width=500, anchor="center").pack(side="left", padx=5)
                CTkLabel(row_frame, text=f"{coefficient:.1f}", font=("Helvetica", 12), width=100, anchor="center").pack(side="left", padx=5)
                CTkLabel(row_frame, text=status, font=("Helvetica", 12), width=200, anchor="center").pack(side="left", padx=5)
                action_frame = CTkFrame(row_frame, fg_color="transparent")
                action_frame.pack(side="left", padx=5)
                CTkButton(action_frame, text="S·ª≠a", fg_color="#FFC107", width=80, command=lambda id=degree_id, name=degree_name, coeff=coefficient, y=year: self.edit_teacher_coefficient(id, name, coeff, y)).pack(side="left", padx=2)
                CTkButton(action_frame, text="X√≥a", fg_color="#F44336", width=80, command=lambda id=degree_id, name=degree_name, y=year: self.delete_teacher_coefficient(id, name, y)).pack(side="left", padx=2)

                print(f"Debug [02:32 PM, 14/06/2025] - Loaded coefficients for year: {year}, degree: {degree_name}, coefficient: {coefficient}, status: {status}")

        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu h·ªá s·ªë: {e}")
        finally:
            cursor.close()
            conn.close()

    def reset_to_default_coefficient_table(self):
        year = self.coefficient_year_filter.get().strip()
        if not year:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn nƒÉm h·ªçc")
            return

        # Hi·ªÉn th·ªã h·ªôp tho·∫°i x√°c nh·∫≠n
        if not messagebox.askyesno("X√°c nh·∫≠n", f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒë·∫∑t l·∫°i th√†nh m·∫∑c ƒë·ªãnh cho nƒÉm {year}?"):
            return  # Tho√°t n·∫øu ng∆∞·ªùi d√πng ch·ªçn "Kh√¥ng"

        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()

            # L·∫•y t·∫•t c·∫£ b·∫±ng c·∫•p t·ª´ degrees
            cursor.execute("SELECT degree_id, degree_name, coefficient FROM degrees ORDER BY degree_name")
            degrees = cursor.fetchall()

            # Ch·ªâ ƒë·∫∑t l·∫°i cho year ƒë∆∞·ª£c ch·ªçn
            affected_rows = 0
            for degree_id, degree_name, default_coeff in degrees:
                cursor.execute("""
                    INSERT INTO teacher_coefficients (year, degree_id, coefficient)
                    VALUES (%s, %s, %s)
                    ON DUPLICATE KEY UPDATE coefficient = VALUES(coefficient)
                """, (year, degree_id, default_coeff))
                affected_rows += 1
            conn.commit()

            # Ki·ªÉm tra l·∫°i d·ªØ li·ªáu sau khi ƒë·∫∑t l·∫°i
            cursor.execute("SELECT degree_id, year, coefficient FROM teacher_coefficients WHERE year = %s", (year,))
            updated_rows = cursor.fetchall()
            print(f"Debug [10:46 AM, 14/06/2025] - Reset to default for year: {year}, affected rows: {affected_rows}, updated rows: {updated_rows}")

            # C·∫≠p nh·∫≠t giao di·ªán
            self.load_teacher_coefficients()

        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ƒë·∫∑t l·∫°i th√†nh m·∫∑c ƒë·ªãnh: {e}")
        finally:
            cursor.close()
            conn.close()

    def load_teaching_rates(self):
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            
            # L·∫•y danh s√°ch nƒÉm h·ªçc t·ª´ 2020-2021 ƒë·∫øn 2029-2030
            years = [f"{y}-{y+1}" for y in range(2020, 2030)]
            existing_rates = {}  # L∆∞u tr·ªØ c√°c nƒÉm ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p
            cursor.execute("SELECT year, amount_per_period, setup_date FROM teaching_rate")
            for year, amount, setup_date in cursor.fetchall():
                existing_rates[year] = (amount, setup_date)

            # Clear previous data
            for widget in self.rate_list_frame.winfo_children():
                widget.destroy()

            # Populate table for all years
            for idx, year in enumerate(years, 1):
                row_frame = CTkFrame(self.rate_list_frame, fg_color="#F5F5F5" if idx % 2 else "#FFFFFF")
                row_frame.pack(fill="x", pady=2)
                CTkLabel(row_frame, text=str(idx), font=("Helvetica", 12), width=100, anchor="center").pack(side="left", padx=5)
                CTkLabel(row_frame, text=year, font=("Helvetica", 12), width=150, anchor="center").pack(side="left", padx=5)

                if year in existing_rates:
                    amount, setup_date = existing_rates[year]
                    CTkLabel(row_frame, text=f"{amount:,.0f} ‚Ç´", font=("Helvetica", 12), width=200, anchor="center").pack(side="left", padx=5)
                    CTkLabel(row_frame, text=setup_date.strftime("%d/%m/%Y") if setup_date else "Ch∆∞a thi·∫øt l·∫≠p", font=("Helvetica", 12), width=300, anchor="center").pack(side="left", padx=5)
                    action_frame = CTkFrame(row_frame, fg_color="transparent")
                    action_frame.pack(side="left", padx=5)
                    CTkButton(action_frame, text="S·ª≠a", fg_color="#FFC107", width=70, command=lambda y=year: self.edit_teaching_rate(y)).pack(side="left", padx=2)
                    CTkButton(action_frame, text="X√≥a", fg_color="#F44336", width=70, command=lambda y=year: self.delete_teaching_rate(y)).pack(side="left", padx=2)
                else:
                    CTkLabel(row_frame, text="Ch∆∞a thi·∫øt l·∫≠p", font=("Helvetica", 12), width=200, anchor="center").pack(side="left", padx=5)
                    CTkLabel(row_frame, text="Ch∆∞a thi·∫øt l·∫≠p", font=("Helvetica", 12), width=300, anchor="center").pack(side="left", padx=5)
                    action_frame = CTkFrame(row_frame, fg_color="transparent")
                    action_frame.pack(side="left", padx=5)
                    CTkButton(action_frame, text="Th√™m", fg_color="#0085FF", width=70, command=lambda y=year: self.add_teaching_rate(y)).pack(side="left", padx=40)

        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë·ªãnh m·ª©c: {e}")
        finally:
            if 'cursor' in locals():
                cursor.close()
            if 'conn' in locals():
                conn.close()

    def add_teaching_rate(self, year):
        add_window = CTkToplevel(self.window)
        add_window.title("Th√™m ƒë·ªãnh m·ª©c ti·ªÅn theo ti·∫øt")
        add_window.geometry("400x250")
        # ƒê·∫∑t c·ª≠a s·ªï ra gi·ªØa window app
        app_x = self.window.winfo_rootx()
        app_y = self.window.winfo_rooty()
        app_width = self.window.winfo_width()
        app_height = self.window.winfo_height()
        x = app_x + (app_width // 2) - (400 // 2)
        y = app_y + (app_height // 2) - (250 // 2)
        add_window.geometry(f"+{x}+{y}")
        add_window.resizable(False, False)
        add_window.transient(self.window)
        add_window.grab_set()

        form_frame = CTkFrame(add_window, fg_color="#F0F0F0", corner_radius=10)
        form_frame.pack(padx=20, pady=20, fill="both", expand=True)

        CTkLabel(form_frame, text="Th√™m ƒë·ªãnh m·ª©c ti·ªÅn theo ti·∫øt", font=("Helvetica", 16, "bold"), text_color="black").pack(pady=10)

        # Year field (disabled)
        year_row = CTkFrame(form_frame, fg_color="transparent")
        year_row.pack(fill="x", pady=2)
        CTkLabel(year_row, text="NƒÉm h·ªçc:", font=("Helvetica", 12), width=100, anchor="e").pack(side="left", padx=(0, 5))
        year_var = CTkEntry(year_row, width=250)
        year_var.pack(side="left", pady=5)
        year_var.insert(0, year)
        year_var.configure(state="disabled")

        # Amount field
        amount_row = CTkFrame(form_frame, fg_color="transparent")
        amount_row.pack(fill="x", pady=2)
        CTkLabel(amount_row, text="S·ªë ti·ªÅn (VNƒê):", font=("Helvetica", 12), width=100, anchor="e").pack(side="left", padx=(0, 5))
        amount_var = CTkEntry(amount_row, width=250, placeholder_text="Nh·∫≠p s·ªë ti·ªÅn > 0")
        amount_var.pack(side="left", pady=5)

        def save_rate():
            amount = amount_var.get().strip()
            try:
                amount = float(amount)
                if amount <= 0:
                    messagebox.showerror("L·ªói", "S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0!", parent=add_window)
                    return
            except ValueError:
                messagebox.showerror("L·ªói", "S·ªë ti·ªÅn ph·∫£i l√† s·ªë h·ª£p l·ªá!", parent=add_window)
                return

            if messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën th√™m ƒë·ªãnh m·ª©c n√†y?"):
                try:
                    conn = mysql.connector.connect(**DB_CONFIG)
                    cursor = conn.cursor()
                    cursor.execute("INSERT INTO teaching_rate (year, amount_per_period, setup_date) VALUES (%s, %s, CURDATE()) ON DUPLICATE KEY UPDATE amount_per_period = %s, setup_date = CURDATE()", (year, amount, amount))
                    conn.commit()
                    messagebox.showinfo("Th√†nh c√¥ng", "Th√™m ƒë·ªãnh m·ª©c th√†nh c√¥ng!")
                    self.load_teaching_rates()
                    add_window.destroy()
                except mysql.connector.Error as e:
                    messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ l∆∞u ƒë·ªãnh m·ª©c: {e}", parent=add_window)
                finally:
                    cursor.close()
                    conn.close()

        button_frame = CTkFrame(form_frame, fg_color="transparent")
        button_frame.pack(pady=10)
        CTkButton(button_frame, text="L∆∞u", fg_color="#0085FF", command=save_rate, width=100).pack(side="left", padx=5)
        CTkButton(button_frame, text="H·ªßy", fg_color="#6C757D", command=add_window.destroy, width=100).pack(side="left", padx=5)

    def edit_teaching_rate(self, year):
        edit_window = CTkToplevel(self.window)
        edit_window.title("S·ª≠a ƒë·ªãnh m·ª©c ti·ªÅn theo ti·∫øt")
        edit_window.geometry("400x250")
        # ƒê·∫∑t c·ª≠a s·ªï ra gi·ªØa window app
        app_x = self.window.winfo_rootx()
        app_y = self.window.winfo_rooty()
        app_width = self.window.winfo_width()
        app_height = self.window.winfo_height()
        x = app_x + (app_width // 2) - (400 // 2)
        y = app_y + (app_height // 2) - (250 // 2)
        edit_window.geometry(f"+{x}+{y}")
        edit_window.resizable(False, False)
        edit_window.transient(self.window)
        edit_window.grab_set()

        form_frame = CTkFrame(edit_window, fg_color="#F0F0F0", corner_radius=10)
        form_frame.pack(padx=20, pady=20, fill="both", expand=True)

        CTkLabel(form_frame, text="S·ª≠a ƒë·ªãnh m·ª©c ti·ªÅn theo ti·∫øt", font=("Helvetica", 16, "bold"), text_color="black").pack(pady=10)

        # Get current data
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            cursor.execute("SELECT amount_per_period, setup_date FROM teaching_rate WHERE year = %s", (year,))
            rate = cursor.fetchone()
            amount = rate[0] if rate and rate[0] > 0 else 0
            setup_date = rate[1] if rate and rate[1] else None
        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu: {e}", parent=edit_window)
            return
        finally:
            cursor.close()
            conn.close()

        # Year field (disabled)
        year_row = CTkFrame(form_frame, fg_color="transparent")
        year_row.pack(fill="x", pady=2)
        CTkLabel(year_row, text="NƒÉm h·ªçc:", font=("Helvetica", 12), width=100, anchor="e").pack(side="left", padx=(0, 5))
        year_var = CTkEntry(year_row, width=250)
        year_var.pack(side="left", pady=5)
        year_var.insert(0, year)
        year_var.configure(state="disabled")

        # Amount field
        amount_row = CTkFrame(form_frame, fg_color="transparent")
        amount_row.pack(fill="x", pady=2)
        CTkLabel(amount_row, text="S·ªë ti·ªÅn (VNƒê):", font=("Helvetica", 12), width=100, anchor="e").pack(side="left", padx=(0, 5))
        amount_var = CTkEntry(amount_row, width=250)
        amount_var.pack(side="left", pady=5)
        amount_var.insert(0, str(amount))

        def save_rate():
            amount = amount_var.get().strip()
            try:
                amount = float(amount)
                if amount < 0:
                    messagebox.showerror("L·ªói", "S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 0!", parent=edit_window)
                    return
            except ValueError:
                messagebox.showerror("L·ªói", "S·ªë ti·ªÅn ph·∫£i l√† s·ªë h·ª£p l·ªá!", parent=edit_window)
                return

            try:
                conn = mysql.connector.connect(**DB_CONFIG)
                cursor = conn.cursor()
                cursor.execute("INSERT INTO teaching_rate (year, amount_per_period, setup_date) VALUES (%s, %s, CURDATE()) ON DUPLICATE KEY UPDATE amount_per_period = %s, setup_date = CURDATE()", (year, amount, amount))
                conn.commit()
                messagebox.showinfo("Th√†nh c√¥ng", "C·∫≠p nh·∫≠t ƒë·ªãnh m·ª©c th√†nh c√¥ng!")
                self.load_teaching_rates()
                edit_window.destroy()
            except mysql.connector.Error as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ l∆∞u ƒë·ªãnh m·ª©c: {e}", parent=edit_window)
            finally:
                cursor.close()
                conn.close()

        button_frame = CTkFrame(form_frame, fg_color="transparent")
        button_frame.pack(pady=10)
        CTkButton(button_frame, text="L∆∞u", fg_color="#0085FF", command=save_rate, width=100).pack(side="left", padx=5)
        CTkButton(button_frame, text="H·ªßy", fg_color="#6C757D", command=edit_window.destroy, width=100).pack(side="left", padx=5)

    def delete_teaching_rate(self, year):
        if messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ƒë·ªãnh m·ª©c n√†y?"):
            try:
                conn = mysql.connector.connect(**DB_CONFIG)
                cursor = conn.cursor()
                cursor.execute("DELETE FROM teaching_rate WHERE year = %s", (year,))
                conn.commit()
                messagebox.showinfo("Th√†nh c√¥ng", "X√≥a ƒë·ªãnh m·ª©c th√†nh c√¥ng!")
                self.load_teaching_rates()
            except mysql.connector.Error as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ x√≥a ƒë·ªãnh m·ª©c: {e}")
            finally:
                cursor.close()
                conn.close()

    def load_class_coefficients(self, event=None):
        year = self.coeff_year_filter.get().strip()
        if not year:
            return

        ranges = [
            "<20 sinh vi√™n", "20-29 sinh vi√™n", "30-39 sinh vi√™n", "40-49 sinh vi√™n",
            "50-59 sinh vi√™n", "60-69 sinh vi√™n", "70-79 sinh vi√™n", "80-89 sinh vi√™n",
            "90-99 sinh vi√™n", ">=100 sinh vi√™n"
        ]
        coeff_data = {}

        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            cursor.execute("SELECT student_range, coefficient, is_standard FROM class_coefficients WHERE year = %s ORDER BY FIELD(student_range, %s)", (year, ", ".join(f"'{r}'" for r in ranges)))
            rows = cursor.fetchall()
            print(f"Debug: D·ªØ li·ªáu t·ª´ class_coefficients cho year {year}: {rows}")  # Debug ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu

            for row in rows:
                coeff_data[row[0]] = {'coefficient': float(row[1]), 'is_standard': row[2]}  # Chuy·ªÉn Decimal th√†nh float

        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu h·ªá s·ªë: {e}")
        finally:
            if 'cursor' in locals():
                cursor.close()
            if 'conn' in locals():
                conn.close()

        # Clear previous data
        for widget in self.coeff_list_frame.winfo_children():
            widget.destroy()

        # Populate table
        for idx, range_str in enumerate(ranges, 1):
            row_frame = CTkFrame(self.coeff_list_frame, fg_color="#F5F5F5" if idx % 2 else "#FFFFFF", height=20)
            row_frame.pack(fill="x", pady=2)
            CTkLabel(row_frame, text=str(idx), font=("Helvetica", 12), text_color="black", width=160, anchor="center").pack(side="left", padx=5)
            CTkLabel(row_frame, text=range_str, font=("Helvetica", 12), text_color="black", width=400, anchor="center").pack(side="left", padx=5)
            if range_str in coeff_data:
                coeff = coeff_data[range_str]['coefficient']
                is_standard = coeff_data[range_str]['is_standard']
                CTkLabel(row_frame, text=f"{coeff:.1f}", font=("Helvetica", 12), text_color="black", width=250, anchor="center").pack(side="left", padx=1)
                note = "Kho·∫£ng chu·∫©n ‚úì" if is_standard else ""
                CTkLabel(row_frame, text=note, font=("Helvetica", 12), text_color="green" if is_standard else "black", width=200, anchor="center").pack(side="left", padx=5)
            else:
                CTkLabel(row_frame, text="Ch∆∞a thi·∫øt l·∫≠p", font=("Helvetica", 12), text_color="gray", width=250, anchor="center").pack(side="left", padx=5)
                CTkLabel(row_frame, text="", font=("Helvetica", 12), text_color="black", width=200, anchor="center").pack(side="left", padx=5)

    def setup_standard_range(self):
        year = self.coeff_year_filter.get().strip()
        if not year:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn nƒÉm h·ªçc")
            return

        setup_window = CTkToplevel(self.window)
        setup_window.title("Thi·∫øt l·∫≠p kho·∫£ng chu·∫©n")
        setup_window.geometry("400x250")
        # ƒê·∫∑t c·ª≠a s·ªï ra gi·ªØa window app
        app_x = self.window.winfo_rootx()
        app_y = self.window.winfo_rooty()
        app_width = self.window.winfo_width()
        app_height = self.window.winfo_height()
        x = app_x + (app_width // 2) - (400 // 2)
        y = app_y + (app_height // 2) - (250 // 2)
        setup_window.geometry(f"+{x}+{y}")
        setup_window.resizable(False, False)
        setup_window.transient(self.window)
        setup_window.grab_set()

        form_frame = CTkFrame(setup_window, fg_color="#F0F0F0", corner_radius=10)
        form_frame.pack(padx=20, pady=20, fill="both", expand=True)

        CTkLabel(form_frame, text="Ch·ªçn kho·∫£ng chu·∫©n", font=("Helvetica", 16, "bold"), text_color="black").pack(pady=10)

        ranges = [
            "<20 sinh vi√™n", "20-29 sinh vi√™n", "30-39 sinh vi√™n", "40-49 sinh vi√™n",
            "50-59 sinh vi√™n", "60-69 sinh vi√™n", "70-79 sinh vi√™n", "80-89 sinh vi√™n",
            "90-99 sinh vi√™n", ">=100 sinh vi√™n"
        ]
        selected_range = CTkComboBox(form_frame, values=ranges, width=350)
        selected_range.pack(pady=5)

        def save_standard():
            range_str = selected_range.get().strip()
            if not range_str:
                messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn kho·∫£ng chu·∫©n!")
                return

            try:
                conn = mysql.connector.connect(**DB_CONFIG)
                cursor = conn.cursor()
                # X√≥a d·ªØ li·ªáu c≈© c·ªßa nƒÉm h·ªçc n√†y
                cursor.execute("DELETE FROM class_coefficients WHERE year = %s", (year,))
                conn.commit()

                # T√≠nh to√°n v√† ch√®n d·ªØ li·ªáu m·ªõi
                standard_idx = ranges.index(range_str)
                for idx, r in enumerate(ranges):
                    coeff = 0.0
                    if idx < standard_idx:
                        coeff = -0.1 * (standard_idx - idx)
                    elif idx > standard_idx:
                        coeff = 0.1 * (idx - standard_idx)
                    is_std = (idx == standard_idx)
                    cursor.execute("INSERT INTO class_coefficients (year, student_range, coefficient, is_standard) VALUES (%s, %s, %s, %s)",
                                (year, r, coeff, is_std))
                conn.commit()
                messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ thi·∫øt l·∫≠p kho·∫£ng chu·∫©n {range_str} cho nƒÉm {year}!")
                self.load_class_coefficients()
                setup_window.destroy()
            except mysql.connector.Error as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ l∆∞u thi·∫øt l·∫≠p: {e}")
            finally:
                if 'cursor' in locals():
                    cursor.close()
                if 'conn' in locals():
                    conn.close()

        button_frame = CTkFrame(form_frame, fg_color="transparent")
        button_frame.pack(pady=10)
        CTkButton(button_frame, text="L∆∞u", fg_color="#0085FF", command=save_standard, width=100).pack(side="left", padx=5)
        CTkButton(button_frame, text="H·ªßy", fg_color="#6C757D", command=setup_window.destroy, width=100).pack(side="left", padx=5)

    def get_academic_years_with_semesters(self):
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            cursor.execute("SELECT DISTINCT year FROM semesters ORDER BY year")
            years = [row[0] for row in cursor.fetchall()]
            return years if years else ["2025-2026"]
        except mysql.connector.Error:
            return ["2025-2026"]
        finally:
            cursor.close()
            conn.close()

    def update_semester_options(self, event=None):
        year = self.year_filter.get().strip()
        if year:
            try:
                conn = mysql.connector.connect(**DB_CONFIG)
                cursor = conn.cursor()
                cursor.execute("SELECT semester_name FROM semesters WHERE year = %s ORDER BY semester_name", (year,))
                semesters = [row[0] for row in cursor.fetchall()]
                self.semester_filter.configure(values=semesters if semesters else ["K·ª≥ 1", "K·ª≥ 2", "K·ª≥ 3"])
                self.semester_filter.set(semesters[0] if semesters else "K·ª≥ 1")
            except mysql.connector.Error:
                self.semester_filter.configure(values=["K·ª≥ 1", "K·ª≥ 2", "K·ª≥ 3"])
                self.semester_filter.set("K·ª≥ 1")
            finally:
                if 'cursor' in locals():
                    cursor.close()
                if 'conn' in locals():
                    conn.close()
        else:
            self.semester_filter.configure(values=["K·ª≥ 1", "K·ª≥ 2", "K·ª≥ 3"])
            self.semester_filter.set("K·ª≥ 1")

    def update_teacher_options(self, event=None):
        dept = self.dept_filter.get().strip()
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            if dept == "Ch·ªçn khoa" or dept == "T·∫•t c·∫£ khoa":
                cursor.execute("SELECT teacher_id, full_name FROM teachers ORDER BY full_name")
            else:
                cursor.execute("SELECT teacher_id, full_name FROM teachers WHERE dept_id = (SELECT dept_id FROM departments WHERE dept_name = %s) ORDER BY full_name", (dept,))
            teachers = cursor.fetchall()
            teacher_list = [f"{row[1]} - {row[0]}" if row[1] and row[0] else "Ch·ªçn gi·∫£ng vi√™n" for row in teachers]
            self.teacher_filter.configure(values=["Ch·ªçn gi·∫£ng vi√™n"] + teacher_list)
            self.teacher_filter.set("Ch·ªçn gi·∫£ng vi√™n" if not teacher_list else teacher_list[0])
        except mysql.connector.Error as e:
            self.teacher_filter.configure(values=["Ch·ªçn gi·∫£ng vi√™n"])
            self.teacher_filter.set("Ch·ªçn gi·∫£ng vi√™n")
        finally:
            cursor.close()
            conn.close()

    def calculate_salary_display(self):
        year = self.year_filter.get().strip()
        semester = self.semester_filter.get().strip()
        teacher_str = self.teacher_filter.get().strip()

        if not teacher_str or teacher_str == "Ch·ªçn gi·∫£ng vi√™n":
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn gi·∫£ng vi√™n!")
            return

        if year == "Ch·ªçn nƒÉm h·ªçc" or semester == "Ch·ªçn k·ª≥ h·ªçc":
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn nƒÉm h·ªçc v√† k·ª≥ h·ªçc!")
            return

        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()

            # Tr√≠ch xu·∫•t teacher_id t·ª´ teacher_str
            teacher_parts = teacher_str.split(" - ")
            if len(teacher_parts) < 2:
                messagebox.showerror("L·ªói", "ƒê·ªãnh d·∫°ng gi·∫£ng vi√™n kh√¥ng h·ª£p l·ªá!")
                return
            teacher_id = teacher_parts[1].strip()

            # L·∫•y th√¥ng tin gi·∫£ng vi√™n
            cursor.execute("""
                SELECT t.full_name, t.teacher_id, d.degree_name, dept.dept_name 
                FROM teachers t 
                JOIN degrees d ON t.degree_id = d.degree_id 
                JOIN departments dept ON t.dept_id = dept.dept_id 
                WHERE t.teacher_id = %s
            """, (teacher_id,))
            teacher = cursor.fetchone()
            if not teacher:
                messagebox.showerror("L·ªói", f"Kh√¥ng t√¨m th·∫•y gi·∫£ng vi√™n v·ªõi m√£ {teacher_id}")
                return
            full_name, teacher_id_db, degree_name, dept_name = teacher

            # L·∫•y h·ªá s·ªë gi√°o vi√™n
            cursor.execute("""
                SELECT coefficient 
                FROM teacher_coefficients tc 
                JOIN teachers t ON tc.degree_id = t.degree_id 
                WHERE t.teacher_id = %s AND tc.year = %s
            """, (teacher_id, year))
            teacher_coeff = cursor.fetchone()
            teacher_coefficient = float(teacher_coeff[0]) if teacher_coeff else 1.0

            # L·∫•y ƒë∆°n gi√°
            cursor.execute("SELECT amount_per_period FROM teaching_rate WHERE year = %s", (year,))
            rate = cursor.fetchone()
            amount_per_period = float(rate[0]) if rate else 0.0

            # L·∫•y semester_id
            cursor.execute("SELECT semester_id FROM semesters WHERE year = %s AND semester_name = %s", (year, semester))
            semester_id = cursor.fetchone()
            if not semester_id:
                messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y k·ª≥ h·ªçc!")
                return
            semester_id = semester_id[0]

            # C·∫≠p nh·∫≠t giao di·ªán, ki·ªÉm tra None v√† widget t·ªìn t·∫°i
            if hasattr(self, 'salary_calc_teacher_name_value') and self.salary_calc_teacher_name_value is not None and self.salary_calc_teacher_name_value.winfo_exists():
                self.salary_calc_teacher_name_value.configure(text=full_name or "Kh√¥ng x√°c ƒë·ªãnh")
            if hasattr(self, 'salary_calc_teacher_id_value') and self.salary_calc_teacher_id_value is not None and self.salary_calc_teacher_id_value.winfo_exists():
                self.salary_calc_teacher_id_value.configure(text=teacher_id_db or "Kh√¥ng x√°c ƒë·ªãnh")
            if hasattr(self, 'salary_calc_degree_value') and self.salary_calc_degree_value is not None and self.salary_calc_degree_value.winfo_exists():
                self.salary_calc_degree_value.configure(text=degree_name or "Kh√¥ng x√°c ƒë·ªãnh")
            if hasattr(self, 'salary_calc_dept_value') and self.salary_calc_dept_value is not None and self.salary_calc_dept_value.winfo_exists():
                self.salary_calc_dept_value.configure(text=dept_name or "Kh√¥ng x√°c ƒë·ªãnh")
            if hasattr(self, 'salary_calc_teacher_coeff_value') and self.salary_calc_teacher_coeff_value is not None and self.salary_calc_teacher_coeff_value.winfo_exists():
                self.salary_calc_teacher_coeff_value.configure(text=f"{teacher_coefficient:.1f}")
            if hasattr(self, 'salary_calc_rate_value') and self.salary_calc_rate_value is not None and self.salary_calc_rate_value.winfo_exists():
                self.salary_calc_rate_value.configure(text=f"{amount_per_period:,.0f} ‚Ç´")
            if hasattr(self, 'salary_calc_period_value') and self.salary_calc_period_value is not None and self.salary_calc_period_value.winfo_exists():
                self.salary_calc_period_value.configure(text=f"{semester} - {year}")

            # Ki·ªÉm tra v√† t·∫£i b·∫£ng l∆∞∆°ng
            cursor.execute("""
                SELECT c.class_id, cm.periods, c.num_students, cm.coefficient AS hp_coeff
                FROM assignments a
                JOIN classes c ON a.class_id = c.class_id
                JOIN course_modules cm ON c.module_id = cm.module_id
                WHERE a.teacher_id = %s AND c.semester_id = %s
            """, (teacher_id, semester_id))
            classes = cursor.fetchall()

            if not classes:
                # X√≥a d·ªØ li·ªáu c≈© v√† hi·ªÉn th·ªã th√¥ng b√°o "Kh√¥ng c√≥ d·ªØ li·ªáu"
                for widget in self.salary_table_frame.winfo_children():
                    widget.destroy()
                CTkLabel(self.salary_table_frame, text="Kh√¥ng c√≥ d·ªØ li·ªáu", font=("Helvetica", 12), text_color="gray").pack(pady=20)
            else:
                self.load_salary_table(teacher_id, semester_id)

        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i th√¥ng tin: {e}")
        finally:
            if 'cursor' in locals():
                cursor.close()
            if 'conn' in locals():
                conn.close()

    def load_salary_table(self, teacher_id, semester_id):
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            
            # Thay ƒë·ªïi truy v·∫•n ƒë·ªÉ l·∫•y enrolled_students t·ª´ b·∫£ng class_enrollments
            cursor.execute("""
                SELECT c.class_id, cm.periods, COALESCE(ce.enrolled_students, 0) as enrolled_students, 
                    cm.coefficient AS hp_coeff
                FROM assignments a
                JOIN classes c ON a.class_id = c.class_id
                JOIN course_modules cm ON c.module_id = cm.module_id
                LEFT JOIN class_enrollments ce ON c.class_id = ce.class_id
                WHERE a.teacher_id = %s AND c.semester_id = %s
            """, (teacher_id, semester_id))
            classes = cursor.fetchall()

            # Clear previous data
            for widget in self.salary_table_frame.winfo_children():
                widget.destroy()

            total_periods = 0
            total_salary = 0.0

            # Heading
            heading_frame = CTkFrame(self.salary_table_frame, fg_color="#D3D3D3", corner_radius=0)
            heading_frame.pack(fill="x", padx=5, pady=(5, 0))
            CTkLabel(heading_frame, text="M√£ l·ªõp", font=("Helvetica", 12, "bold"), width=200, anchor="center").pack(side="left", padx=5)
            CTkLabel(heading_frame, text="S·ªë ti·∫øt", font=("Helvetica", 12, "bold"), width=80, anchor="center").pack(side="left", padx=5)
            CTkLabel(heading_frame, text="S·ªë SV th·ª±c t·∫ø", font=("Helvetica", 12, "bold"), width=80, anchor="center").pack(side="left", padx=5)
            CTkLabel(heading_frame, text="H·ªá s·ªë HP", font=("Helvetica", 12, "bold"), width=130, anchor="center").pack(side="left", padx=5)
            CTkLabel(heading_frame, text="H·ªá s·ªë l·ªõp", font=("Helvetica", 12, "bold"), width=130, anchor="center").pack(side="left", padx=5)
            CTkLabel(heading_frame, text="S·ªë ti·∫øt quy ƒë·ªïi", font=("Helvetica", 12, "bold"), width=150, anchor="center").pack(side="left", padx=5)
            CTkLabel(heading_frame, text="Th√†nh ti·ªÅn", font=("Helvetica", 12, "bold"), width=240, anchor="center").pack(side="left", padx=5)

            year = self.year_filter.get().strip()
            cursor.execute("SELECT amount_per_period FROM teaching_rate WHERE year = %s", (year,))
            rate = cursor.fetchone()
            amount_per_period = float(rate[0]) if rate else 0.0

            # L·∫•y h·ªá s·ªë gi√°o vi√™n
            teacher_coefficient = float(self.salary_calc_teacher_coeff_value.cget("text")) if hasattr(self, 'salary_calc_teacher_coeff_value') else 1.0

            for idx, (class_id, periods, enrolled_students, hp_coeff) in enumerate(classes, 1):
                # L·∫•y h·ªá s·ªë l·ªõp d·ª±a tr√™n s·ªë sinh vi√™n th·ª±c t·∫ø (enrolled_students)
                student_range = self.get_student_range(enrolled_students)
                cursor.execute("""
                    SELECT coefficient 
                    FROM class_coefficients 
                    WHERE year = %s AND student_range = %s
                """, (year, student_range))
                class_coeff = cursor.fetchone()
                class_coefficient = float(class_coeff[0]) if class_coeff else 0.0

                # T√≠nh to√°n v·ªõi enrolled_students
                converted_periods = periods * (hp_coeff + class_coefficient)
                salary = converted_periods * teacher_coefficient * amount_per_period
                total_periods += converted_periods
                total_salary += salary

                row_frame = CTkFrame(self.salary_table_frame, fg_color="#F5F5F5" if idx % 2 else "#FFFFFF")
                row_frame.pack(fill="x", pady=2)
                CTkLabel(row_frame, text=class_id, font=("Helvetica", 12), width=200, anchor="center").pack(side="left", padx=5)
                CTkLabel(row_frame, text=str(periods), font=("Helvetica", 12), width=80, anchor="center").pack(side="left", padx=5)
                CTkLabel(row_frame, text=str(enrolled_students), font=("Helvetica", 12), width=80, anchor="center").pack(side="left", padx=5)
                CTkLabel(row_frame, text=f"{hp_coeff:.1f}", font=("Helvetica", 12), width=130, anchor="center").pack(side="left", padx=5)
                CTkLabel(row_frame, text=f"{class_coefficient:.1f}", font=("Helvetica", 12), width=130, anchor="center").pack(side="left", padx=5)
                CTkLabel(row_frame, text=f"{converted_periods:.1f}", font=("Helvetica", 12), width=150, anchor="center").pack(side="left", padx=5)
                CTkLabel(row_frame, text=f"{salary:,.0f} ‚Ç´", font=("Helvetica", 12), width=240, anchor="center").pack(side="left", padx=5)

            # Total row
            total_frame = CTkFrame(self.salary_table_frame, fg_color="#E0E0E0")
            total_frame.pack(fill="x", pady=2)
            CTkLabel(total_frame, text="T·ªïng c·ªông:", font=("Helvetica", 12, "bold"), width=270, anchor="center").pack(side="left", padx=200)
            CTkLabel(total_frame, text=f"{total_periods:.1f}", font=("Helvetica", 12, "bold"), width=150, anchor="center").pack(side="left", padx=5)
            CTkLabel(total_frame, text=f"{total_salary:,.0f} ‚Ç´", font=("Helvetica", 12, "bold"), width=240, anchor="center").pack(side="left", padx=5)

        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i b·∫£ng l∆∞∆°ng: {e}")
        finally:
            if cursor:
                cursor.close()
            if conn:
                conn.close()

    def get_student_range(self, num_students):
        ranges = [
            "<20 sinh vi√™n", "20-29 sinh vi√™n", "30-39 sinh vi√™n", "40-49 sinh vi√™n",
            "50-59 sinh vi√™n", "60-69 sinh vi√™n", "70-79 sinh vi√™n", "80-89 sinh vi√™n",
            "90-99 sinh vi√™n", ">=100 sinh vi√™n"
        ]
        if num_students < 20:
            return ranges[0]
        elif num_students < 30:
            return ranges[1]
        elif num_students < 40:
            return ranges[2]
        elif num_students < 50:
            return ranges[3]
        elif num_students < 60:
            return ranges[4]
        elif num_students < 70:
            return ranges[5]
        elif num_students < 80:
            return ranges[6]
        elif num_students < 90:
            return ranges[7]
        elif num_students < 100:
            return ranges[8]
        else:
            return ranges[9]
        def load_salary_table(self, teacher_id, semester_id):
            try:
                conn = mysql.connector.connect(**DB_CONFIG)
                cursor = conn.cursor()
                
                # Thay ƒë·ªïi truy v·∫•n ƒë·ªÉ l·∫•y enrolled_students t·ª´ b·∫£ng class_enrollments
                cursor.execute("""
                    SELECT c.class_id, cm.periods, COALESCE(ce.enrolled_students, 0) as enrolled_students, 
                        cm.coefficient AS hp_coeff
                    FROM assignments a
                    JOIN classes c ON a.class_id = c.class_id
                    JOIN course_modules cm ON c.module_id = cm.module_id
                    LEFT JOIN class_enrollments ce ON c.class_id = ce.class_id
                    WHERE a.teacher_id = %s AND c.semester_id = %s
                """, (teacher_id, semester_id))
                classes = cursor.fetchall()

                # Clear previous data
                for widget in self.salary_table_frame.winfo_children():
                    widget.destroy()

                total_periods = 0
                total_salary = 0.0

                # TƒÉng k√≠ch th∆∞·ªõc font v√† chi·ªÅu cao cho heading
                heading_frame = CTkFrame(self.salary_table_frame, fg_color="#D3D3D3", corner_radius=0, height=50)
                heading_frame.pack(fill="x", padx=5, pady=(5, 0))
                heading_frame.pack_propagate(False)  # Prevent frame from shrinking

                # TƒÉng font size v√† width cho c√°c c·ªôt heading
                CTkLabel(heading_frame, text="M√£ l·ªõp", font=("Helvetica", 14, "bold"), width=250, anchor="center").pack(side="left", padx=5, pady=10)
                CTkLabel(heading_frame, text="S·ªë ti·∫øt", font=("Helvetica", 14, "bold"), width=100, anchor="center").pack(side="left", padx=5, pady=10)
                CTkLabel(heading_frame, text="S·ªë SV th·ª±c t·∫ø", font=("Helvetica", 14, "bold"), width=100, anchor="center").pack(side="left", padx=5, pady=10)
                CTkLabel(heading_frame, text="H·ªá s·ªë HP", font=("Helvetica", 14, "bold"), width=150, anchor="center").pack(side="left", padx=5, pady=10)
                CTkLabel(heading_frame, text="H·ªá s·ªë l·ªõp", font=("Helvetica", 14, "bold"), width=150, anchor="center").pack(side="left", padx=5, pady=10)
                CTkLabel(heading_frame, text="S·ªë ti·∫øt quy ƒë·ªïi", font=("Helvetica", 14, "bold"), width=170, anchor="center").pack(side="left", padx=5, pady=10)
                CTkLabel(heading_frame, text="Th√†nh ti·ªÅn", font=("Helvetica", 14, "bold"), width=280, anchor="center").pack(side="left", padx=5, pady=10)

                year = self.year_filter.get().strip()
                cursor.execute("SELECT amount_per_period FROM teaching_rate WHERE year = %s", (year,))
                rate = cursor.fetchone()
                amount_per_period = float(rate[0]) if rate else 0.0

                teacher_coefficient = float(self.salary_calc_teacher_coeff_value.cget("text")) if hasattr(self, 'salary_calc_teacher_coeff_value') else 1.0

                for idx, (class_id, periods, enrolled_students, hp_coeff) in enumerate(classes, 1):
                    student_range = self.get_student_range(enrolled_students)
                    cursor.execute("""
                        SELECT coefficient 
                        FROM class_coefficients 
                        WHERE year = %s AND student_range = %s
                    """, (year, student_range))
                    class_coeff = cursor.fetchone()
                    class_coefficient = float(class_coeff[0]) if class_coeff else 0.0

                    converted_periods = periods * (hp_coeff + class_coefficient)
                    salary = converted_periods * teacher_coefficient * amount_per_period
                    total_periods += converted_periods
                    total_salary += salary

                    # TƒÉng chi·ªÅu cao cho m·ªói d√≤ng d·ªØ li·ªáu
                    row_frame = CTkFrame(self.salary_table_frame, fg_color="#F5F5F5" if idx % 2 else "#FFFFFF", height=45)
                    row_frame.pack(fill="x", pady=2)
                    row_frame.pack_propagate(False)  # Prevent frame from shrinking

                    # TƒÉng font size v√† width cho c√°c c·ªôt d·ªØ li·ªáu
                    CTkLabel(row_frame, text=class_id, font=("Helvetica", 13), width=250, anchor="center").pack(side="left", padx=5, pady=5)
                    CTkLabel(row_frame, text=str(periods), font=("Helvetica", 13), width=100, anchor="center").pack(side="left", padx=5, pady=5)
                    CTkLabel(row_frame, text=str(enrolled_students), font=("Helvetica", 13), width=100, anchor="center").pack(side="left", padx=5, pady=5)
                    CTkLabel(row_frame, text=f"{hp_coeff:.1f}", font=("Helvetica", 13), width=150, anchor="center").pack(side="left", padx=5, pady=5)
                    CTkLabel(row_frame, text=f"{class_coefficient:.1f}", font=("Helvetica", 13), width=150, anchor="center").pack(side="left", padx=5, pady=5)
                    CTkLabel(row_frame, text=f"{converted_periods:.1f}", font=("Helvetica", 13), width=170, anchor="center").pack(side="left", padx=5, pady=5)
                    CTkLabel(row_frame, text=f"{salary:,.0f} ‚Ç´", font=("Helvetica", 13), width=280, anchor="center").pack(side="left", padx=5, pady=5)

                # TƒÉng k√≠ch th∆∞·ªõc cho d√≤ng t·ªïng c·ªông
                total_frame = CTkFrame(self.salary_table_frame, fg_color="#E0E0E0", height=50)
                total_frame.pack(fill="x", pady=2)
                total_frame.pack_propagate(False)

                CTkLabel(total_frame, text="T·ªïng c·ªông:", font=("Helvetica", 14, "bold"), width=600, anchor="center").pack(side="left", padx=200, pady=10)
                CTkLabel(total_frame, text=f"{total_periods:.1f}", font=("Helvetica", 14, "bold"), width=170, anchor="center").pack(side="left", padx=5, pady=10)
                CTkLabel(total_frame, text=f"{total_salary:,.0f} ‚Ç´", font=("Helvetica", 14, "bold"), width=280, anchor="center").pack(side="left", padx=5, pady=10)

            except mysql.connector.Error as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i b·∫£ng l∆∞∆°ng: {e}")
            finally:
                if cursor:
                    cursor.close()
                if conn:
                    conn.close()
            

        def get_student_range(self, num_students):
            ranges = [
                "<20 sinh vi√™n", "20-29 sinh vi√™n", "30-39 sinh vi√™n", "40-49 sinh vi√™n",
                "50-59 sinh vi√™n", "60-69 sinh vi√™n", "70-79 sinh vi√™n", "80-89 sinh vi√™n",
                "90-99 sinh vi√™n", ">=100 sinh vi√™n"
            ]
            if num_students < 20:
                return ranges[0]
            elif num_students < 30:
                return ranges[1]
            elif num_students < 40:
                return ranges[2]
            elif num_students < 50:
                return ranges[3]
            elif num_students < 60:
                return ranges[4]
            elif num_students < 70:
                return ranges[5]
            elif num_students < 80:
                return ranges[6]
            elif num_students < 90:
                return ranges[7]
            elif num_students < 100:
                return ranges[8]
            else:
                return ranges[9]
        
    def get_dept_names(self):
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            cursor.execute("SELECT dept_name FROM departments ORDER BY dept_name")
            depts = [row[0] for row in cursor.fetchall()]
            return depts
        except mysql.connector.Error:
            return ["Khoa C√¥ng ngh·ªá th√¥ng tin"]
        finally:
            if 'cursor' in locals():
                cursor.close()
            if 'conn' in locals():
                conn.close()

    def reset_salary_calc(self):
        # Reset c√°c combobox
        self.year_filter.set("Ch·ªçn nƒÉm h·ªçc")
        self.semester_filter.set("Ch·ªçn k·ª≥ h·ªçc")
        self.dept_filter.set("Ch·ªçn khoa")
        self.teacher_filter.set("Ch·ªçn gi·∫£ng vi√™n")
        
        # Reset th√¥ng tin gi·∫£ng vi√™n
        if hasattr(self, 'salary_calc_teacher_name_value') and self.salary_calc_teacher_name_value is not None and self.salary_calc_teacher_name_value.winfo_exists():
            self.salary_calc_teacher_name_value.configure(text="")
        if hasattr(self, 'salary_calc_teacher_id_value') and self.salary_calc_teacher_id_value is not None and self.salary_calc_teacher_id_value.winfo_exists():
            self.salary_calc_teacher_id_value.configure(text="")
        if hasattr(self, 'salary_calc_degree_value') and self.salary_calc_degree_value is not None and self.salary_calc_degree_value.winfo_exists():
            self.salary_calc_degree_value.configure(text="")
        if hasattr(self, 'salary_calc_dept_value') and self.salary_calc_dept_value is not None and self.salary_calc_dept_value.winfo_exists():
            self.salary_calc_dept_value.configure(text="")
        if hasattr(self, 'salary_calc_teacher_coeff_value') and self.salary_calc_teacher_coeff_value is not None and self.salary_calc_teacher_coeff_value.winfo_exists():
            self.salary_calc_teacher_coeff_value.configure(text="")
        if hasattr(self, 'salary_calc_rate_value') and self.salary_calc_rate_value is not None and self.salary_calc_rate_value.winfo_exists():
            self.salary_calc_rate_value.configure(text="")
        if hasattr(self, 'salary_calc_period_value') and self.salary_calc_period_value is not None and self.salary_calc_period_value.winfo_exists():
            self.salary_calc_period_value.configure(text="")

        # X√≥a b·∫£ng l∆∞∆°ng
        for widget in self.salary_table_frame.winfo_children():
            widget.destroy()

        # X√≥a n√∫t L∆∞u n·∫øu t·ªìn t·∫°i
        if self.save_button and self.save_button.winfo_exists():
            self.save_button.destroy()
            self.save_button = None

    def save_salary_data(self):
        # TODO: Ph√°t tri·ªÉn ch·ª©c nƒÉng l∆∞u b·∫£ng l∆∞∆°ng v√†o CSDL
        messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn")

    def update_report_teacher_options(self, event=None):
        dept = self.salary_report_dept_filter.get().strip()
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            if dept == "Ch·ªçn khoa":
                cursor.execute("""
                    SELECT t.teacher_id, t.full_name, d.degree_name 
                    FROM teachers t 
                    JOIN degrees d ON t.degree_id = d.degree_id 
                    ORDER BY t.full_name
                """)
            else:
                cursor.execute("""
                    SELECT t.teacher_id, t.full_name, d.degree_name 
                    FROM teachers t 
                    JOIN degrees d ON t.degree_id = d.degree_id 
                    WHERE t.dept_id = (SELECT dept_id FROM departments WHERE dept_name = %s) 
                    ORDER BY t.full_name
                """, (dept,))
            teachers = cursor.fetchall()
            teacher_list = [f"{row[1]} - {row[2]}" if row[1] and row[2] else "Ch·ªçn gi·∫£ng vi√™n" for row in teachers]
            self.salary_report_teacher_filter.configure(values=teacher_list if teacher_list else ["Ch·ªçn gi·∫£ng vi√™n"])
            self.salary_report_teacher_filter.set("Ch·ªçn gi·∫£ng vi√™n")
        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i danh s√°ch gi·∫£ng vi√™n: {e}")
        finally:
            cursor.close()
            conn.close()

    def display_salary_report(self):
        year = self.salary_report_year_filter.get().strip()
        teacher_str = self.salary_report_teacher_filter.get().strip()
        
        if year == "Ch·ªçn nƒÉm" or teacher_str == "Ch·ªçn gi·∫£ng vi√™n":
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn nƒÉm v√† gi·∫£ng vi√™n!")
            return

        # T√°ch teacher_str th√†nh t√™n gi·∫£ng vi√™n v√† t√™n b·∫±ng c·∫•p
        try:
            teacher_name, degree_name = teacher_str.split(" - ") if " - " in teacher_str else (None, None)
            if not teacher_name or not degree_name:
                messagebox.showerror("L·ªói", "ƒê·ªãnh d·∫°ng gi·∫£ng vi√™n kh√¥ng h·ª£p l·ªá!")
                return

            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()

            # L·∫•y teacher_id d·ª±a tr√™n full_name v√† degree_name
            cursor.execute("""
                SELECT t.teacher_id
                FROM teachers t
                JOIN degrees d ON t.degree_id = d.degree_id
                WHERE t.full_name = %s AND d.degree_name = %s
            """, (teacher_name, degree_name))
            teacher_id_result = cursor.fetchone()
            if not teacher_id_result:
                messagebox.showerror("L·ªói", f"Kh√¥ng t√¨m th·∫•y gi·∫£ng vi√™n v·ªõi t√™n {teacher_name} v√† b·∫±ng c·∫•p {degree_name}")
                return
            teacher_id = teacher_id_result[0]

            # L·∫•y th√¥ng tin gi·∫£ng vi√™n
            cursor.execute("""
                SELECT t.full_name, t.teacher_id, d.degree_name, dept.dept_name 
                FROM teachers t 
                JOIN degrees d ON t.degree_id = d.degree_id 
                JOIN departments dept ON t.dept_id = dept.dept_id 
                WHERE t.teacher_id = %s
            """, (teacher_id,))
            teacher = cursor.fetchone()
            if not teacher:
                messagebox.showerror("L·ªói", f"Kh√¥ng t√¨m th·∫•y gi·∫£ng vi√™n v·ªõi m√£ {teacher_id}")
                return
            full_name, teacher_id, degree_name, dept_name = teacher

            # C·∫≠p nh·∫≠t th√¥ng tin gi·∫£ng vi√™n
            self.salary_report_teacher_name_value.configure(text=full_name or '-')
            self.salary_report_teacher_id_value.configure(text=teacher_id or '-')
            self.salary_report_teacher_degree_value.configure(text=degree_name or '-')
            self.salary_report_teacher_dept_value.configure(text=dept_name or '-')

            # X√≥a b·∫£ng c≈©
            for widget in self.salary_tables_frame.winfo_children():
                widget.destroy()

            # L·∫•y danh s√°ch k·ª≥ h·ªçc trong nƒÉm
            cursor.execute("SELECT semester_id, semester_name FROM semesters WHERE year = %s ORDER BY semester_name", (year,))
            semesters = cursor.fetchall()
            if not semesters:
                CTkLabel(
                    self.salary_tables_frame,
                    text="Kh√¥ng c√≥ d·ªØ li·ªáu k·ª≥ h·ªçc trong nƒÉm n√†y",
                    font=("Helvetica", 14),
                    text_color="gray"
                ).pack(pady=20)
                self.salary_report_total_salary_label.configure(text="T·ªïng ti·ªÅn d·∫°y trong nƒÉm: 0 ‚Ç´")
                self.salary_report_total_classes_label.configure(text="0")
                self.salary_report_total_periods_label.configure(text="0")
                self.salary_report_total_salary_temp_label.configure(text="0 ƒë")
                return

            total_year_salary = 0.0
            total_classes = 0
            total_periods = 0.0
            # L·∫•y teacher_coefficient
            cursor.execute("""
                SELECT tc.coefficient 
                FROM teacher_coefficients tc 
                JOIN teachers t ON tc.degree_id = t.degree_id 
                WHERE t.teacher_id = %s AND tc.year = %s
            """, (teacher_id, year))
            teacher_coeff = cursor.fetchone()
            teacher_coefficient = float(teacher_coeff[0]) if teacher_coeff else 1.0

            # L·∫•y teaching rate
            cursor.execute("SELECT amount_per_period FROM teaching_rate WHERE year = %s", (year,))
            rate = cursor.fetchone()
            amount_per_period = float(rate[0]) if rate else 0.0

            current_semester = None
            if self.current_semester_var.get():
                current_semester = semesters[0][0] if semesters else None  # L·∫•y k·ª≥ ƒë·∫ßu ti√™n n·∫øu ch·ªçn "Ch·ªâ k·ª≥ hi·ªán t·∫°i"

            for semester_id, semester_name in semesters:
                if self.current_semester_var.get() and semester_id != current_semester:
                    continue

                # L·∫•y d·ªØ li·ªáu l·ªõp h·ªçc
                cursor.execute("""
                    SELECT c.class_id, cm.periods, c.num_students, cm.coefficient AS hp_coeff
                    FROM assignments a
                    JOIN classes c ON a.class_id = c.class_id
                    JOIN course_modules cm ON c.module_id = cm.module_id
                    WHERE a.teacher_id = %s AND c.semester_id = %s
                """, (teacher_id, semester_id))
                classes = cursor.fetchall()

                if not classes:
                    continue

                # T·∫°o frame cho k·ª≥ h·ªçc
                semester_frame = CTkFrame(self.salary_tables_frame, fg_color="#FFFFFF")
                semester_frame.pack(fill="x", pady=10)

                # Ti√™u ƒë·ªÅ k·ª≥ h·ªçc
                CTkLabel(
                    semester_frame,
                    text=f"B√°o c√°o k·ª≥ {semester_name}",
                    font=("Helvetica", 14, "bold"),
                    text_color="#333"
                ).pack(anchor="w", pady=5)

                # B·∫£ng l∆∞∆°ng
                table_frame = CTkFrame(semester_frame, fg_color="#FFFFFF")
                table_frame.pack(fill="x", padx=5)

                # Heading
                heading_frame = CTkFrame(table_frame, fg_color="#D3D3D3")
                heading_frame.pack(fill="x")
                CTkLabel(heading_frame, text="M√£ l·ªõp", font=("Helvetica", 12, "bold"), text_color="#333", width=100, anchor="center").pack(side="left", padx=5)
                CTkLabel(heading_frame, text="S·ªë ti·∫øt", font=("Helvetica", 12, "bold"), text_color="#333", width=80, anchor="center").pack(side="left", padx=5)
                CTkLabel(heading_frame, text="S·ªë ti·∫øt quy ƒë·ªïi", font=("Helvetica", 12, "bold"), text_color="#333", width=120, anchor="center").pack(side="left", padx=5)
                CTkLabel(heading_frame, text="Th√†nh ti·ªÅn", font=("Helvetica", 12, "bold"), text_color="#333", width=120, anchor="center").pack(side="left", padx=5)

                total_periods_sem = 0
                total_salary = 0.0

                for idx, (class_id, periods, num_students, hp_coeff) in enumerate(classes, 1):
                    total_classes += 1
                    total_periods_sem += periods
                    # L·∫•y h·ªá s·ªë l·ªõp
                    student_range = self.get_student_range(num_students)
                    cursor.execute("SELECT coefficient FROM class_coefficients WHERE year = %s AND student_range = %s", (year, student_range))
                    class_coeff = cursor.fetchone()
                    class_coefficient = float(class_coeff[0]) if class_coeff else 0.0

                    # T√≠nh to√°n
                    converted_periods = periods * (hp_coeff + class_coefficient)
                    salary = converted_periods * teacher_coefficient * amount_per_period
                    total_periods += converted_periods
                    total_salary += salary

                    # Hi·ªÉn th·ªã h√†ng
                    row_frame = CTkFrame(table_frame, fg_color="#F5F5F5" if idx % 2 else "#FFFFFF")
                    row_frame.pack(fill="x", pady=2)
                    CTkLabel(row_frame, text=class_id, font=("Helvetica", 12), text_color="#333", width=100, anchor="center").pack(side="left", padx=5)
                    CTkLabel(row_frame, text=str(periods), font=("Helvetica", 12), text_color="#333", width=80, anchor="center").pack(side="left", padx=5)
                    CTkLabel(row_frame, text=f"{converted_periods:.1f}", font=("Helvetica", 12), text_color="#333", width=120, anchor="center").pack(side="left", padx=5)
                    CTkLabel(row_frame, text=f"{salary:,.0f} ‚Ç´", font=("Helvetica", 12), text_color="#333", width=120, anchor="center").pack(side="left", padx=5)

                # H√†ng t·ªïng
                total_frame = CTkFrame(table_frame, fg_color="#E0E0E0")
                total_frame.pack(fill="x", pady=2)
                CTkLabel(total_frame, text=f"T·ªïng ti·ªÅn d·∫°y k·ª≥ {semester_name}:", font=("Helvetica", 12, "bold"), text_color="#333", width=300, anchor="center").pack(side="left", padx=5)
                CTkLabel(total_frame, text=f"{total_salary:,.0f} ‚Ç´", font=("Helvetica", 12, "bold"), text_color="#333", width=120, anchor="center").pack(side="left", padx=5)

                total_year_salary += total_salary

            # C·∫≠p nh·∫≠t t·ªïng ti·ªÅn nƒÉm v√† th·ªëng k√™ nhanh
            self.salary_report_total_salary_label.configure(text=f"T·ªïng ti·ªÅn d·∫°y trong nƒÉm: {total_year_salary:,.0f} ‚Ç´")
            self.salary_report_total_classes_label.configure(text=str(total_classes))
            self.salary_report_total_periods_label.configure(text=f"{total_periods:.1f}")
            self.salary_report_total_salary_temp_label.configure(text=f"{total_year_salary:,.0f} ƒë")

        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i b√°o c√°o: {e}")
        finally:
            cursor.close()
            conn.close()

    def export_salary_report(self):
        year = self.report_year_filter.get().strip()
        teacher_str = self.report_teacher_filter.get().strip()
        
        if year == "Ch·ªçn nƒÉm" or teacher_str == "Ch·ªçn gi·∫£ng vi√™n":
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn nƒÉm v√† gi·∫£ng vi√™n!")
            return

        try:
            teacher_name, degree_name = teacher_str.split(" - ") if " - " in teacher_str else (None, None)
            if not teacher_name or not degree_name:
                messagebox.showerror("L·ªói", "ƒê·ªãnh d·∫°ng gi·∫£ng vi√™n kh√¥ng h·ª£p l·ªá!")
                return

            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()

            # L·∫•y teacher_id
            cursor.execute("""
                SELECT t.teacher_id
                FROM teachers t
                JOIN degrees d ON t.degree_id = d.degree_id
                WHERE t.full_name = %s AND d.degree_name = %s
            """, (teacher_name, degree_name))
            teacher_id_result = cursor.fetchone()
            if not teacher_id_result:
                messagebox.showerror("L·ªói", f"Kh√¥ng t√¨m th·∫•y gi·∫£ng vi√™n v·ªõi t√™n {teacher_name} v√† b·∫±ng c·∫•p {degree_name}")
                return
            teacher_id = teacher_id_result[0]

            # L·∫•y th√¥ng tin gi·∫£ng vi√™n
            cursor.execute("""
                SELECT t.full_name, t.teacher_id, d.degree_name, dept.dept_name 
                FROM teachers t 
                JOIN degrees d ON t.degree_id = d.degree_id 
                JOIN departments dept ON t.dept_id = dept.dept_id 
                WHERE t.teacher_id = %s
            """, (teacher_id,))
            teacher = cursor.fetchone()
            if not teacher:
                messagebox.showerror("L·ªói", f"Kh√¥ng t√¨m th·∫•y gi·∫£ng vi√™n v·ªõi m√£ {teacher_id}")
                return
            full_name, teacher_id, degree_name, dept_name = teacher

            # L·∫•y teacher_coefficient
            cursor.execute("""
                SELECT tc.coefficient 
                FROM teacher_coefficients tc 
                JOIN teachers t ON tc.degree_id = t.degree_id 
                WHERE t.teacher_id = %s AND tc.year = %s
            """, (teacher_id, year))
            teacher_coeff = cursor.fetchone()
            teacher_coefficient = float(teacher_coeff[0]) if teacher_coeff else 1.0

            # L·∫•y teaching rate
            cursor.execute("SELECT amount_per_period FROM teaching_rate WHERE year = %s", (year,))
            rate = cursor.fetchone()
            amount_per_period = float(rate[0]) if rate else 0.0

            # T·∫°o danh s√°ch d·ªØ li·ªáu cho Excel
            data = []
            total_year_salary = 0.0

            # L·∫•y danh s√°ch k·ª≥ h·ªçc
            cursor.execute("SELECT semester_id, semester_name FROM semesters WHERE year = %s ORDER BY semester_name", (year,))
            semesters = cursor.fetchall()

            current_semester = None
            if self.current_semester_var.get():
                current_semester = semesters[0][0] if semesters else None  # L·∫•y k·ª≥ ƒë·∫ßu ti√™n n·∫øu ch·ªçn "Ch·ªâ k·ª≥ hi·ªán t·∫°i"

            for semester_id, semester_name in semesters:
                if self.current_semester_var.get() and semester_id != current_semester:
                    continue

                cursor.execute("""
                    SELECT c.class_id, cm.periods, c.num_students, cm.coefficient AS hp_coeff
                    FROM assignments a
                    JOIN classes c ON a.class_id = c.class_id
                    JOIN course_modules cm ON c.module_id = cm.module_id
                    WHERE a.teacher_id = %s AND c.semester_id = %s
                """, (teacher_id, semester_id))
                classes = cursor.fetchall()

                total_salary = 0.0
                for class_id, periods, num_students, hp_coeff in classes:
                    student_range = self.get_student_range(num_students)
                    cursor.execute("SELECT coefficient FROM class_coefficients WHERE year = %s AND student_range = %s", (year, student_range))
                    class_coeff = cursor.fetchone()
                    class_coefficient = float(class_coeff[0]) if class_coeff else 0.0

                    converted_periods = periods * (hp_coeff + class_coefficient)
                    salary = converted_periods * teacher_coefficient * amount_per_period
                    total_salary += salary

                    data.append({
                        "K·ª≥ h·ªçc": semester_name,
                        "M√£ l·ªõp": class_id,
                        "S·ªë ti·∫øt": periods,
                        "S·ªë ti·∫øt quy ƒë·ªïi": round(converted_periods, 1),
                        "Th√†nh ti·ªÅn (‚Ç´)": round(salary, 0)
                    })

                if classes:
                    data.append({
                        "K·ª≥ h·ªçc": f"T·ªïng ti·ªÅn k·ª≥ {semester_name}",
                        "M√£ l·ªõp": "",
                        "S·ªë ti·∫øt": "",
                        "S·ªë ti·∫øt quy ƒë·ªïi": "",
                        "Th√†nh ti·ªÅn (‚Ç´)": round(total_salary, 0)
                    })

                total_year_salary += total_salary

            # Xu·∫•t Excel
            df = pd.DataFrame(data)
            filename = f"salary_report_{teacher_id}_{year}{'_' + current_semester if self.current_semester_var.get() else ''}.xlsx"
            df.to_excel(filename, index=False)
            messagebox.showinfo("Th√†nh c√¥ng", f"B√°o c√°o ƒë√£ ƒë∆∞·ª£c xu·∫•t ra file: {filename}")

        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ xu·∫•t b√°o c√°o: {e}")
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói khi xu·∫•t Excel: {e}")
        finally:
            cursor.close()
            conn.close()

    def create_or_load_coefficient_table(self):
        year = self.coefficient_year_filter.get().strip()
        if not year:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn nƒÉm h·ªçc")
            return

        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()

            # Ki·ªÉm tra s·ªë l∆∞·ª£ng b·∫£n ghi hi·ªán c√≥ cho nƒÉm h·ªçc
            cursor.execute("SELECT COUNT(*) FROM teacher_coefficients WHERE year = %s", (year,))
            count = cursor.fetchone()[0]

            if count > 0:
                if not messagebox.askyesno("X√°c nh·∫≠n", f"B·∫£ng ƒë√£ ch·ª©a {count} b·∫£n ghi cho nƒÉm {year}. B·∫°n c√≥ mu·ªën ghi ƒë√® kh√¥ng?"):
                    return

            # L·∫•y t·∫•t c·∫£ b·∫±ng c·∫•p t·ª´ degrees
            cursor.execute("SELECT degree_id, degree_name, coefficient FROM degrees ORDER BY degree_name")
            degrees = cursor.fetchall()

            # Th√™m ho·∫∑c c·∫≠p nh·∫≠t h·ªá s·ªë m·∫∑c ƒë·ªãnh
            for degree_id, degree_name, default_coeff in degrees:
                cursor.execute("""
                    INSERT INTO teacher_coefficients (year, degree_id, coefficient)
                    VALUES (%s, %s, %s)
                    ON DUPLICATE KEY UPDATE coefficient = VALUES(coefficient)
                """, (year, degree_id, default_coeff))
            conn.commit()

            # C·∫≠p nh·∫≠t giao di·ªán
            self.load_teacher_coefficients()

        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫°o ho·∫∑c t·∫£i b·∫£ng: {e}")
        finally:
            cursor.close()
            conn.close()

    def recreate_default_coefficient_table(self):
        year = self.coefficient_year_filter.get().strip()
        if not year:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn nƒÉm h·ªçc")
            return

        # Hi·ªÉn th·ªã h·ªôp tho·∫°i x√°c nh·∫≠n
        if not messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën t·∫°o l·∫°i b·∫£ng m·∫∑c ƒë·ªãnh kh√¥ng?"):
            return  # Tho√°t n·∫øu ng∆∞·ªùi d√πng ch·ªçn "Kh√¥ng"

        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()

            # L·∫•y t·∫•t c·∫£ b·∫±ng c·∫•p t·ª´ degrees
            cursor.execute("SELECT degree_id, degree_name, coefficient FROM degrees ORDER BY degree_name")
            degrees = cursor.fetchall()

            # Ghi ƒë√® d·ªØ li·ªáu cho nƒÉm h·ªçc
            for degree_id, degree_name, default_coeff in degrees:
                cursor.execute("""
                    INSERT INTO teacher_coefficients (year, degree_id, coefficient)
                    VALUES (%s, %s, %s)
                    ON DUPLICATE KEY UPDATE coefficient = VALUES(coefficient)
                """, (year, degree_id, default_coeff))
            conn.commit()

            # C·∫≠p nh·∫≠t giao di·ªán
            self.load_teacher_coefficients()

        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫°o l·∫°i b·∫£ng: {e}")
        finally:
            cursor.close()
            conn.close()


    def setup_report_tab(self):
        from report_tab import ReportTab
        self.report_tab_content = ReportTab(self.report_tab)
        self.report_tab_content.pack(fill="both", expand=True)


    def setup_assignment_tab(self):
        # Header frame with title and year combobox
        header_frame = CTkFrame(self.assignment_tab, fg_color="transparent")
        header_frame.pack(fill="x", padx=10, pady=10)
        CTkLabel(header_frame, text="Ph√¢n C√¥ng Gi·∫£ng Vi√™n", font=("Helvetica", 18, "bold"), text_color="black").pack(side="left")
        self.year_combobox = CTkComboBox(header_frame, values=self.get_academic_years(), width=150, command=self.reset_and_filter_classes)
        self.year_combobox.pack(side="right")
        self.year_combobox.set("2021-2022")

        # Filter row 1 frame
        filter_row1_frame = CTkFrame(self.assignment_tab, fg_color="transparent")
        filter_row1_frame.pack(fill="x", padx=10, pady=5)

        # Department filter
        dept_filter_frame = CTkFrame(filter_row1_frame, fg_color="transparent")
        dept_filter_frame.pack(side="left", padx=(0, 10))
        CTkLabel(dept_filter_frame, text="Khoa:", font=("Helvetica", 12), text_color="black").pack(side="left", padx=(0, 5))
        self.dept_combobox = CTkComboBox(dept_filter_frame, values=["Ch·ªçn khoa"] + self.get_dept_names(), width=200, command=self.update_filters)
        self.dept_combobox.pack(side="left")
        self.dept_combobox.set("Ch·ªçn khoa")

        # Teacher filter
        teacher_filter_frame = CTkFrame(filter_row1_frame, fg_color="transparent")
        teacher_filter_frame.pack(side="left", padx=(0, 10))
        CTkLabel(teacher_filter_frame, text="Gi√°o vi√™n:", font=("Helvetica", 12), text_color="black").pack(side="left", padx=(0, 5))
        self.teacher_combobox = CTkComboBox(teacher_filter_frame, values=["Ch·ªçn gi·∫£ng vi√™n"], width=250)
        self.teacher_combobox.pack(side="left")
        self.teacher_combobox.set("Ch·ªçn gi·∫£ng vi√™n")

        # Filter row 2 frame
        filter_row2_frame = CTkFrame(self.assignment_tab, fg_color="transparent")
        filter_row2_frame.pack(fill="x", padx=10, pady=5)

        # Semester filter
        semester_filter_frame = CTkFrame(filter_row2_frame, fg_color="transparent")
        semester_filter_frame.pack(side="left", padx=(0, 10))
        CTkLabel(semester_filter_frame, text="K·ª≥ h·ªçc:", font=("Helvetica", 12), text_color="black").pack(side="left", padx=(0, 5))
        self.semester_combobox = CTkComboBox(semester_filter_frame, values=["Ch·ªçn k·ª≥ h·ªçc"], width=150, command=self.assignment_filter_classes)
        self.semester_combobox.pack(side="left")
        self.semester_combobox.set("Ch·ªçn k·ª≥ h·ªçc")

        # Module filter
        module_filter_frame = CTkFrame(filter_row2_frame, fg_color="transparent")
        module_filter_frame.pack(side="left", padx=(0, 10))
        CTkLabel(module_filter_frame, text="H·ªçc ph·∫ßn:", font=("Helvetica", 12), text_color="black").pack(side="left", padx=(0, 5))
        self.module_combobox = CTkComboBox(module_filter_frame, values=["T·∫•t c·∫£"], width=150, command=self.assignment_filter_classes)
        self.module_combobox.pack(side="left")
        self.module_combobox.set("T·∫•t c·∫£")

        # Assignment status filter
        status_filter_frame = CTkFrame(filter_row2_frame, fg_color="transparent")
        status_filter_frame.pack(side="left", padx=(0, 10))
        CTkLabel(status_filter_frame, text="Tr·∫°ng th√°i:", font=("Helvetica", 12), text_color="black").pack(side="left", padx=(0, 5))
        self.status_combobox = CTkComboBox(status_filter_frame, values=["T·∫•t c·∫£", "ƒê√£ ph√¢n c√¥ng", "Ch∆∞a ph√¢n c√¥ng"], width=150, command=self.assignment_filter_classes)
        self.status_combobox.pack(side="left")
        self.status_combobox.set("T·∫•t c·∫£")

        # Assign button (initially hidden) with 30% width
        filter_row2_frame.update_idletasks()
        total_width = filter_row2_frame.winfo_width()
        assign_button_width = int(total_width * 0.3) if total_width > 0 else 150
        self.assign_button = CTkButton(filter_row2_frame, text="Ph√¢n c√¥ng gi·∫£ng vi√™n", fg_color="#0085FF", command=self.assignment_assign_teacher, state="disabled", width=assign_button_width)
        self.assign_button.pack(side="left", padx=(10, 0))

        # Table frame with scrollbar
        table_frame = CTkFrame(self.assignment_tab, fg_color="#FFFFFF", corner_radius=10)
        table_frame.pack(padx=10, pady=10, fill="both", expand=True)

        # Scrollbar
        canvas = tk.Canvas(table_frame)
        scrollbar = ctk.CTkScrollbar(table_frame, orientation="vertical", command=canvas.yview)
        scrollable_frame = CTkFrame(canvas)

        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # Heading row with fixed total width
        heading_frame = CTkFrame(scrollable_frame, fg_color="#D3D3D3", corner_radius=0)
        heading_frame.pack(fill="x", padx=5, pady=(5, 0))
        
        # Column headers with adjusted widths to match data
        CTkLabel(heading_frame, text="Ch·ªçn", font=("Helvetica", 14, "bold"), text_color="black", width=50, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="M√£ l·ªõp", font=("Helvetica", 14, "bold"), text_color="black", width=100, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="T√™n l·ªõp", font=("Helvetica", 14, "bold"), text_color="black", width=250, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="H·ªçc ph·∫ßn", font=("Helvetica", 14, "bold"), text_color="black", width=200, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="K·ª≥ h·ªçc", font=("Helvetica", 14, "bold"), text_color="black", width=100, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="S·ªë SV", font=("Helvetica", 14, "bold"), text_color="black", width=80, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="Gi·∫£ng vi√™n hi·ªán t·∫°i", font=("Helvetica", 14, "bold"), text_color="black", width=250, anchor="center").pack(side="left", padx=5)
        CTkLabel(heading_frame, text="Thao t√°c", font=("Helvetica", 14, "bold"), text_color="black", width=150, anchor="center").pack(side="left", padx=5)

        # List frame
        self.assignment_list_frame = CTkFrame(scrollable_frame, fg_color="transparent")
        self.assignment_list_frame.pack(fill="both", expand=True, padx=5, pady=5)

        # Load initial data
        self.assignment_update_semester_options()
        self.assignment_update_teacher_options()
        self.update_filters()  # Kh·ªüi t·∫°o danh s√°ch h·ªçc ph·∫ßn
        self.assignment_filter_classes()

    def get_teachers_by_dept(self, dept_name):
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            if dept_name == "T·∫•t c·∫£ khoa":
                cursor.execute("""
                    SELECT t.teacher_id, t.full_name, d.degree_abbr
                    FROM teachers t
                    JOIN degrees d ON t.degree_id = d.degree_id
                    ORDER BY t.full_name
                """)
            else:
                cursor.execute("""
                    SELECT t.teacher_id, t.full_name, d.degree_abbr
                    FROM teachers t
                    JOIN degrees d ON t.degree_id = d.degree_id
                    JOIN departments dept ON t.dept_id = dept.dept_id
                    WHERE dept.dept_name = %s
                    ORDER BY t.full_name
                """, (dept_name,))
            teachers = cursor.fetchall()
            return [f"{row[2]}. {row[1]} ({row[0]})" for row in teachers] if teachers else ["Ch·ªçn gi·∫£ng vi√™n"]
        except mysql.connector.Error:
            return ["Ch·ªçn gi·∫£ng vi√™n"]
        finally:
            cursor.close()
            conn.close()

    def get_semesters_by_year(self, year):
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            cursor.execute("SELECT semester_name FROM semesters WHERE year = %s ORDER BY semester_name", (year,))
            semesters = [row[0] for row in cursor.fetchall()]
            return semesters if semesters else ["Ch·ªçn k·ª≥ h·ªçc"]
        except mysql.connector.Error as e:
            print(f"Error fetching semesters: {e}")  # Th√™m debug log
            return ["Ch·ªçn k·ª≥ h·ªçc"]
        finally:
            cursor.close()
            conn.close()
    
    def get_modules_by_semester(self, year, semester):
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            cursor.execute("""
                SELECT DISTINCT cm.module_name
                FROM semesters s
                JOIN classes c ON s.semester_id = c.semester_id
                JOIN course_modules cm ON c.module_id = cm.module_id
                WHERE s.year = %s AND s.semester_name = %s
                ORDER BY cm.module_name
            """, (year, semester))
            modules = [row[0] for row in cursor.fetchall()]
            return modules if modules else []
        except mysql.connector.Error as e:
            print(f"Error fetching modules: {e}")
            return []
        finally:
            cursor.close()
            conn.close()

    def assignment_update_semester_options(self, event=None):
        year = self.year_combobox.get()
        semesters = self.get_semesters_by_year(year)
        self.semester_combobox.configure(values=["Ch·ªçn k·ª≥ h·ªçc"] + semesters if semesters else ["Ch·ªçn k·ª≥ h·ªçc"])
        self.semester_combobox.set("Ch·ªçn k·ª≥ h·ªçc")
        self.assignment_update_module_options()
        self.assignment_filter_classes()  # C·∫≠p nh·∫≠t b·∫£ng khi thay ƒë·ªïi k·ª≥ h·ªçc

    def assignment_update_teacher_options(self, event=None):
        dept = self.dept_combobox.get()
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            if dept == "Ch·ªçn khoa":
                self.teacher_combobox.configure(values=["Ch·ªçn gi·∫£ng vi√™n"])
                self.teacher_combobox.set("Ch·ªçn gi·∫£ng vi√™n")
            else:
                cursor.execute("""
                    SELECT t.teacher_id, t.full_name, d.degree_abbr
                    FROM teachers t
                    JOIN degrees d ON t.degree_id = d.degree_id
                    JOIN departments dept ON t.dept_id = dept.dept_id
                    WHERE dept.dept_name = %s
                    ORDER BY t.full_name
                """, (dept,))
                teachers = cursor.fetchall()
                if teachers:
                    teacher_list = [f"{row[2]}. {row[1]} ({row[0]})" for row in teachers]
                    self.teacher_combobox.configure(values=["Ch·ªçn gi·∫£ng vi√™n"] + teacher_list)
                    self.teacher_combobox.set("Ch·ªçn gi·∫£ng vi√™n")
                else:
                    self.teacher_combobox.configure(values=["Ch·ªçn gi·∫£ng vi√™n", "Kh√¥ng c√≥ gi√°o vi√™n"])
                    self.teacher_combobox.set("Ch·ªçn gi·∫£ng vi√™n")
        except mysql.connector.Error as e:
            print(f"Error fetching teachers: {e}")
            self.teacher_combobox.configure(values=["Ch·ªçn gi·∫£ng vi√™n", f"L·ªói: {str(e)}"])
            self.teacher_combobox.set("Ch·ªçn gi·∫£ng vi√™n")
        finally:
            if 'cursor' in locals():
                cursor.close()
            if 'conn' in locals():
                conn.close()

    def assignment_update_module_options(self, event=None):
        year = self.year_combobox.get()
        semester = self.semester_combobox.get()
        try:
            if semester != "Ch·ªçn k·ª≥ h·ªçc":
                modules = self.get_modules_by_semester(year, semester)
                self.module_combobox.configure(values=["T·∫•t c·∫£"] + modules if modules else ["T·∫•t c·∫£"])
                self.module_combobox.set("T·∫•t c·∫£")
            else:
                self.module_combobox.configure(values=["T·∫•t c·∫£"])
                self.module_combobox.set("T·∫•t c·∫£")
        except Exception as e:
            print(f"Error updating module options: {e}")
            self.module_combobox.configure(values=["T·∫•t c·∫£"])
            self.module_combobox.set("T·∫•t c·∫£")

    def toggle_class_selection(self, var, class_id):
        if var.get():
            if class_id not in self.selected_classes:
                self.selected_classes.append(class_id)
        else:
            if class_id in self.selected_classes:
                self.selected_classes.remove(class_id)
        self.update_assign_button()

    def update_assign_button(self):
        if self.selected_classes:
            self.assign_button.configure(state="normal")
        else:
            self.assign_button.configure(state="disabled")

    def assignment_filter_classes(self, event=None):
        year = self.year_combobox.get()
        semester = self.semester_combobox.get()
        module = self.module_combobox.get() 
        dept = self.dept_combobox.get()
        status = self.status_combobox.get()

        for widget in self.assignment_list_frame.winfo_children():
            widget.destroy()

        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            query = """
                SELECT c.class_id, c.class_name, cm.module_name, s.semester_name, 
                    COALESCE(ce.enrolled_students, 0) AS enrolled_students,
                    COALESCE(t.full_name, 'Ch∆∞a ph√¢n c√¥ng')
                FROM classes c
                JOIN semesters s ON c.semester_id = s.semester_id
                JOIN course_modules cm ON c.module_id = cm.module_id
                LEFT JOIN assignments a ON c.class_id = a.class_id
                LEFT JOIN teachers t ON a.teacher_id = t.teacher_id
                LEFT JOIN class_enrollments ce ON c.class_id = ce.class_id
                JOIN departments d ON cm.dept_id = d.dept_id
                WHERE s.year = %s
            """
            params = [year]

            if semester != "Ch·ªçn k·ª≥ h·ªçc" and semester != "T·∫•t c·∫£":
                query += " AND s.semester_name = %s"
                params.append(semester)
            if module != "T·∫•t c·∫£":
                query += " AND cm.module_name = %s"
                params.append(module)
            if dept != "Ch·ªçn khoa" and dept != "T·∫•t c·∫£ khoa":
                query += " AND d.dept_name = %s"
                params.append(dept)
            if status == "ƒê√£ ph√¢n c√¥ng":
                query += " AND a.class_id IS NOT NULL"
            elif status == "Ch∆∞a ph√¢n c√¥ng":
                query += " AND a.class_id IS NULL"

            cursor.execute(query, params)
            classes = cursor.fetchall()

            self.selected_classes = []
            if not classes:
                CTkLabel(self.assignment_list_frame, text="Kh√¥ng c√≥ d·ªØ li·ªáu l·ªõp h·ªçc", font=("Helvetica", 12), text_color="red").pack(pady=10)
            else:
                for idx, (class_id, class_name, module_name, semester_name, enrolled_students, teacher_name) in enumerate(classes, 1):
                    class_row = CTkFrame(self.assignment_list_frame, fg_color="#F5F5F5" if idx % 2 else "#FFFFFF")
                    class_row.pack(fill="x", pady=2)  # Gi·∫£m pady t·ª´ 2 xu·ªëng 1 ƒë·ªÉ c√°c row g·∫ßn nhau h∆°n
                    class_row.configure(height=35)  # Th√™m height=25 ƒë·ªÉ row nh·ªè h∆°n
                    class_row.pack_propagate(False)

                    # Ch·ªâ hi·ªán checkbox n·∫øu ch∆∞a ph√¢n c√¥ng
                    if teacher_name == 'Ch∆∞a ph√¢n c√¥ng':
                        check_var = BooleanVar()
                        checkbox = CTkCheckBox(class_row, text="", variable=check_var, width=50, 
                                        command=lambda v=check_var, c=class_id: self.toggle_class_selection(v, c))
                        checkbox.pack(side="left", padx=(10, 2))  # TƒÉng padding b√™n tr√°i l√™n 10
                    else:
                        # Gi·ªØ nguy√™n padding cho empty_frame ƒë·ªÉ ƒë·∫£m b·∫£o cƒÉn ch·ªânh
                        empty_frame = CTkFrame(class_row, width=50, fg_color="transparent")
                        empty_frame.pack(side="left", padx=(10, 2))  # TƒÉng padding b√™n tr√°i l√™n 10
                        empty_frame.pack_propagate(False)

                    CTkLabel(class_row, text=class_id, font=("Helvetica", 12), width=100, anchor="center").pack(side="left", padx=5)
                    CTkLabel(class_row, text=class_name, font=("Helvetica", 12), width=250, anchor="center").pack(side="left", padx=5)
                    CTkLabel(class_row, text=module_name, font=("Helvetica", 12), width=200, anchor="center").pack(side="left", padx=5)
                    CTkLabel(class_row, text=semester_name, font=("Helvetica", 12), width=100, anchor="center").pack(side="left", padx=5)
                    CTkLabel(class_row, text=str(enrolled_students), font=("Helvetica", 12), width=80, anchor="center").pack(side="left", padx=5)
                    CTkLabel(class_row, text=teacher_name, font=("Helvetica", 12), width=250, anchor="center").pack(side="left", padx=5)

                    # Frame ch·ª©a n√∫t v·ªõi thao t√°c t∆∞∆°ng ·ª©ng
                    action_frame = CTkFrame(class_row, fg_color="transparent")
                    action_frame.pack(side="left", padx=5)

                    # Ch·ªâ hi·ªán n√∫t S·ª≠a n·∫øu ƒë√£ ph√¢n c√¥ng
                    if teacher_name != 'Ch∆∞a ph√¢n c√¥ng':
                        CTkButton(action_frame, text="S·ª≠a", fg_color="#FF6384", width=70,
                                command=lambda c=class_id: self.assignment_edit_assignment(c)).pack(side="left", padx=30)

        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu l·ªõp: {e}")
        finally:
            cursor.close()
            conn.close()
        self.update_assign_button()

    def assignment_assign_teacher(self):
        if not self.selected_classes:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt l·ªõp ƒë·ªÉ ph√¢n c√¥ng!")
            return
        teacher = self.teacher_combobox.get()
        if teacher == "Ch·ªçn gi·∫£ng vi√™n":
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn gi·∫£ng vi√™n!")
            return

        teacher_id = teacher.split("(")[-1].strip(")")
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            for class_id in self.selected_classes:
                # Ki·ªÉm tra xem l·ªõp ƒë√£ ƒë∆∞·ª£c ph√¢n c√¥ng ch∆∞a
                cursor.execute("SELECT assignment_id FROM assignments WHERE class_id = %s", (class_id,))
                if cursor.fetchone():
                    messagebox.showwarning("C·∫£nh b√°o", f"L·ªõp {class_id} ƒë√£ ƒë∆∞·ª£c ph√¢n c√¥ng!")
                    continue
                # T·∫°o assignment_id m·ªõi
                cursor.execute("SELECT MAX(CAST(SUBSTRING(assignment_id, 4) AS UNSIGNED)) FROM assignments")
                max_id = cursor.fetchone()[0]
                new_id = f"ASN{str(max_id + 1).zfill(5)}" if max_id else "ASN00001"
                cursor.execute("INSERT INTO assignments (assignment_id, class_id, teacher_id) VALUES (%s, %s, %s)",
                            (new_id, class_id, teacher_id))
            conn.commit()
            messagebox.showinfo("Th√†nh c√¥ng", "Ph√¢n c√¥ng gi·∫£ng vi√™n th√†nh c√¥ng!")
            self.assignment_filter_classes()
            self.selected_classes = []
            self.assign_button.configure(state="disabled")
        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ph√¢n c√¥ng: {e}")
        finally:
            cursor.close()
            conn.close()

    def assignment_edit_assignment(self, class_id):
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            
            # L·∫•y th√¥ng tin ph√¢n c√¥ng hi·ªán t·∫°i
            cursor.execute("""
                SELECT t.teacher_id, t.full_name, d.dept_name 
                FROM assignments a
                JOIN teachers t ON a.teacher_id = t.teacher_id
                JOIN departments d ON t.dept_id = d.dept_id
                WHERE a.class_id = %s
            """, (class_id,))
            current_assignment = cursor.fetchone()
            
            if not current_assignment:
                messagebox.showwarning("C·∫£nh b√°o", f"L·ªõp {class_id} ch∆∞a ƒë∆∞·ª£c ph√¢n c√¥ng!")
                return
            
            current_teacher_id, current_teacher_name, dept_name = current_assignment

            # L·∫•y danh s√°ch gi·∫£ng vi√™n c·ªßa khoa
            cursor.execute("""
                SELECT t.teacher_id, t.full_name, d.degree_abbr 
                FROM teachers t
                JOIN degrees d ON t.degree_id = d.degree_id
                JOIN departments dept ON t.dept_id = dept.dept_id
                WHERE dept.dept_name = %s
                ORDER BY t.full_name
            """, (dept_name,))
            teachers = cursor.fetchall()
            teacher_list = [f"{row[2]}. {row[1]} ({row[0]})" for row in teachers]

            # T·∫°o popup window
            popup = CTkToplevel(self.window)
            popup.title("S·ª≠a ph√¢n c√¥ng gi·∫£ng vi√™n")
            popup.geometry("400x350")

            # CƒÉn gi·ªØa popup
            screen_width = self.window.winfo_screenwidth()
            screen_height = self.window.winfo_screenheight()
            x = (screen_width - 400) // 2
            y = (screen_height - 250) // 2
            popup.geometry(f"400x350+{x}+{y}")

            popup.transient(self.window)
            popup.grab_set()

            # Main frame
            frame = CTkFrame(popup, fg_color="#F0F0F0", corner_radius=10)
            frame.pack(padx=20, pady=20, fill="both", expand=True)

            # Title
            CTkLabel(frame, text="S·ª≠a ph√¢n c√¥ng gi·∫£ng vi√™n", 
                    font=("Helvetica", 16, "bold")).pack(pady=(0,20))

            # Class info
            CTkLabel(frame, text=f"M√£ l·ªõp: {class_id}", 
                    font=("Helvetica", 12)).pack(pady=5)
            CTkLabel(frame, text=f"Khoa: {dept_name}", 
                    font=("Helvetica", 12)).pack(pady=5)

            # Teacher selection
            CTkLabel(frame, text="Ch·ªçn gi·∫£ng vi√™n:", 
                    font=("Helvetica", 12)).pack(pady=5)
            
            # Find current teacher in list
            current_teacher = next((t for t in teacher_list 
                                if t.endswith(f"({current_teacher_id})")), teacher_list[0])
            
            teacher_var = StringVar(value=current_teacher)
            teacher_combo = CTkComboBox(frame, values=teacher_list, 
                                    variable=teacher_var, width=300)
            teacher_combo.pack(pady=10)

            # Buttons frame
            button_frame = CTkFrame(frame, fg_color="transparent")
            button_frame.pack(pady=20)

            def save_assignment():
                if not messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën thay ƒë·ªïi ph√¢n c√¥ng n√†y?", parent=popup):
                    return
                    
                new_teacher = teacher_var.get()
                if new_teacher == "Ch·ªçn gi·∫£ng vi√™n":
                    messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn gi·∫£ng vi√™n!", parent=popup)
                    return

                new_teacher_id = new_teacher.split("(")[-1].strip(")")
                
                try:
                    conn = mysql.connector.connect(**DB_CONFIG)
                    cursor = conn.cursor()
                    cursor.execute("""
                        UPDATE assignments 
                        SET teacher_id = %s 
                        WHERE class_id = %s
                    """, (new_teacher_id, class_id))
                    conn.commit()
                    messagebox.showinfo("Th√†nh c√¥ng", 
                                    "C·∫≠p nh·∫≠t ph√¢n c√¥ng th√†nh c√¥ng!", parent=popup)
                    popup.destroy()
                    self.assignment_filter_classes()
                except mysql.connector.Error as e:
                    messagebox.showerror("L·ªói", 
                                    f"Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ph√¢n c√¥ng: {e}", parent=popup)
                finally:
                    cursor.close()
                    conn.close()

            # Save button
            CTkButton(button_frame, text="L∆∞u", fg_color="#0085FF", 
                    width=100, command=save_assignment).pack(side="left", padx=5)
            
            # Cancel button
            CTkButton(button_frame, text="H·ªßy", fg_color="#FF6384", 
                    width=100, command=popup.destroy).pack(side="left", padx=5)

        except mysql.connector.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ph√¢n c√¥ng: {e}")
        finally:
            if 'cursor' in locals():
                cursor.close()
            if 'conn' in locals():
                conn.close()

    def reset_and_filter_classes(self, event=None):
        year = self.year_combobox.get()
        self.dept_combobox.set("Ch·ªçn khoa")
        self.teacher_combobox.set("Ch·ªçn gi·∫£ng vi√™n")
        self.semester_combobox.set("Ch·ªçn k·ª≥ h·ªçc")
        self.module_combobox.set("T·∫•t c·∫£")
        self.status_combobox.set("T·∫•t c·∫£")
        self.assignment_update_semester_options()  # C·∫≠p nh·∫≠t k·ª≥ h·ªçc d·ª±a tr√™n nƒÉm m·ªõi
        self.assignment_filter_classes()  # L·ªçc l·∫°i b·∫£ng v·ªõi nƒÉm m·ªõi
    
    def update_filters(self, event=None):
        dept = self.dept_combobox.get()
        year = self.year_combobox.get()
        semester = self.semester_combobox.get()
        
        # Update teacher options based on department
        self.assignment_update_teacher_options()
        
        # Update module options based on department and semester
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            
            if dept != "Ch·ªçn khoa" and semester != "Ch·ªçn k·ª≥ h·ªçc":
                # L·∫•y danh s√°ch h·ªçc ph·∫ßn theo khoa v√† k·ª≥ h·ªçc
                cursor.execute("""
                    SELECT DISTINCT cm.module_name
                    FROM course_modules cm
                    JOIN classes c ON cm.module_id = c.module_id
                    JOIN semesters s ON c.semester_id = s.semester_id
                    JOIN departments d ON cm.dept_id = d.dept_id
                    WHERE d.dept_name = %s 
                    AND s.year = %s
                    AND s.semester_name = %s
                    ORDER BY cm.module_name
                """, (dept, year, semester))
                
                modules = [row[0] for row in cursor.fetchall()]
                if modules:
                    self.module_combobox.configure(values=["T·∫•t c·∫£"] + modules)
                else:
                    self.module_combobox.configure(values=["T·∫•t c·∫£"])
            else:
                # N·∫øu ch∆∞a ch·ªçn khoa ho·∫∑c k·ª≥ h·ªçc, l·∫•y t·∫•t c·∫£ h·ªçc ph·∫ßn
                if dept != "Ch·ªçn khoa":
                    cursor.execute("""
                        SELECT DISTINCT cm.module_name
                        FROM course_modules cm
                        JOIN departments d ON cm.dept_id = d.dept_id
                        WHERE d.dept_name = %s
                        ORDER BY cm.module_name
                    """, (dept,))
                else:
                    cursor.execute("""
                        SELECT DISTINCT cm.module_name
                        FROM course_modules cm
                        ORDER BY cm.module_name
                    """)
                    
                modules = [row[0] for row in cursor.fetchall()]
                self.module_combobox.configure(values=["T·∫•t c·∫£"] + modules)

            self.module_combobox.set("T·∫•t c·∫£")
            
        except mysql.connector.Error as e:
            print(f"Error updating modules: {e}")
            self.module_combobox.configure(values=["T·∫•t c·∫£"])
            self.module_combobox.set("T·∫•t c·∫£")
        finally:
            if 'cursor' in locals():
                cursor.close()
            if 'conn' in locals():
                conn.close()
        
        # C·∫≠p nh·∫≠t l·∫°i b·∫£ng d·ªØ li·ªáu
        self.assignment_filter_classes()